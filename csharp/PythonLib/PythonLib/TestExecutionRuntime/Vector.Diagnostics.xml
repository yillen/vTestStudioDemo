<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vector.Diagnostics</name>
    </assembly>
    <members>
        <member name="T:Vector.Diagnostics.AuthenticationResult">
            <summary>
            Status of an authentication.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.AuthenticationResult.Ok">
            <summary>
            Authentication succeeded.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.AuthenticationResult.Rejected">
            <summary>
            Authentication rejected.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.AuthenticationResult.NotReady">
            <summary>
            Authentication is not ready. Check configuration in host application.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.AuthenticationResult.MissingData">
            <summary>
            Some information is not present, may be a result of a wrong configuration.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.AuthenticationResult.AuthJobNotFound">
            <summary>
            Authentication job not found.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.AuthenticationResult.Error">
            <summary>
            General error on authentication.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.ClearDtcResult">
            <summary>
            Result of clearing the <see cref="T:Vector.Diagnostics.Dtc"/>s of an <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ClearDtcResult.Status">
            <summary>
            Status of the clear DTCs operation.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ClearDtcResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:Vector.Diagnostics.ClearDtcResult"/>.
            </summary>
            <returns>The status as string.</returns>
        </member>
        <member name="T:Vector.Diagnostics.DfwApiFacadeProvider">
            <summary>
            This static class is used as store for an object that implements <see cref="T:Vector.Diagnostics.IDfwApiWrapper"/>.
            The via the static <c>Adapter</c> property provided instance is used by the VDS implementation
            to access the native implementation (the Vector Diagnostics Internal - VDI - API).
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DfwApiFacadeProvider.sDfwApiWrapperImpl">
            <summary>
            Member for the used <see cref="T:Vector.Diagnostics.IDfwApiWrapper"/> implementation (adapter to access the VDI API).
            </summary>
            <remarks>
            This member was not declared as volatile by design: to reduce performance impacts.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.DfwApiFacadeProvider.Adapter">
            <summary>
            Gets or sets the adapter that implements <code>IDfwApiWrapper</code>.
            </summary>
            <remarks>
            The property is not thread safe so in a multi threaded environment the user code has to ensure that
            the adapter is provided, before other threads request the adapter by appropriate synchronization.
            The reason not using locks inside the adapter are performance requirements by environments like CANoe.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.DfwApiFacadeProvider.IsAdapterAvailable">
            <summary>
            Gets a value indicating whether a IDfwApiWrapper adapter is available.
            </summary>
            <value>
            <c>true</c> if a IDfwApiWrapper adapter is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Vector.Diagnostics.DfwApiFacadeProvider.CheckApplicationDomain">
            <summary>
            The method checks the name of the current application domain and throws an <see cref="T:System.Reflection.TargetInvocationException"/> when 
            the current namespace has the name 'CANw_Net_StructuredModule' (special handling for CANoe). 
            </summary>
            <exception cref="T:System.Reflection.TargetInvocationException">A <code>TargetInvocationException</code> is thrown when execution is not allowed 
            in the current application domain.</exception>
        </member>
        <member name="M:Vector.Diagnostics.DfwApiFacadeProvider.TryGetEcuQualifierForLogicalLink(System.String,System.String@)">
            <summary>
            Get the ecu qualifier for the given logical link.
            </summary>
            <param name="logicalLink">Logical link qualifier</param>
            <param name="oEcuQualifier">Contains the ecu qualifier when the method returns <c>true</c>.</param>
            <returns><c>true</c> when successfully executed; otherwise <c>false</c> is returned</returns>
        </member>
        <member name="M:Vector.Diagnostics.DfwApiFacadeProvider.TryGetAllAvailableEcuQualifiers(System.String[]@)">
            <summary>
            Gets all ECU qualifiers known to the environment.
            </summary>
            <param name="oEcuIdStrings">When <c>true</c> is returned contains all available ECU qualifiers (unique IDs) known to the environment (CANoe, CANape, ...).</param>
            <returns><c>true</c> when successfully executed; otherwise <c>false</c> is returned</returns>
        </member>
        <member name="M:Vector.Diagnostics.DfwApiFacadeProvider.TryGetIsFunctional(System.UInt32,System.Boolean@)">
            <summary>
            Gets the functional attribute of an ECU.
            </summary>
            <param name="iEcuHandle">The ECU's handle</param>
            <param name="oIsFunctional">When <c>true</c> is returned contains the IsFunctional attribute: <c>true</c> functional communication used; otherwisse <c>false</c></param>
            <returns><c>true</c> when successfully executed; <c>false</c> when an error occured (VDI adapter not available, ...)</returns>
        </member>
        <member name="M:Vector.Diagnostics.DfwApiFacadeProvider.TryGetEcuQualifierOfResponse(System.UInt32,System.String@)">
            <summary>
            Gets the ECU qualifier to a response handle.
            </summary>
            <param name="iResponseHandle">The response handle.</param>
            <param name="oEcuQualifier">When <c>true</c> is returned contains the ECU identifier </param>
            <returns><c>true</c> when successfully executed; <c>false</c> when an error occured (VDI adapter not available, ...)</returns>
        </member>
        <member name="T:Vector.Diagnostics.Application">
            <summary>
            The Application is the starting point for each script. 
            The Application class has access to the loaded ECUs of the scripting host via
            the application 'environment' (i.e. CANape, CANoe, etc.; e.g. Write window, CANape device or CANoe target, ...).
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Application.GetEcu">
            <summary>
            Get access to the ECU that is provided (by the application) for the current execution context.
            </summary>
            <returns>The Ecu object if there is one defined for the current execution context, null otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Application.GetEcu(System.String)">
             <summary>
             Gets the ECU with the given qualifier.
             </summary>
             <param name="ecuQualifier">The unique ECU identification string.</param>
             <returns>The ECU object if it exists, null otherwise.</returns>
             <remarks>
             NOTES:
             <list type="BULLETS">
             <item>
             This method enables access to an already configured ECU of the host
             application. (The configuration includes the variant selection.)
             </item>
             <item>
             A qualifier can be assigned to an ECU in the application (e.g. in CANoe, CANape),
             therefore there is no guarantee that different applications know the ECU under
             the same qualifier.
             </item>
             </list>
             </remarks>
             <example>This example shows how to get an ECU by an ecu identifier, create a
             request, and retrieve a parameter from that request.
             <code>
             public void ApplicationSample()
             {
               // Using the ECU with the qualifier "MyECU"
               Ecu myEcu = Application.GetEcu("MyECU");
             
               // Creating a request using the service qualifier
               Request request1 = myEcu.CreateRequest("Software_Version_Read");
            
               // Alternative: create a request using a PDU specified as raw byte stream
               Request request2 = myEcu.CreateRequest(new byte[] { 0x10, 0x03 });
            
               // Get a parameter from the request
               Parameter parameter = request1.GetParameter("My_Param");
             }
             </code>
             </example>
        </member>
        <member name="M:Vector.Diagnostics.Application.GetEcuByLogicalLink(System.String)">
            <summary>
            Get access to the ECU for the given logical link
            </summary>
            <param name="logicalLink">Logical link qualifier</param>
            <returns>The ECU object if it exists, null otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Application.GetAvailableEcuQualifiers">
            <summary>
            Gets the available ecu qualifiers.
            </summary>
            <returns>A readonly collection that contains the available ECU qualifiers.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Application.GenerateSecurityKey(Vector.Diagnostics.Ecu,System.Byte[],System.Byte,System.String,System.Byte[]@)">
            <summary>
            Generates the security key.
            </summary>
            <remarks>The ECU variant (<see cref="P:Vector.Diagnostics.Ecu.Variant"/>) is passed to the seed and key dll.</remarks>
            <param name="ecu">The ECU where the seed and key dll is configured.</param>
            <param name="seed">The seed from the ECU.</param>
            <param name="securityLevel">The security level.</param>
            <param name="option">The option string. Set <see cref="F:System.String.Empty"/> if no option string is provided.</param>
            <param name="key">The generated key as output parameter.</param>
            <returns><see cref="F:Vector.Diagnostics.GenerateSecurityKeyResult.Success"/> if the key was generated without an error.</returns>
            <seealso cref="M:Vector.Diagnostics.Ecu.Unlock(System.Byte)"/>
            <seealso cref="M:Vector.Diagnostics.Ecu.Unlock(System.Byte,System.String)"/>
            <example>Unlocking an ECU using the <see cref="M:Vector.Diagnostics.Application.GenerateSecurityKey(Vector.Diagnostics.Ecu,System.Byte[],System.Byte,System.String,System.Byte[]@)"/> method. If you do not have to provide additional parameters except the security level then use <see cref="M:Vector.Diagnostics.Ecu.Unlock(System.Byte)"/> or <see cref="M:Vector.Diagnostics.Ecu.Unlock(System.Byte,System.String)"/> which provides a more convenient API.
            <code>
            public void GeneratingKeyForEcuAndUnlockEcuInLevel1()
            {
                // Get the first ECU
                Ecu ecu = Application.GetEcu();
               
                // Create request for requesting the seed in level 0x01
                Request requestSeedRequest = ecu.CreateRequest(new byte[] { 0x27, 0x01 });
                SendResult sendResult = requestSeedRequest.Send();
                if (sendResult.Status != SendStatus.Ok)
                {
                    Output.WriteLine("Error sending request seed: " + sendResult.Status);
                    return;
                }
               
                // Extract the seed from the response of $27 01
                byte[] requestSeedResponsePdu = sendResult.Response.Pdu;
                byte[] seed = new byte[requestSeedResponsePdu.Length - 2];
                Array.Copy(requestSeedResponsePdu, 2, seed, 0, seed.Length);
               
                // Generate the key on the current using the extracted seed in level 1 without option strings
                byte[] key;
                GenerateSecurityKeyResult generateSecurityKeyResult = Application.GenerateSecurityKey(ecu, seed, 1, string.Empty, out key);
                if (generateSecurityKeyResult != GenerateSecurityKeyResult.Success)
                {
                    Output.WriteLine("Error generating key from seed (" + BitConverter.ToString(seed) + "): " + generateSecurityKeyResult);
                    return;
                }
               
                // Create request for sending the key
                byte[] sendKeyPdu = new byte[key.Length + 2];
                sendKeyPdu[0] = 0x27;
                sendKeyPdu[1] = 0x02;
                Array.Copy(key, 0, sendKeyPdu, 2, key.Length);
               
                // Try to unlock the ECU by sending the key
                Request requestSendKey = ecu.CreateRequest(sendKeyPdu);
                SendResult sendKeySendResult = requestSendKey.Send();
                if (sendKeySendResult.Status != SendStatus.Ok)
                {
                    Output.WriteLine("Error sending key (" + BitConverter.ToString(key) + "): " + sendKeySendResult.Status);
                    return;
                }
               
                // Check for positive response (= successful) or negative response code
                if (!sendKeySendResult.Response.IsPositive)
                {
                    Output.WriteLine("Unlocking ECU with key failed with an NRC. Response: " + BitConverter.ToString(sendKeySendResult.Response.Pdu));
                    return;
                }
               
                // Enter stuff to be executed on an unlocked ECU.
            }
            </code>
            </example>
        </member>
        <member name="T:Vector.Diagnostics.ExceptionType">
            <summary>
            Defines constants that are used by the <see cref="T:Vector.Diagnostics.DiagnosticException"/> class
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ExceptionType.Unspecified">
            <summary>
            An unspecified error occurred.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ExceptionType.IllegalValueConversion">
            <summary>
            An error occurred during the conversion of a value.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ExceptionType.OperationNotSupported">
            <summary>
            The requested operation is not supported, e.g. by the underlying protocol.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.DiagnosticException">
            <summary>
            The exception that is thrown when the conversion of a parameter value fails.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticException.#ctor(Vector.Diagnostics.ExceptionType)">
            <summary>
            Initializes a new instance of the DiagnosticException class with an <see cref="T:Vector.Diagnostics.ExceptionType"/>.
            </summary>
            <param name="exceptionType">Type of the exception (e.g. illegal value conversion)</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.DiagnosticException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.DiagnosticException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.DiagnosticException"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.DiagnosticException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="P:Vector.Diagnostics.DiagnosticException.Type">
            <summary>
            Information about the <see cref="T:Vector.Diagnostics.DiagnosticException"/>.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticException.ToString">
            <summary>
            Returns the string representation of the current instance.
            </summary>
            <returns>The string representation of the current instance.</returns>
        </member>
        <member name="T:Vector.Diagnostics.Dtc">
            <summary>
            Represents a DTC in an <see cref="P:Vector.Diagnostics.Dtc.Ecu"/>.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Dtc.#ctor(Vector.Diagnostics.Ecu,System.Byte,System.String,System.String,System.String,System.String,Vector.Diagnostics.DtcInformationCollection)">
            <summary>
            Internal method to create a DTC.
            </summary>
            <param name="ecu">The ecu</param>
            <param name="status">The status of the DTC.</param>
            <param name="errorText">The error text of the DTC.</param>
            <param name="hexCode">The hex code of the DTC.</param>
            <param name="saeCode">The SAE code of the DTC.</param>
            <param name="displayTroubleCode">The Display Trouble Code</param>
            <param name="dtcInformationItems">error conditions</param>
        </member>
        <member name="P:Vector.Diagnostics.Dtc.Ecu">
            <summary>
            The <see cref="P:Vector.Diagnostics.Dtc.Ecu"/> to which this <see cref="T:Vector.Diagnostics.Dtc"/> belongs.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Dtc.Status">
            <summary>
            The DTC status byte.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Dtc.ErrorText">
            <summary>
            The error text of the DTC.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Dtc.HexCode">
            <summary>
            The DTC code in hex format.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Dtc.SaeCode">
            <summary>
            The DTC code in the SAE format.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Dtc.DisplayTroubleCode">
            <summary>
            The display trouble code of the DTC.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Dtc.DtcInformationItems">
            <summary>
            List of error conditions for the <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Dtc.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <returns>the string representation of the diagnostic trouble code</returns>
        </member>
        <member name="M:Vector.Diagnostics.Dtc.Equals(Vector.Diagnostics.Dtc)">
            <summary>
            compares two DTCs
            </summary>
            <param name="other">the other DTC</param>
            <returns>true, in case both are equal - false, if not</returns>
        </member>
        <member name="M:Vector.Diagnostics.Dtc.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Vector.Diagnostics.Dtc" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Vector.Diagnostics.Dtc" />.</param>
            <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Vector.Diagnostics.Dtc" />; otherwise, false.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Dtc.GetHashCode">
            <summary>Serves as a hash function for the <see cref="T:Vector.Diagnostics.Dtc"/> type. </summary>
            <returns>A hash code for the current <see cref="T:Vector.Diagnostics.Dtc" />.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Dtc.op_Equality(Vector.Diagnostics.Dtc,Vector.Diagnostics.Dtc)">
            <summary>
            Determines, whether two <see cref="T:Vector.Diagnostics.Dtc"/> objects are equal.
            </summary>
            <param name="left">The DTC that should be compared...</param>
            <param name="right">...with this one.</param>
            <returns>true if the specified <see cref="T:Vector.Diagnostics.Dtc"/> objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Dtc.op_Inequality(Vector.Diagnostics.Dtc,Vector.Diagnostics.Dtc)">
            <summary>
            Determines, whether two <see cref="T:Vector.Diagnostics.Dtc"/> objects are not equal.
            </summary>
            <param name="left">The DTC that should be compared...</param>
            <param name="right">...with this one.</param>
            <returns>true if the specified <see cref="T:Vector.Diagnostics.Dtc"/> objects are not equal, otherwise false.</returns>
        </member>
        <member name="T:Vector.Diagnostics.DtcCollection">
            <summary>
            Strongly typed collection for <see cref="T:Vector.Diagnostics.Dtc"/>s.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DtcCollection.#ctor(System.Collections.Generic.IEnumerable{Vector.Diagnostics.Dtc})">
            <summary>
            Creates the DTC collection.
            </summary>
            <param name="dtcs">list of DTCs</param>
        </member>
        <member name="M:Vector.Diagnostics.DtcCollection.Dispose">
            <summary>
            Clean up the <see cref="T:Vector.Diagnostics.Dtc"/>s in the <see cref="T:Vector.Diagnostics.DtcCollection"/>.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.DtcCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Vector.Diagnostics.Dtc"/> at the specified index.
            </summary>
            <param name="index">The index of the Dtc to return.</param>
            <returns>Returns the <see cref="T:Vector.Diagnostics.Dtc"/> at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><see cref="T:System.IndexOutOfRangeException"/> is throw, if <paramref name="index"/> is negative or greater (or equal) the number of elements in this <see cref="T:Vector.Diagnostics.DtcCollection"/>.</exception>
        </member>
        <member name="M:Vector.Diagnostics.DtcCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:Vector.Diagnostics.DtcCollection"/>.
            </summary>
            <returns>A string with the description of the DTC collection.</returns>
        </member>
        <member name="T:Vector.Diagnostics.DtcInformation">
            <summary>
            Additional information about a <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.DtcInformation.Qualifier">
            <summary>
            The qualifier of the DTC information.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.DtcInformation.Name">
            <summary>
            The name of the DTC information.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.DtcInformation.Value">
            <summary>
            The value of the DTC information.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.DtcInformation.Unit">
            <summary>
            The (optional) unit of the DTC information.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DtcInformation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:Vector.Diagnostics.DtcInformation"/>.
            </summary>
            <returns>A string representation of the <see cref="T:Vector.Diagnostics.DtcInformation"/>.</returns>
        </member>
        <member name="T:Vector.Diagnostics.DtcInformationCollection">
            <summary>
            Strongly typed collection for <see cref="T:Vector.Diagnostics.DtcInformation"/>s.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DtcInformationCollection.Dispose">
            <summary>
            Clean up the <see cref="T:Vector.Diagnostics.Dtc"/>s in the <see cref="T:Vector.Diagnostics.DtcInformationCollection"/>.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DtcInformationCollection.Dispose(System.Boolean)">
            <summary>
            Dispose method with disposing overloading.
            </summary>
            <param name="disposing">Whether native resource or managed resources should be disposed.</param>
        </member>
        <member name="P:Vector.Diagnostics.DtcInformationCollection.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Vector.Diagnostics.DtcInformation"/> at the specified index.
            </summary>
            <param name="index">The index of the DtcInformation to return.</param>
            <returns>Returns the <see cref="T:Vector.Diagnostics.DtcInformation"/> at the specified <paramref name="index"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><see cref="T:System.IndexOutOfRangeException"/> is throw, if <paramref name="index"/> is negative or greater (or equal) the number of elements in this <see cref="T:Vector.Diagnostics.DtcInformationCollection"/>.</exception>
        </member>
        <member name="M:Vector.Diagnostics.DtcInformationCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:Vector.Diagnostics.DtcInformationCollection"/>.
            </summary>
            <returns>Returns the string representation to this DTC collection.</returns>
        </member>
        <member name="T:Vector.Diagnostics.Ecu">
             <summary>
             The ECU represents a diagnostics server. Each ECU references a diagnostics
             description that defines the diagnostics services. Within the application the
             communication channel is configured to allow access to the ECU via a network.
             </summary>
             <remarks>The ECU has to be configured in the host application.</remarks>
             <example>
             The following example shows how to get an ECU, change the session to extended
             session and activate sending TesterPresent messages to stay in the extended
             session.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request using a raw byte stream as PDU. 
               using(Request request = myEcu.CreateRequest(new byte[] { 0x10, 0x03 }))
               {
                 // With the C# 'using' keyword one can define a scope, 
                 // outside of which an object will automatically be disposed.
            
                 // Send the request to the ECU and wait for a response
                 using(SendResult result = request.Send())
                 {
                   // Check if the message transmission was successful
                   if (result.Status == SendStatus.Ok)
                   {
                     // Get the response from the send result
                     // Caution: the response might be null
                     Response response = result.Response;
            
                     // Check if the ECU sent a positive response
                     if (response.IsPositive)
                     {
                         // Activate sending TesterPresent messages
                         myEcu.ActivateTesterPresent(true);
                     }
                   }
                 }
               }
             }
             </code>
             </example>
             <remarks>
             The resources that are held for messages (requests and responses) have to be cleared after the 
             according objects will not be accessed any more. This has to be done by calling the Dispose() method 
             of such objects or by using the the C# 'using' statement. To assure that all (of the possibly multiple) 
             responses of a service communication transaction are cleared, call the Dispose() method of the SendResult object.
             </remarks>
        </member>
        <member name="F:Vector.Diagnostics.Ecu.mDisposed">
            <summary>
            Flag to track the disposed state.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.Ecu.mEcuImpl">
            <summary>
            The real ECU.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.#ctor(Vector.Diagnostics.IEcu)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Ecu"/> class.
            </summary>
            <param name="ecuImpl">The Ecu</param>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.Ecu"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Dispose">
            <summary>
            Free resources allocated for this message.
            Call this method when the message is no longer used.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.GetHandle">
            <summary>
            Gets the native handle of the current <see cref="T:Vector.Diagnostics.Ecu" /> instance.
            </summary>
            <returns>The native ECU handle.</returns>
            <remarks>This method is not part of the official VDS implementation and might be changed or removed in the future.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.CreateRequest(System.String)">
             <summary>
             Create a request using the service qualifier.
             </summary>
             <param name="serviceQualifier">The qualifier of the service.</param>
             <returns>The request object with the given qualifier. Returns null if no service with given qualifier is available.</returns>
             <example>This example shows how to create a new request based on the service qualifier.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request using the service qualifier
               using(Request request = myEcu.CreateRequest("Software_Version_Read"))
               {
                 // ...
               }
               // The resources that are held for messages (requests and responses) have to be
               // cleared after the according objects will not be accessed any more.
               // This has to be done by calling the Dispose() method of such objects or by the C# 'using' statement.
             }
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.CreateRequestsBySemantic(System.String)">
             <summary>
             Creates requests using the supplied semantic.
             </summary>
             <param name="semantic">The semantic of the service.</param>
             <returns>A collection of requests with the supplied semantic. The collection is always initialized, but can be empty.</returns>
             <example>This example shows how to create a request based on a given semantic.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request using a semantic
               using(RequestCollection requests = myEcu.CreateRequestsBySemantic("FAULTREAD"))
               {
                 if(requests.Count > 0)
                 {
                   ...
                 }
               }
             }
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.CreateRequest(System.Byte[])">
             <summary>
             Create a request using raw bytes as PDU.
             </summary>
             <param name="bytes">Byte array containing the PDU.</param>
             <returns>The request object.</returns>
             <example>This example shows how to create a new request based on a PDU.
             <code>
             // Use the ECU currently selected by the Application
             Ecu myEcu = Application.GetEcu();
            
             // Create a request using raw bytes as PDU
             using(Request request = myEcu.CreateRequest(new byte[] { 0x10, 0x03 }))
             {
               // ...
             }
             // The resources that are held for messages (requests and responses) have to be
             // cleared after the according objects will not be accessed any more.
             // This has to be done by calling the Dispose() method of such objects or by the C# 'using' statement.
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ActivateTesterPresent(System.Boolean)">
             <summary>
             Activates (or deactivates) the periodic sending of the tester present request message by the application.
             </summary>
             <param name="activateTP">true: activate tester present; false: deactivate tester present</param>
             <returns>False if action failed.</returns>
             <example>
             The following example shows how to get an ECU, change the session to extended
             session and activate sending TesterPresent messages to stay in the extended
             session.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request specifying the service qualifier
               Request request = myEcu.CreateRequest("Extended_Session_Start");
            
               // Send the request to the ECU and wait for a response
               SendResult result = request.Send();
            
               // Check if the request transmission was successful
               if (result.Status == SendStatus.Ok)
               {
                 // Get the response from the send result
                 // Caution: the response might be null
                 Response response = result.Response;
            
                 // Check if the ECU sent a positive response
                 if (response.IsPositive)
                 {
                   // Activate sending TesterPresent messages
                   myEcu.ActivateTesterPresent(true);
                 }
               }
            
               // The resources that are held for messages (requests and responses) have to be cleared
               // when the according objects will not be accessed any more. This has to be done by calling 
               // the Dispose() method of such objects or by the C# 'using' statement.
               request.Dispose();
               result.Dispose();
             }
             </code>
             </example>
             <returns>False if action failed.</returns>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.IsTesterPresentActive">
            <summary>
            Get the current tester present sending state.
            </summary>
            <returns>true: application sends tester present periodically; false: tester present off or the state couldn't be retrieved</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.IdentifyAndSelectVariant">
            <summary>
            Identify and select ECU variant and give the variant qualifier back.
            </summary>
            <value>The qualifier of the ECU variant.</value>
            <remarks>Start the variant identification and selection.</remarks>
            <returns>If the selection of the variant was successfully the variant qualifier is returned.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.IdentifyVariant">
            <summary>
            IdentifyVariant returns the qualifier of the identified ECU variant.
            </summary>
            <returns>The qualifier of the identified variant if successful, otherwise an empty string.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.SelectVariant(System.String)">
            <summary>
            Selects the ECU variant by its qualifier.
            In case an empty string is passed to SelectVariant it shall return VariantSelectionResult.VariantDoesNotExist.
            </summary>
            <param name="qualifier">The qualifier of the variant that is selected.</param>
            <returns>The appropriate <see cref="T:Vector.Diagnostics.VariantSelectionResult"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Unlock(System.Byte)">
            <summary>
            Unlocks the ECU in the specified level.
            </summary>
            <param name="securityLevel">The security level.</param>
            <returns><see cref="F:Vector.Diagnostics.SecurityAccessResult.Success"/> if ECU was unlocked successfully otherwise check value of <see cref="T:Vector.Diagnostics.SecurityAccessResult"/>.</returns>
            <example>
            <code>
            public void UnlockEcuInLevel1()
            {
                // Get the first ECU
                Ecu ecu = Application.GetEcu();
               
                // Unlock ECU in Level 1:
                // - Request seed with $27 01
                // - Calculate key using seed key dll and response of $27 01
                // - Send key using $27 02 and calculated key
                // - if ECU responds with positive response 
                SecurityAccessResult securityAccessResult = ecu.Unlock(1);
                
                // Check result of unlocking the ECU
                if (securityAccessResult == SecurityAccessResult.Success)
                {
                  Output.WriteLine("Unlocking ECU was successful.");
                }
               
                // Enter stuff to be executed on an unlocked ECU.
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Unlock(System.Byte,System.String)">
            <summary>
            Unlocks the ECU in the specified level using an additional option string.
            </summary>
            <param name="securityLevel">The security level.</param>
            <param name="option">The option string to be passed to the seed and key DLL.</param>
            <returns>
              <see cref="F:Vector.Diagnostics.SecurityAccessResult.Success"/> if ECU was unlocked successfully.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Close">
            <summary>
            Invalidate ECU and its hierarchy; free resources.
            </summary>
            <remarks> 
            Called by Dispose. <see cref="T:Vector.Diagnostics.Request"/> and <see cref="T:Vector.Diagnostics.Request"/>  
            instances assigned to this ECU are not valid anymore.
            </remarks>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ToString">
            <summary>
            Get the ECU identification name.
            </summary>
            <returns>Identifier of the ECU</returns>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.GetServiceQualifiers">
            <summary>
            Gets the service qualifiers.
            </summary>
            <returns>A list of available service qualifiers.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ThrowObjectDisposedExceptionWhenAlreadyDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> when the current instance is already disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ReadDtcs">
            <summary>
            Reads all <see cref="T:Vector.Diagnostics.Dtc"/>s for the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadDtcResult"/> containing the status of the operation and a list of <see cref="T:Vector.Diagnostics.Dtc"/>s.</returns>
            <example>This example shows how to read the <see cref="T:Vector.Diagnostics.Dtc"/>s and print a small report.
            <code>
            public void PrintDtcReportScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              ReadDtcResult result = myEcu.ReadDtcs();
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Print out DTC information. e.g. &quot;P0010 11 Camshaft Position Actuator Circuit short to ground: 0x09&quot;
                Output.WriteLine(dtc.SaeCode + " - " + dtc.Name + ": 0x" + dtc.Status.ToString("x2"));
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ReadDtcs(System.Byte)">
            <summary>
            Reads all <see cref="T:Vector.Diagnostics.Dtc"/>s which have the given DTC status
            </summary>
            <param name="dtcStatus">The status of the <see cref="T:Vector.Diagnostics.Dtc"/> in the <see cref="T:Vector.Diagnostics.Ecu"/>.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadDtcResult"/> containing the status of the operation and a list of <see cref="T:Vector.Diagnostics.Dtc"/>s with the status of <paramref name="dtcStatus"/>.</returns>
            <example>This example shows how to read all active <see cref="T:Vector.Diagnostics.Dtc"/>s in the <see cref="T:Vector.Diagnostics.Ecu"/>.
            <code>
            public void ReadActiveDtcsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read active DTCs
              ReadDtcResult result = myEcu.ReadDtcs(DtcStatus.Active);
            
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Process result DTCs ...
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ClearDtcs">
            <summary>
            Clears all <see cref="T:Vector.Diagnostics.Dtc"/>s in the ECU.
            </summary>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ClearDtcResult"/> containing the status of the operation.</returns>
            <example>This example shows how to clear all DTCs in the ECU.
            <code>
            public void ClearDtcsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Clear all DTCs in the ECU
              ClearDtcResult result = myEcu.ClearDtcs();
              
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ClearDtcs(System.UInt32)">
             <summary>
             Clears the <paramref name="groupOfDtcs"/>.
             </summary>
             <param name="groupOfDtcs">The group of DTCs to be cleared.</param>
             <returns>Returns a <see cref="T:Vector.Diagnostics.ClearDtcResult"/> containing the status of the operation.</returns>
             <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown, if the underlying protocol of this <see cref="T:Vector.Diagnostics.Ecu"/> does not support clearing of DTC groups.</exception>
             <example>This example shows how to clear a group of DTCs in the ECU.
             <code>
             public void ClearGroupOfDtcScript()
             {
               // Use the Ecu currently selected by the Applica
               Ecu myEcu = Application.GetEcu();
            
               // Clear all emissions related DTCs in the Ecu
               ClearDtcResult result = myEcu.ClearDtcs(BitConverter.ToUInt32(new byte[] { 0xFF, 0xFF, 0x33, 0 }, 0));
            
               if (result.Status != FaultMemoryStatus.Success)
               {
                 // Handle error ...
               }
             }
             </code>
             </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ClearDtc(Vector.Diagnostics.Dtc)">
            <summary>
            Clears the given <see cref="T:Vector.Diagnostics.Dtc"/> in the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> to be cleared.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ClearDtcResult"/> containing the status of the operation.</returns>
            <example> This example shows how to clear a specific DTC.
            <code>
            public void ClearDtcScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read all DTCs
              ReadDtcResult result = myEcu.ReadDtcs();
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              // Get the dtc with SAE code P0010 10
              Dtc dtcP001010 = result.Dtcs.Single(dtc => dtc.SaeCode == "P0010 10");
              
              // Check if the DTC is active
              if (dtcP001010.Status == 0x09)
              {
                // Clear the DTC
                ClearDtcResult clearDtcResult = myEcu.ClearDtc(dtcP001010);
            
                // Handle clear DTC result
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ReadSnapshotDataRecords(Vector.Diagnostics.Dtc)">
            <summary>
            Reads the snapshot data records for the given <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <remarks>0xFF is used as snapshot record number.</remarks>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the snapshot data records.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of snapshot data records for <paramref name="dtc"/>.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown, if the underlying protocol of this <see cref="T:Vector.Diagnostics.Ecu"/> does not support the reading of snapshot data records.</exception>
            <example>This example shows how to read the snapshot data records for all identified DTCs.
            <code>
            public void ReadSnapshotDataRecordsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read all identified DTCs
              ReadDtcResult result = myEcu.ReadDtcs();
            
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Read the snapshot data records for the identified DTC
                ReadEnvironmentDataResult snapshotDataRecordsResult = myEcu.ReadSnapshotDataRecords(dtc);
                if (snapshotDataRecordsResult.Status != FaultMemoryStatus.Success)
                {
                  // Handle error ...
                }
            
                foreach (Parameter snapshotRecord in snapshotDataRecordsResult.EnvironmentData)
                {
                  // Process result data ...
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ReadSnapshotDataRecords(Vector.Diagnostics.Dtc,System.Byte)">
            <summary>
            Reads the snapshot data records with the given <paramref name="recordNumber"/> for <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the snapshot data records.</param>
            <param name="recordNumber">The snapshot data record number.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of snapshot data records for <paramref name="dtc"/>.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown, if the underlying protocol of this <see cref="T:Vector.Diagnostics.Ecu"/> does not support the reading of snapshot data records.</exception>
            <example>This example shows how to read the snapshot data records for all identified DTCs.
            <code>
            public void ReadSnapshotDataRecordsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read all identified DTCs
              ReadDtcResult result = myEcu.ReadDtcs();
            
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Read the snapshot data records for the identified DTC
                ReadEnvironmentDataResult snapshotDataRecordsResult = myEcu.ReadSnapshotDataRecords(dtc, 0x01);
                if (snapshotDataRecordsResult.Status != FaultMemoryStatus.Success)
                {
                  // Handle error ...
                }
            
                foreach (Parameter snapshotRecord in snapshotDataRecordsResult.EnvironmentData)
                {
                  // Process result data ...
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ReadExtendedDataRecords(Vector.Diagnostics.Dtc)">
            <summary>
            Reads the extended data records for the given <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <remarks>0xFF is used as extended data record number</remarks>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the extended data records.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of extended data records for <paramref name="dtc"/>.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown, if the underlying protocol of this <see cref="T:Vector.Diagnostics.Ecu"/> does not support the reading of snapshot data records.</exception>
            <example>This example shows how to read the extended data records for all identified DTCs.
            <code>
            public void ReadExtendedDataRecordsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read all identified DTCs
              ReadDtcResult result = myEcu.ReadDtcs();
            
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Read the extended data records for the identified DTC
                ReadEnvironmentDataResult extendedDataRecordsResult = myEcu.ReadExtendedDataRecords(dtc);
                if (extendedDataRecordsResult.Status != FaultMemoryStatus.Success)
                {
                  // Handle error ...
                }
            
                foreach (Parameter extendedDataRecord in extendedDataRecordsResult.EnvironmentData)
                {
                  // Process result data ...
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.ReadExtendedDataRecords(Vector.Diagnostics.Dtc,System.Byte)">
            <summary>
            Reads the extended data records with the given <paramref name="recordNumber"/> for <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the extended data records.</param>
            <param name="recordNumber">The extended data record number.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of extended data records for <paramref name="dtc"/>.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown, if the underlying protocol of this <see cref="T:Vector.Diagnostics.Ecu"/> does not support the reading of snapshot data records.</exception>
            <example>This example shows how to read the extended data records for all identified DTCs.
            <code>
            public void ReadExtendedDataRecordsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read all identified DTCs
              ReadDtcResult result = myEcu.ReadDtcs();
            
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Read the extended data records for the identified DTC
                ReadEnvironmentDataResult extendedDataRecordsResult = myEcu.ReadExtendedDataRecords(dtc, 0x01);
                if (extendedDataRecordsResult.Status != FaultMemoryStatus.Success)
                {
                  // Handle error ...
                }
            
                foreach (Parameter extendedDataRecord in extendedDataRecordsResult.EnvironmentData)
                {
                  // Process result data ...
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Authenticate">
            <summary>
            Execution of the default authentication mechanism.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Authenticate(System.String)">
            <summary>
            Execute the authentication using the passed key value list as string.
            The format is "Param1=Value1;Param2=Value2".
            </summary>
            <param name="parameters">Parameter list: "Param1=Value1;Param2=Value2"</param>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.Deauthenticate">
            <summary>
            Execution of the deauthentication mechanism.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the deauthentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Ecu.AuthenticateByJob(System.String)">
            <summary>
            Execute the job with the passed name.
            </summary>
            <param name="jobName">The authentication job that shall be executed.</param>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="P:Vector.Diagnostics.Ecu.Qualifier">
            <summary>
            Gets the unique ECU identifier.
            </summary>
            <remarks>Some applications (CANape, CANoe, CANdito) allow changing the qualifier of an
            ECU in the configuration, i.e. the default qualifier defined in the diagnostics
            description may be overwritten by the user.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.Ecu.Variant">
            <summary>
            Gets the qualifier of the current ECU variant.
            </summary>
            <value>The qualifier of the ECU variant.</value>
            <remarks>Caution: the variant qualifier may change if you use automatic variant detection.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.Ecu.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.Ecu.Name">
            <summary>
            Gets the name of the current ECU.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.IEcuFactory.CreateEcuByQualifier(System.String)">
            <summary>
            Creates the native ECU instance and returns the handle that can be used to access the ECU.
            </summary>
            <param name="ecuQualifier">The ecu qualifier.</param>
            <returns>The <see cref="T:Vector.Diagnostics.Ecu"/> instance when successfully executed; otherwise <c>null</c> is returned</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcuFactory.CreateEcuByLogicalLink(System.String)">
            <summary>
            Creates the native ECU instance for the given logical link and returns the handle that can be used to access the ECU.
            </summary>
            <param name="logicalLink">Logical link qualifier</param>
            <returns>The ECU object if it exists, null otherwise.</returns>
        </member>
        <member name="T:Vector.Diagnostics.EcuFactory">
            <summary>
            Internal helper class to create <see cref="T:Vector.Diagnostics.Ecu"/> instances.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.EcuFactory.CreateEcuByQualifier(System.String)">
            <summary>
            Creates the native ECU instance and returns the handle that can be used to access the ECU.
            </summary>
            <param name="ecuQualifier">The ecu qualifier.</param>
            <returns>The <see cref="T:Vector.Diagnostics.Ecu"/> instance when successfully executed; otherwise <c>null</c> is returned</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuFactory.CreateEcuByLogicalLink(System.String)">
            <summary>
            Creates the native ECU instance for the given logical link and returns the handle that can be used to access the ECU.
            </summary>
            <param name="logicalLink">Logical link qualifier</param>
            <returns>The ECU object if it exists, null otherwise.</returns>
        </member>
        <member name="T:Vector.Diagnostics.EcuManager">
            <summary>
            Internal helper class that implements a cache of <see cref="T:Vector.Diagnostics.Ecu"/> instances.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.IsEcuAvailable(System.String)">
            <summary>
            Checks if an <see cref="T:Vector.Diagnostics.Ecu"/> instance is registered in the registry.
            </summary>
            <returns><c>true</c> when an <see cref="T:Vector.Diagnostics.Ecu"/> instance with a matching qualifier exists; otherwise <c>false</c> is returned</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.AddEcu(Vector.Diagnostics.Ecu)">
            <summary>
            Adds the passed Ecu instance to the registry.
            </summary>
            <param name="ecu">A valid <see cref="T:Vector.Diagnostics.Ecu"/> instance.</param>
            <throws><see cref="T:System.ArgumentNullException"/> is thrown when the passed Ecu instance is <c>null</c></throws>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.RemoveEcu(Vector.Diagnostics.Ecu)">
            <summary>
            Removes the passed <see cref="T:Vector.Diagnostics.Ecu"/> instance from the registry.
            </summary>
            <param name="ecu">A valid <see cref="T:Vector.Diagnostics.Ecu"/> instance.</param>
            <returns><c>true</c> when successfully executed; otherwise <c>false</c> is returned</returns>
            <throws><see cref="T:System.ArgumentNullException"/> is thrown when the passed Ecu instance or its qualifier is <c>null</c></throws>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.RemoveEcu(System.String)">
            <summary>
            Removes the <see cref="T:Vector.Diagnostics.Ecu"/> instance with the passed qualifier from the registry.
            </summary>
            <param name="ecuQualifier">The unique identifier of the ECU</param>
            <returns><c>true</c> when successfully executed; otherwise <c>false</c> is returned</returns>
            <throws><see cref="T:System.ArgumentNullException"/> is thrown when the passed ECU qualifier is <c>null</c></throws>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.ClearRegistry">
            <summary>
            Clears the <see cref="T:Vector.Diagnostics.Ecu"/> registry without disposing the available Ecus.
            </summary>
            <remarks>
            After calling this method a call of <see cref="M:Vector.Diagnostics.EcuManager.GetOrCreateEcu(System.String)"/> with a valid qualifier will create a new <see cref="T:Vector.Diagnostics.Ecu"/> instance.
            </remarks>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.DisposeAllEcus">
            <summary>
            Disposes all <see cref="T:Vector.Diagnostics.Ecu"/> instances currently known to the registry and removes the references to the instances from the registry.
            </summary>
            <remarks>
            After calling this method a call of <see cref="M:Vector.Diagnostics.EcuManager.GetOrCreateEcu(System.String)"/> with a valid qualifier will create a new <see cref="T:Vector.Diagnostics.Ecu"/> instance.
            </remarks>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.GetOrCreateEcu(System.String)">
            <summary>
            Gets an existing <see cref="T:Vector.Diagnostics.Ecu"/> instance for the passed ECU qualifeir or creates a new instance when the qualifier is not used until now.
            </summary>
            <param name="ecuQualifier">The ecu qualifier.</param>
            <returns>A <see cref="T:Vector.Diagnostics.Ecu"/> or <c>null</c> when the passed qualifeir is not known to the runtime (CANoe, CANape, ...).</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.GetOrCreateEcuByLogicalLink(System.String)">
            <summary>
            Gets an existing <see cref="T:Vector.Diagnostics.Ecu"/> instance for the passed logical link or creates a new instance when the associated qualifier is not used until now.
            </summary>
            <param name="logicalLink">Logical link qualifier</param>
            <returns>A <see cref="T:Vector.Diagnostics.Ecu"/> or <c>null</c> when the passed qualifeir is not known to the runtime (CANoe, CANape, ...).</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.IsFunctionalEcu(Vector.Diagnostics.Ecu)">
            <summary>
            Checks if the passed VDS <see cref="T:Vector.Diagnostics.Ecu"/> is assigned to a functional diagnostic channel.
            </summary>
            <param name="ecu">A VDS <see cref="T:Vector.Diagnostics.Ecu"/></param>
            <returns><c>true</c> if the current instance is a functional ECU; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuManager.LoadAllEcusToRegistry">
            <summary>
            Loads all ECUs not available in the VDS <see cref="T:Vector.Diagnostics.Ecu"/> registry.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.EcuImpl">
            <summary>
            Internal implementation of the VDS <see cref="T:Vector.Diagnostics.Ecu"/> class.
            </summary>
            <remarks>
            An VDS Ecu represents a CANoe Node/ CANape Device that uses physical or functional communication.
            </remarks>
        </member>
        <member name="F:Vector.Diagnostics.EcuImpl.mEcuHandle">
            <summary>
            The native ECU handle.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.EcuImpl.mEcuQualifier">
            <summary>
            The unique ECU identification string (qualifier).
            CANape/CANdito: "Module"/"device"
            CANoe: "target" name
            Indigo: ECU Qualifier
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.EcuImpl.mIsFunctional">
            <summary>
            Helper variable to track if the assigned diagnostic channel is a functional or physical channel.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.EcuImpl.mRequests">
            <summary>
            List of all request created by this ECU.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.EcuImpl.mDisposed">
            <summary>
            Flag to track the disposed state.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.EcuImpl.mDisposedEventHandler">
            <summary>
            Helper that holds a weak reference to this instance and is registered as listener for native events.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Ecu"/> class.
            </summary>
            <param name="ecuQualifier">The unique ECU identification string. (A null value references the 'current_device'.)</param>
            <param name="ecuHandle">The handle for the ECU.</param>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.EcuImpl"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Dispose">
            <summary>
            Free resources allocated for this message.
            Call this method when the message is no longer used.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.GetHandle">
            <summary>
            Gets the native handle of the current <see cref="T:Vector.Diagnostics.Ecu" /> instance.
            </summary>
            <returns>The native ECU handle.</returns>
            <remarks>This method is not part of the official VDS implementation and might be changed or removed in the future.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.CreateRequest(System.String)">
             <summary>
             Create a request using the service qualifier.
             </summary>
             <param name="serviceQualifier">The qualifier of the service.</param>
             <returns>The request object with the given qualifier. Returns null if no service with given qualifier is available.</returns>
             <example>This example shows how to create a new request based on the service qualifier.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request using the service qualifier
               using(Request request = myEcu.CreateRequest("Software_Version_Read"))
               {
                 // ...
               }
               // The resources that are held for messages (requests and responses) have to be
               // cleared after the according objects will not be accessed any more.
               // This has to be done by calling the Dispose() method of such objects or by the C# 'using' statement.
             }
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.CreateRequestsBySemantic(System.String)">
             <summary>
             Creates requests using the supplied semantic.
             </summary>
             <param name="semantic">The semantic of the service.</param>
             <returns>A collection of requests with the supplied semantic. The collection is always initialized, but can be empty.</returns>
             <example>This example shows how to create a request based on a given semantic.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request using a semantic
               using(RequestCollection requests = myEcu.CreateRequestsBySemantic("FAULTREAD"))
               {
                 if(requests.Count > 0)
                 {
                   // ...
                 }
               }
             }
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.CreateRequest(System.Byte[])">
             <summary>
             Create a request using raw bytes as PDU.
             </summary>
             <param name="bytes">Byte array containing the PDU.</param>
             <returns>The request object.</returns>
             <example>This example shows how to create a new request based on a PDU.
             <code>
             // Use the ECU currently selected by the Application
             Ecu myEcu = Application.GetEcu();
            
             // Create a request using raw bytes as PDU
             using(Request request = myEcu.CreateRequest(new byte[] { 0x10, 0x03 }))
             {
               // ...
             }
             // The resources that are held for messages (requests and responses) have to be
             // cleared after the according objects will not be accessed any more.
             // This has to be done by calling the Dispose() method of such objects or by the C# 'using' statement.
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ActivateTesterPresent(System.Boolean)">
             <summary>
             Activates (or deactivates) the periodic sending of the tester present request message by the application.
             </summary>
             <param name="activateTP">true: activate tester present; false: deactivate tester present</param>
             <returns>False if action failed.</returns>
             <example>
             The following example shows how to get an ECU, change the session to extended
             session and activate sending TesterPresent messages to stay in the extended
             session.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request specifying the service qualifier
               Request request = myEcu.CreateRequest("Extended_Session_Start");
            
               // Send the request to the ECU and wait for a response
               SendResult result = request.Send();
            
               // Check if the request transmission was successful
               if (result.Status == SendStatus.Ok)
               {
                 // Get the response from the send result
                 // Caution: the response might be null
                 Response response = result.Response;
            
                 // Check if the ECU sent a positive response
                 if (response.IsPositive)
                 {
                   // Activate sending TesterPresent messages
                   myEcu.ActivateTesterPresent(true);
                 }
               }
            
               // The resources that are held for messages (requests and responses) have to be cleared
               // when the according objects will not be accessed any more. This has to be done by calling 
               // the Dispose() method of such objects or by the C# 'using' statement.
               request.Dispose();
               result.Dispose();
             }
             </code>
             </example>
             <returns>False if action failed.</returns>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.IsTesterPresentActive">
            <summary>
            Get the current tester present sending state.
            </summary>
            <returns>true: application sends tester present periodically; false: tester present off or the state couldn't be retrieved</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.IdentifyAndSelectVariant">
            <summary>
            Identify and select ECU variant and give the variant qualifier back.
            </summary>
            <value>The qualifier of the ECU variant.</value>
            <remarks>Start the variant identification and selection.</remarks>
            <returns>If the selection of the variant was successfully the variant qualifier is returned.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.IdentifyVariant">
            <summary>
            IdentifyVariant returns the qualifier of the identified ECU variant.
            </summary>
            <returns>The qualifier of the identified variant if successful, otherwise an empty string.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.SelectVariant(System.String)">
            <summary>
            Selects the ECU variant by its qualifier.
            In case an empty string is passed to SelectVariant it shall return VariantSelectionResult.VariantDoesNotExist.
            </summary>
            <param name="qualifier">The qualifier of the variant that is selected.</param>
            <returns>The appropriate <see cref="T:Vector.Diagnostics.VariantSelectionResult"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Unlock(System.Byte)">
            <summary>
            Unlocks the ECU in the specified level.
            </summary>
            <param name="securityLevel">The security level.</param>
            <returns><see cref="F:Vector.Diagnostics.SecurityAccessResult.Success"/> if ECU was unlocked successfully otherwise check value of <see cref="T:Vector.Diagnostics.SecurityAccessResult"/>.</returns>
            <example>
            <code>
            public void UnlockEcuInLevel1()
            {
                // Get the first ECU
                Ecu ecu = Application.GetEcu();
               
                // Unlock ECU in Level 1:
                // - Request seed with $27 01
                // - Calculate key using seed key dll and response of $27 01
                // - Send key using $27 02 and calculated key
                // - if ECU responds with positive response 
                SecurityAccessResult securityAccessResult = ecu.Unlock(1);
                
                // Check result of unlocking the ECU
                if (securityAccessResult == SecurityAccessResult.Success)
                {
                  Output.WriteLine("Unlocking ECU was successful.");
                }
               
                // Enter stuff to be executed on an unlocked ECU.
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Unlock(System.Byte,System.String)">
            <summary>
            Unlocks the ECU in the specified level using an additional option string.
            </summary>
            <param name="securityLevel">The security level.</param>
            <param name="option">The option string to be passed to the seed and key DLL.</param>
            <returns>
              <see cref="F:Vector.Diagnostics.SecurityAccessResult.Success"/> if ECU was unlocked successfully.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Close">
            <summary>
            Invalidate ECU and its hierarchy; free resources.
            </summary>
            <remarks> 
            Called by Dispose. <see cref="T:Vector.Diagnostics.Request"/> and <see cref="T:Vector.Diagnostics.Request"/>  
            instances assigned to this ECU are not valid anymore.
            </remarks>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ToString">
            <summary>
            Get the ECU identification name.
            </summary>
            <returns>Identifier of the ECU</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.GetServiceQualifiers">
            <summary>
            Gets the service qualifiers.
            </summary>
            <returns>A list of available service qualifiers.</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ThrowObjectDisposedExceptionWhenAlreadyDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> when the current instance is already disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ReadDtcs">
            <summary>
            Reads all <see cref="T:Vector.Diagnostics.Dtc"/>s for the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadDtcResult"/> containing the status of the operation and a list of <see cref="T:Vector.Diagnostics.Dtc"/>s.</returns>
            <example>This example shows how to read the <see cref="T:Vector.Diagnostics.Dtc"/>s and print a small report.
            <code>
            public void PrintDtcReportScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              ReadDtcResult result = myEcu.ReadDtcs();
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Print out DTC information. e.g. &quot;P0010 11 Camshaft Position Actuator Circuit short to ground: 0x09&quot;
                Output.WriteLine(dtc.SaeCode + " - " + dtc.Name + ": 0x" + dtc.Status.ToString("x2"));
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ReadDtcs(System.Byte)">
            <summary>
            Reads all <see cref="T:Vector.Diagnostics.Dtc"/>s which have the given DTC status (byte).
            </summary>
            <param name="dtcStatus">The status of the <see cref="T:Vector.Diagnostics.Dtc"/> in the <see cref="T:Vector.Diagnostics.Ecu"/>.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadDtcResult"/> containing the status of the operation and a list of <see cref="T:Vector.Diagnostics.Dtc"/>s with the status of <paramref name="dtcStatus"/>.</returns>
            <example>This example shows how to read all active <see cref="T:Vector.Diagnostics.Dtc"/>s in the <see cref="T:Vector.Diagnostics.Ecu"/>.
            <code>
            public void ReadActiveDtcsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read active DTCs
              ReadDtcResult result = myEcu.ReadDtcs(0x02);
            
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Process result DTCs ...
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ClearDtcs">
            <summary>
            Clears all <see cref="T:Vector.Diagnostics.Dtc"/>s in the ECU.
            </summary>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ClearDtcResult"/> containing the status of the operation.</returns>
            <example>This example shows how to clear all DTCs in the ECU.
            <code>
            public void ClearDtcsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Clear all DTCs in the ECU
              ClearDtcResult result = myEcu.ClearDtcs();
              
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ClearDtc(Vector.Diagnostics.Dtc)">
            <summary>
            Clears the given <see cref="T:Vector.Diagnostics.Dtc"/> in the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> to be cleared.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ClearDtcResult"/> containing the status of the operation.</returns>
            <example> This example shows how to clear a specific DTC.
            <code>
            public void ClearDtcScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read all DTCs
              ReadDtcResult result = myEcu.ReadDtcs();
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              // Get the dtc with SAE code P0010 10
              Dtc dtcP001010 = result.Dtcs.SingleOrDefault(dtc => dtc.SaeCode == "P0010 10");
              
              // Check if the DTC is active
              if (dtcP001010.Status == 0x09)
              {
                // Clear the DTC
                ClearDtcResult clearDtcResult = myEcu.ClearDtc(dtcP001010);
            
                // Handle clear DTC result
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ReadSnapshotDataRecords(Vector.Diagnostics.Dtc)">
            <summary>
            Reads the snapshot data reocrds for the given <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the snapshot data records.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of snapshot data records for <paramref name="dtc"/>.</returns>
            <example>This example shows how to read the snapshot data records for all active DTCs.
            <code>
            public void ReadSnapshotDataRecordsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read all active DTCs
              ReadDtcResult result = myEcu.ReadDtcs(DtcStatus.Active);
            
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Read the snapshot data records for the active DTC
                ReadEnvironmentDataResult snapshotDataRecordsResult = myEcu.ReadSnapshotDataRecords(dtc);
                if (snapshotDataRecordsResult.Status != FaultMemoryStatus.Success)
                {
                  // Handle error ...
                }
            
                foreach (Parameter snapshotRecord in snapshotDataRecordsResult.EnvironmentData)
                {
                  // Process result data ...
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.ReadExtendedDataRecords(Vector.Diagnostics.Dtc)">
            <summary>
            Reads the extended data records for the given <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the extended data records.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of extended data records for <paramref name="dtc"/>.</returns>
            <example>This example shows how to read the extended data records for all active DTCs.
            <code>
            public void ReadExtendedDataRecordsScript()
            {
              // Use the ECU currently selected by the Application
              Ecu myEcu = Application.GetEcu();
            
              // Read all active DTCs
              ReadDtcResult result = myEcu.ReadDtcs(DtcStatus.Active);
            
              if (result.Status != FaultMemoryStatus.Success)
              {
                // Handle error ...
              }
            
              foreach (Dtc dtc in result.Dtcs)
              {
                // Read the extended data records for the active DTC
                ReadEnvironmentDataResult extendedDataRecordsResult = myEcu.ReadExtendedDataRecords(dtc);
                if (extendedDataRecordsResult.Status != FaultMemoryStatus.Success)
                {
                  // Handle error ...
                }
            
                foreach (Parameter extendedDataRecord in extendedDataRecordsResult.EnvironmentData)
                {
                  // Process result data ...
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Authenticate">
            <summary>
            Execute(s) the default authentication mechanism.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Authenticate(System.String)">
            <summary>
            Execute(s) the authentication using the passed key value list as string.
            The format is "Param1=Value1;Param2=Value2".
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.Deauthenticate">
            <summary>
            Execute(s) the authentication using the passed key value list as string.
            The format is "Param1=Value1;Param2=Value2".
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.AuthenticateByJob(System.String)">
            <summary>
            Execute the job with the passed name.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="P:Vector.Diagnostics.EcuImpl.Qualifier">
            <summary>
            Gets the unique ECU identifier.
            </summary>
            <remarks>Some applications (CANape, CANoe, CANdito) allow changing the qualifier of an
            ECU in the configuration, i.e. the default qualifier defined in the diagnostics
            description may be overwritten by the user.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.EcuImpl.Name">
            <summary>
            Gets the Name of the ECU.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.EcuImpl.Variant">
            <summary>
            Gets the qualifier of the current ECU variant.
            </summary>
            <value>The qualifier of the ECU variant.</value>
            <remarks>Caution: the variant qualifier may change if you use automatic variant detection.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.EcuImpl.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.EcuImpl.IsFunctional">
            <summary>
            Gets a value indicating whether the current instance uses functional communication.
            </summary>
            <value>
              <c>true</c> if the current instance is a functional ECU; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.EcuImpl.Requests">
            <summary>
            Gets the active (created) requests.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.EcuImpl.RemoveRequest(Vector.Diagnostics.Request)">
            <summary>
            Removes <see cref="T:Vector.Diagnostics.Request"/> instances created with CreateRequest.
            </summary>
            <param name="request">The <see cref="T:Vector.Diagnostics.Request"/> that shall be removed.</param>
        </member>
        <member name="T:Vector.Diagnostics.FaultMemoryStatus">
            <summary>
            Status of reading or clearing <see cref="T:Vector.Diagnostics.Dtc"/>s.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.FaultMemoryStatus.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.FaultMemoryStatus.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.FaultMemoryStatus.CommunicationError">
            <summary>
            Communication error.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.FaultMemoryStatus.NegativeResponse">
            <summary>
            Negative response.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.FaultMemoryStatus.FailedResponseParse">
            <summary>
            Failed response parse.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.GenerateSecurityKeyResult">
            <summary>
            Result of the <see cref="M:Vector.Diagnostics.Application.GenerateSecurityKey(Vector.Diagnostics.Ecu,System.Byte[],System.Byte,System.String,System.Byte[]@)"/> method that contains information whether the key could be generated using a seed and key dll.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.GenerateSecurityKeyResult.NoResult">
            <summary>
            No result available (initial state).
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.GenerateSecurityKeyResult.Success">
            <summary>
            Generating the key was successful.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.GenerateSecurityKeyResult.InvalidSeedKeyDll">
            <summary>
            The seed and key dll is not configured or not available in the application for the specified ECU.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.GenerateSecurityKeyResult.InvalidVariant">
            <summary>
            The current ECU variant passed to the seed and key dll is invalid.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.GenerateSecurityKeyResult.InvalidSecurityLevel">
            <summary>
            The specified security level is invalid.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.GenerateSecurityKeyResult.Failure">
            <summary>
            An unknown error occurred trying to generate the key from the seed with the specified parameters.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.ParameterFactory">
            <summary>
            An internal helper class that provides reusable static methods.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterFactory.GetParameters(Vector.Diagnostics.IMessage,Vector.Diagnostics.IParameterParent)">
            <summary>
            Get the list of all root parameters of the given message.
            </summary>
            <param name="message">The message (request or response).</param>
            <param name="parameterCollection">The container that will own the created parameters.</param>
            <returns>A list of parameters.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ParameterFactory.GetParameters(Vector.Diagnostics.IParameter,Vector.Diagnostics.IParameterCollection)">
            <summary>
            Get the list of all sub parameters of the given parameter.
            </summary>
            <param name="parameter">The complex parameter.</param>
            <param name="parameterCollection">The container that will own the created parameters.</param>
            <returns>A list of sub parameters. The list is empty if there are no sub parameters.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ParameterFactory.GetParameters(Vector.Diagnostics.IParameter,System.Int32,Vector.Diagnostics.IParameterCollection)">
            <summary>
            Get the list of all sub parameters of the given parameter.
            </summary>
            <param name="parameter">The complex parameter.</param>
            <param name="parameterCollection">The container that will own the created parameters.</param>
            <param name="index">The element that should be put into the parameter collection.</param>
            <returns>A list of sub parameters. The list is empty if there is no sub parameter found.</returns>    
        </member>
        <member name="M:Vector.Diagnostics.ParameterFactory.CreateList``1(``0[])">
            <summary>
            Creates a readonly collection that contains the elements of the passed array.
            </summary>
            <typeparam name="T">The data element type.</typeparam>
            <param name="iArray">The data.</param>
            <returns>The array as ReadOnlyCollection or an empty ReadOnlyCollection.</returns>
        </member>
        <member name="T:Vector.Diagnostics.NativeWaitResult">
            <summary>
            Result codes returned by the environment wait implementation.
            </summary>
            <remarks>
            This enum has to be synchronized with the environment!
            </remarks>
        </member>
        <member name="F:Vector.Diagnostics.NativeWaitResult.WaitFinished">
            <summary>
            The wait operation finished successfully.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.NativeWaitResult.WaitNotImplemented">
            <summary>
            The wait operation is not implemented by the environment.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.NativeWaitResult.WaitFailed">
            <summary>
            The wait operation failed (internal error of the environment).
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.NativeWaitResult.WaitInterrupted">
            <summary>
            The wait operation was interrupted (e. g. the runtime was stopped or shutdown is performed).
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.IDfwApiWrapper">
            <summary>
            Defines the default interface for the Application implementation of Vector.Diagnostics.Implementation.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.CreateEcu(System.String,System.UInt32@)">
            <summary>
            Creates an ECU instance with the passed qualifier (ecuId).
            </summary>
            <param name="ecuId">The unique ECU identification string. (CANape: null for 'current_device')</param>
            <param name="outEcuHandle">Retruns the handle to the ECU instance with the requested qualifier (see parameter <c>ecuId</c>).</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetEcuIdAttribute(System.UInt32,System.String@)">
            <summary>
            Gets the ECU identifier attribute (ECU qualifier).
            </summary>
            <param name="ecuHandle">The ECU handle.</param>
            <param name="outEcuQualifier">When the method returns <c>true</c> the passed variable contains the ECU qualifier.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetEcuNameAttribute(System.UInt32,System.String@)">
            <summary>
            Gets the ECU name attribute (ECU name specified in the diagnostic description).
            </summary>
            <param name="ecuHandle">The ECU handle.</param>
            <param name="outEcuName">When the method returns <c>true</c> the passed variable contains the ECU qualifier.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetEcuVariantIdAttribute(System.UInt32,System.String@)">
            <summary>
            Gets the ecu variant identifier attribute.
            </summary>
            <param name="ecuHandle">The ECU handle.</param>
            <param name="outEcuVariantId">When the method returns <c>true</c> the passed variable contains the variant identifier.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetEcuAttributeTesterPresentActive(System.UInt32,System.Boolean@)">
            <summary>
            Gets the ecu attribute TP (tester present) active.
            </summary>
            <param name="ecuHandle">The ECU handle.</param>
            <param name="outTesterPresentActive">
              When the method returns <c>true</c> the passed variable contains the tester present state: 
              <c>true</c> for active and <c>false</c> for inactive.
            </param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SetEcuAttributeTesterPresentActive(System.UInt32,System.Boolean)">
            <summary>
            Activates or deactivates tester present.
            </summary>
            <param name="ecuHandle">The ECU handle.</param>
            <param name="iTesterPresentActive">if set to <c>true</c> tester present is activated.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetEcuIdByLogicalLink(System.String,System.String@)">
            <summary>
            Gets the ECU identifier by a logical link (qualifier).
            </summary>
            <param name="logicalLink">The logical link qualifier.</param>
            <param name="outEcuId">
              When this method returns, contains the value associated with the specified logical link, if the logical link qualifier is found; 
              otherwise, <see cref="F:System.String.Empty"/>.
            </param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetEcuIds(System.String[]@)">
            <summary>
            Gets the available ECU qualifiers.
            </summary>
            <param name="outEcuIds">When the method returns <c>true</c> the string array contains the available ECU qualifiers.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.IsFunctional(System.UInt32,System.Boolean@)">
            <summary>
            Checks if an ECU handle belongs to an functional channel/device.
            </summary>
            <param name="iEcuHandle">The ECU handle.</param>
            <param name="oIsFunctional">When the method is successfully executed the variable contains <c>true</c> when 
            the passed ECU identifier belongs to an functional channel/device.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.IdentifyAndSelectVariant(System.UInt32,System.String@)">
            <summary>
            Identify and select the variant of the ECU by the client application and give the selected variant qualifier back.
            </summary>
            <param name="ecuHandle">The handle of the ECU.</param>
            <param name="outVariant">
              When this method returns, contains the variant qualifier, if the method was successfully executed; 
              otherwise, the variable will contain <see cref="F:System.String.Empty"/>.
            </param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.IdentifyVariant(System.UInt32,System.String@)">
            <summary>
            The client (CANape/CANoe) identifies the variant of the ECU and provides the variant qualifier to the caller.
            </summary>
            <param name="ecuHandle">The handle of the ECU.</param>
            <param name="outVariant">A reference to a variable for the variant.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SelectVariant(System.UInt32,System.String,Vector.Diagnostics.VariantSelectionResult@)">
            <summary>
            Attempts to select the variant of the ECU by the client application and gives the result back.
            </summary>
            <param name="ecuHandle">The handle of the ECU.</param>
            <param name="variantQualifier">The variant qualifier.</param>
            <param name="outResult">The result as <see cref="T:Vector.Diagnostics.VariantSelectionResult"/>.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.DestroyEcu(System.UInt32)">
            <summary>
            Force the remove all cached data for a certain ECU.
            (E.g. because the according configuration is removed or modified within the client application).
            </summary>
            <param name="ecuHandle">The handle of the ECU.</param>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.Unlock(System.String,System.Byte,System.String)">
            <summary>
            Unlocks the ECU in the specified level using an additional option string.
            </summary>
            <param name="ecuId">The unique ECU identification string.</param>
            <param name="securityLevel">The intended security level.</param>
            <param name="option">The option string. Set Empty if no option string is provided.</param>
            <returns><see cref="F:Vector.Diagnostics.SecurityAccessResult.Success"/> if the key was generated without an error.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GenerateSecurityKey(System.String,System.Byte[],System.Byte,System.String,System.Byte[]@)">
            <summary>
            Generates the security key.
            </summary>
            <param name="ecuId">The unique ECU identification string.</param>
            <param name="seed">The seed from the ECU.</param>
            <param name="securityLevel">The security level.</param>
            <param name="option">The option string. Set Empty if no option string is provided.</param>
            <param name="key">The generated key as output parameter.</param>
            <returns><see cref="F:Vector.Diagnostics.GenerateSecurityKeyResult.Success"/> if the key was generated without an error.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.CreateRequest(System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Creates a raw request based on the passed PDU (bytes).
            When a request could be created a handle to the created request object
            is returned via the passed reference parameter 'hOutRequest'.
            </summary>
            <param name="ecuHandle">The handle of the ECU.</param>
            <param name="bytes">The PDU of the request.</param>
            <param name="hOutRequest">
            A reference to a variable. When a request could be created the assigned handle is passed to this parameter.
            </param>
            <returns><c>true</c> when the request was created; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.CreateRequest(System.UInt32,System.String,System.UInt32@)">
            <summary>
            Creates a symbolic request.
            When a request could be created a handle to the created request object
            is returned via the passed reference parameter 'hOutRequest'.
            </summary>
            <param name="ecuHandle">The handle of the ECU.</param>
            <param name="requestId">The qualifier of the request.</param>
            <param name="hOutRequest">
            A reference to a variable. When a request could be created the assigned handle is passed to this parameter.
            </param>
            <returns><c>true</c> when the request was created; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.CreateRequestsBySemantic(System.UInt32,System.String,System.UInt32[]@)">
            <summary>
            Creates request for the requested semantic.
            When a request could be created a handle to the created request object
            is returned via the passed reference parameter 'hOutRequest'.
            </summary>
            <param name="ecuHandle">The handle of the ECU.</param>
            <param name="semantic">The semantic of the request.</param>
            <param name="hOutRequests">
            A reference to a variable. When a request could be created the assigned handles are passed to this parameter.
            </param>
            <returns><c>true</c> when the request was created; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.DestroyMessage(System.UInt32)">
            <summary>
            Destroys the message (request or response) that has the passed handle.
            </summary>
            <param name="hMessage">The handele of the to be destroyed message.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetRequestIds(System.UInt32,System.String[]@)">
            <summary>
            Get all request identifiers for the given ECU.
            </summary>
            <param name="ecuHandle">The ECU handle.</param>
            <param name="outServiceQualifiers">When the method returns <c>true</c> the passed variable contains the service qualifiers.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.FindParameterByPath(System.UInt32,System.String,System.UInt32@)">
            <summary>
            Find Parameter from request by given qualifier
            </summary>
            <param name="requestHandle">The request to search for the Parameter</param>
            <param name="qualifier">Qulifier of the Parameter</param>
            <param name="oParameterHandle">Handle of the found Parameter</param>
            <returns><c>true</c> when paramter was found</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.FindSubParameterByPath(System.UInt32,System.String,System.UInt32@)">
            <summary>
            Find Parameter from another Parameter by given qualifier
            </summary>
            <param name="parameterHandle">The Parameter with possible subparameters</param>
            <param name="qualifier">Qulifier of the Parameter</param>
            <param name="oParameterHandle">Handle of the found Parameter</param>
            <returns><c>true</c> when paramter was found</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetMessageIdAttribute(System.UInt32,System.String@)">
            <summary>
            Get the message ID attribute.
            </summary>
            <param name="hMessage">The handle of the message.</param>
            <param name="outMessageId">The output message ID.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetMessageAttributeIsPositiveResponse(System.UInt32,System.Boolean@)">
            <summary>
            Get the message attribute IsPositiveRespose.
            </summary>
            <param name="iResponseHandle">The handle of the message.</param>
            <param name="outPosResp">The output to that <c>true</c> or <c>false</c> is written when the method was successfully executed.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetMessageAttributeFailedResponseParse(System.UInt32,System.Boolean@)">
            <summary>
            Get the message attribute that tells whether the response could be parsed correctly.
            </summary>
            <param name="iResponseHandle">The handle of the message.</param>
            <param name="outFailedResponseParse">The output to that <c>true</c> or <c>false</c> is written when the method was successfully executed.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetMessageAttributeSourceEcuQualifier(System.UInt32,System.String@)">
            <summary>
            Get the source ECU qualifier of a response.
            </summary>
            <param name="iResponseHandle">The handle of the message.</param>
            <param name="outSourceEcuQualifier">The output to that ECU qualifier is written when the method was successfully executed.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetPdu(System.UInt32,System.Byte[]@)">
            <summary>
            Gets the PDU of a message.
            </summary>
            <param name="hMessage">The handele of the to be destroyed message.</param>
            <param name="outBytes">
              When this method returns, contains the raw byte stream (PDU) of the message, if the method was successfully executed; 
              otherwise, the variable will contain <c>null</c>. Before using the byte array the returned result has to be evaluated.
            </param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.InitializeWriteRequest(System.UInt32)">
            <summary>
            Initializes a write request with it's corresponding read request. (Read before write)
            </summary>
            <param name="iWriteRequestHandle">The handle of the write request</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameter(System.UInt32,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Gets the access handle of a parameter. A native parameter instance is generated by the framework.
            When the method fails (returns <c>false</c>) the by reference passed output arguments are initialized to
            INVALID_HANDLE and <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="hMessage">A valid handle of a message.</param>
            <param name="parameterIndex">Index of the (root) parameter in the message.</param>
            <param name="hOutParameter">When the method returns <c>true</c> the passed variable contains the handle of the parameter.</param>
            <param name="outParameterId">When the method returns <c>true</c> the passed variable contains the qualifier of the parameter.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.DestroyParameter(System.UInt32)">
            <summary>
            Destroys the parameter addressed by the passed handle.
            </summary>
            <param name="iParameterHandle">The handele of the to be destroyed parameter.</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterCount(System.UInt32,System.UInt32@)">
            <summary>
            Gets the (root/top level) parameter count of a message.
            </summary>
            <param name="iMessageHandle">The message handle.</param>
            <param name="outParamCount">The parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetChildParameterCount(System.UInt32,System.UInt32@)">
            <summary>
            Gets the child parameter count.
            </summary>
            <param name="iParameterHandle">The parameter handle.</param>
            <param name="outChildParamCount">The child parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterValue(System.UInt32,System.String@)">
            <summary>
            Gets a parameter (string) value.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="outStrValue">The output to that the parameters value is written on success.</param>
            <returns>
              <c>true</c> is returned when the operation was successfully executed (when <c>ParameterErrorCode.ParameterSuccess</c> 
              is returned); otherwise, <c>false</c> is returned.
            </returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException">
              A <code>DiagnosticException</code> is thrown when the error code indicates that no conversion to string is possible.
            </exception>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterValue(System.UInt32,System.Double@)">
            <summary>
            Gets a parameter (double) value.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="outValue">The output variable to that the parameters value is written on success.</param>
            <returns>
              <c>true</c> is returned when the operation was successfully executed (when <c>ParameterErrorCode.ParameterSuccess</c> 
              is returned); otherwise, <c>false</c> is returned.
            </returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException">
              A <code>DiagnosticException</code> is thrown when the error code indicates that no conversion to string is possible.
            </exception>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterValue(System.UInt32,System.Int32@)">
            <summary>
            Gets a parameter (int) value.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="outValue">The output variable to that the parameters value is written on success.</param>
            <returns>
              <c>true</c> is returned when the operation was successfully executed (when <c>ParameterErrorCode.ParameterSuccess</c> 
              is returned); otherwise, <c>false</c> is returned.
            </returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException">
              A <code>DiagnosticException</code> is thrown when the error code indicates that no conversion to string is possible.
            </exception>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterValue(System.UInt32,System.UInt32@)">
            <summary>
            Gets a parameter (int) value.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="outValue">The output variable to that the parameters value is written on success.</param>
            <returns>
              <c>true</c> is returned when the operation was successfully executed (when <c>ParameterErrorCode.ParameterSuccess</c> 
              is returned); otherwise, <c>false</c> is returned.
            </returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException">
              A <code>DiagnosticException</code> is thrown when the error code indicates that no conversion to string is possible.
            </exception>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterValue(System.UInt32,System.Byte[]@)">
            <summary>
            Gets a parameter (byte[]) value.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="ouValue">The output to that the parameters value is written on success.</param>
            <returns>
              <c>true</c> is returned when the operation was successfully executed (when <c>ParameterErrorCode.ParameterSuccess</c> 
              is returned); otherwise, <c>false</c> is returned.
            </returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException">
              A <code>DiagnosticException</code> is thrown when the error code indicates that no conversion to string is possible.
            </exception>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterComplex(System.UInt32,System.UInt32,System.UInt32@,System.String@)">
            <summary>
            Gets complex parameter informations.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="parameterIndex">The index.</param>
            <param name="outHParameter">The output parameter handle.</param>
            <param name="outParameterId">The output parameter id.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterNameAttribute(System.UInt32,System.String@)">
            <summary>
            Gets the parameter name attribute.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="outParameterName">The output parameter name.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterDescriptionAttribute(System.UInt32,System.String@)">
            <summary>
            Gets the parameter description attribute.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="outParameterDescr">The output parameter name.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterUnitAttribute(System.UInt32,System.String@)">
            <summary>
            Gets the parameter with the parameter unit.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="outParameterUnit">The output parameter unit.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetParameterSemanticAttribute(System.UInt32,System.String@)">
            <summary>
            Gets the parameter semantic attribute.
            </summary>
            <param name="hParam">The parameter handle.</param>
            <param name="outParameterSemantic">The output parameter semantic.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.IsParameterReadOnly(System.UInt32,System.Boolean@)">
            <summary>
            Determines whether parameter with the specified parameter handle is read only.
            </summary>
            <param name="iParamHandle">The parameter handle.</param>
            <param name="oIsReadonly">if set to <c>true</c> the parameter is readonly.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.IsParameterPartOfSignature(System.UInt32,System.Boolean@)">
            <summary>
            Determines whether parameter with the specified parameter handle is part of the message signature.
            </summary>
            <param name="iParamHandle">The parameter handle.</param>
            <param name="oIsPartOfSignature">if set to <c>true</c> the parameter is part of the message signature.</param>
            <returns><c>true</c> if the operation was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.GetPrimitiveIdAttribute(System.UInt32,System.String@)">
            <summary>
            Get the primitive ID attribute.
            </summary>
            <param name="hMessage">The handle of the message.</param>
            <param name="outPrimitiveId">The output primitive ID.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SetParameterIteration(System.UInt32,System.UInt32)">
            <summary>
            Sets the parameter iterations.
            </summary>
            <param name="hParameter">The parameter handle.</param>
            <param name="iterations">The iterations count.</param>
            <returns> 
              <c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> is returned.
            </returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SetParameterValue(System.UInt32,System.String)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="hParameter">The parameter handle.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> or <c>null</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SetParameterValue(System.UInt32,System.Double)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="hParameter">The parameter handle.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> or <c>null</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SetParameterValue(System.UInt32,System.Int32)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="hParameter">The parameter handle.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> or <c>null</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SetParameterValue(System.UInt32,System.UInt32)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="hParameter">The parameter handle.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> or <c>null</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SetParameterValue(System.UInt32,System.Byte[])">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="hParameter">The parameter handle.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> is returned when the operation was successfully executed; otherwise, <c>false</c> or <c>null</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SendRequestAsynchronous(Vector.Diagnostics.IEcu,System.UInt32,System.Boolean)">
            <summary>
            Sends an asynchronous request.
            </summary>
            <param name="destinationEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> instance for that the request was created.</param>
            <param name="requestHandle">The request's handle.</param>
            <param name="suppressPositiveResponse">Whether the SPRM bit is set.</param>
            <returns>The SendResult that represents the transaction.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.TryCompleteTransaction(System.UInt32,System.UInt32@,System.UInt32[]@,Vector.Diagnostics.SendStatus@,System.Nullable{System.Boolean}@)">
            <summary>
            Queries the status of an asynchronous transaction that was started by <see cref="M:Vector.Diagnostics.IDfwApiWrapper.SendRequestAsynchronous(Vector.Diagnostics.IEcu,System.UInt32,System.Boolean)"/>.
            On successful completion this sets the responses and status of the supplied <see cref="T:Vector.Diagnostics.SendResult"/> object. 
            </summary>
            <param name="iTransactionHandle"></param>
            <param name="oResponse"></param>
            <param name="oResponses"></param>
            <param name="oSendStatus"></param>
            <param name="oIsPositive"></param>
            <returns></returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.SendRequestSynchronous(Vector.Diagnostics.IEcu,System.UInt32,System.Boolean)">
            <summary>
            Sends a synchronous request.
            </summary>
            <param name="destinationEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> instance for that the request was created.</param>
            <param name="requestHandle">The request's handle.</param>
            <param name="suppressPositiveResponse">Whether the SPRM bit is set.</param>
            <returns>The SendResult, i.e. the response(s).</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.Authenticate(System.UInt32)">
            <summary>
            Execute(s) the default authentication mechanism.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.Authenticate(System.UInt32,System.String)">
            <summary>
            Execute(s) the authentication using the passed key value list as string.
            The format is "Param1=Value1;Param2=Value2".
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.AuthenticateByJob(System.UInt32,System.String)">
            <summary>
            Execute the job with the passed name.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.Deauthenticate(System.UInt32)">
            <summary>
            Execute the job with the passed name.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.Wait(System.UInt32)">
            <summary>
            Executes a wait operation (e. g. Thread::Sleep(iTimeout)).
            </summary>
            <remarks>
            With VDS <code>Thread.Sleep</code> etc. must not be used, becasue of the negative efffects to the
            (real time) runtime environment. So a wait operation is executed by the environment so that thread 
            scheduling etc. is handled correctly.
            </remarks>
            <param name="iTimeout">The timeout in milliseconds.</param>
            <returns>The result of the native wait operation.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.EcuFinalized(System.UInt32)">
            <summary>
            Signals the native code that a <see cref="T:Vector.Diagnostics.Ecu"/> was finalized.
            </summary>
            <param name="ecuHandle">The ECU handle.</param>
            <remarks>This method should be only called for finalized VDS objects not for with Dispose explicit 
            destructed objects which are immediately destructed.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.MessageFinalized(System.UInt32)">
            <summary>
            Signals the native code that a <see cref="T:Vector.Diagnostics.Request"/> or <see cref="T:Vector.Diagnostics.Response"/> was finalized.
            </summary>
            <param name="messageHandle">The request handle.</param>
            <remarks>This method should be only called for finalized VDS objects not for with Dispose explicit 
            destructed objects which are immediately destructed.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.ParameterFinalized(System.UInt32)">
            <summary>
            Signals the native code that a <see cref="T:Vector.Diagnostics.Parameter"/> was finalized.
            </summary>
            <param name="parameterHandle">The parameter handle.</param>
            <remarks>This method should be only called for finalized VDS objects not for with Dispose explicit 
            destructed objects which are immediately destructed.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.ActivateNativeObjectDisposedMonitoring">
            <summary>
            Activates the monitoring of disposed native objects.
            </summary>
            <returns>
              <c>true</c> when the activation was successfully; otherwise <c>false</c> is returned.
            </returns>
        </member>
        <member name="M:Vector.Diagnostics.IDfwApiWrapper.DeactivateNativeObjectDisposedMonitoring">
            <summary>
            Activates the monitoring of disposed native objects.
            </summary>
        </member>
        <member name="E:Vector.Diagnostics.IDfwApiWrapper.NativeObjectDisposed">
            <summary>
            Occurs when a native VDI object is disposed.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.IEcu">
            <summary>
            Internal interface of a VDS <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
            <remarks>This interface is not part of the official VDS interface and might be changed.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.IEcu.Variant">
            <summary>
            Gets the variant.
            </summary>
            <value>
            The variant.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.IEcu.Name">
            <summary>
            Gets the name of the current ECU.
            </summary>
            <value>
            The name of the ECU.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.IEcu.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.IEcu.IsAlive">
            <summary>
            Gets a value indicating whether the current instance is still alive (not disposed and assigned handle still valid).
            </summary>
            <value>
              <c>true</c> if the current instance was not disposed and the assigned handle is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ActivateTesterPresent(System.Boolean)">
            <summary>
            Activates (or deactivates) the periodic sending of the tester present request message by the application.
            </summary>
            <param name="activateTP">if set to <c>true</c> tester present is activated.</param>
            <returns><c>true</c> if successfully executed; otherwise <c>false</c></returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.IsTesterPresentActive">
            <summary>
            Determines whether sending Tester Present messages automatically is active.
            </summary>
            <returns><c>true</c> if Tester Present is active; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.Close">
            <summary>
            Invalidate ECU instance and its hierarchy; free resources.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.CreateRequest(System.Byte[])">
            <summary>
            Create a request using raw bytes as PDU.
            </summary>
            <param name="bytes">Byte array containing the PDU.</param>
            <returns>The request object.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.CreateRequest(System.String)">
            <summary>
            Create a request using the service qualifier.
            </summary>
            <param name="serviceQualifier">The qualifier of the service.</param>
            <returns>The request object with the given qualifier. Returns null if no service with given qualifier is available.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.CreateRequestsBySemantic(System.String)">
            <summary>
            Creates requests using the supplied semantic.
            </summary>
            <param name="semantic">The semantic of the service.</param>
            <returns>A collection of requests with the supplied semantic. The collection is always initialized, but can be empty.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.CreateReadRequestByDid(System.String)">
            <summary>
            
            </summary>
            <param name="did"></param>
            <returns></returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.CreateWriteRequestByDid(System.String)">
            <summary>
            
            </summary>
            <param name="did"></param>
            <returns></returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.IdentifyAndSelectVariant">
            <summary>
            Identify and select ECU variant and give the variant qualifier back.
            </summary>
            <value>The qualifier of the ECU variant.</value>
            <remarks>Start the variant identification and selection.</remarks>
            <returns>If the selection of the variant was successfully the variant qualifier is returned.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.IdentifyVariant">
            <summary>
            IdentifyVariant returns the qualifier of the identified ECU variant.
            </summary>
            <returns>The qualifier of the identified variant if successful, otherwise an empty string.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.SelectVariant(System.String)">
            <summary>
            Selects the ECU variant by its qualifier.
            In case an empty string is passed to SelectVariant it shall return VariantSelectionResult.VariantDoesNotExist.
            </summary>
            <param name="qualifier">The qualifier of the variant that is selected.</param>
            <returns>The appropriate <see cref="T:Vector.Diagnostics.VariantSelectionResult"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.Unlock(System.Byte)">
            <summary>
            Unlocks the ECU in the specified level.
            </summary>
            <param name="securityLevel">The security level.</param>
            <returns><see cref="F:Vector.Diagnostics.SecurityAccessResult.Success"/> if ECU was unlocked successfully otherwise check value of <see cref="T:Vector.Diagnostics.SecurityAccessResult"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.Unlock(System.Byte,System.String)">
            <summary>
            Unlocks the ECU in the specified level using an additional option string.
            </summary>
            <param name="securityLevel">The security level.</param>
            <param name="option">The option string to be passed to the seed and key DLL.</param>
            <returns>
              <see cref="F:Vector.Diagnostics.SecurityAccessResult.Success"/> if ECU was unlocked successfully.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ToString">
            <summary>
            Returns the string representation of the current instance.
            </summary>
            <returns>The qualifier of the current instance.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.GetHandle">
            <summary>
            Gets the native handle of the current instance.
            </summary>
            <returns>The native ECU handle.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.GetServiceQualifiers">
            <summary>
            Gets the service qualifiers.
            </summary>
            <returns>A list of available service qualifiers.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.RemoveRequest(Vector.Diagnostics.Request)">
            <summary>
            Removes <see cref="T:Vector.Diagnostics.Request"/> instances created with CreateRequest.
            </summary>
            <param name="request">The <see cref="T:Vector.Diagnostics.Request"/> that shall be removed.</param>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ReadDtcs">
            <summary>
            Reads all <see cref="T:Vector.Diagnostics.Dtc"/>s for the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadDtcResult"/> containing the status of the operation and a list of <see cref="T:Vector.Diagnostics.Dtc"/>s.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ReadDtcs(System.Byte)">
            <summary>
            Reads all <see cref="T:Vector.Diagnostics.Dtc"/>s which have the given DTC status.
            </summary>
            <param name="dtcStatus">The status of the <see cref="T:Vector.Diagnostics.Dtc"/> in the <see cref="T:Vector.Diagnostics.Ecu"/>.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadDtcResult"/> containing the status of the operation and a list of <see cref="T:Vector.Diagnostics.Dtc"/>s with the status of <paramref name="dtcStatus"/>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ClearDtcs">
            <summary>
            Clears all <see cref="T:Vector.Diagnostics.Dtc"/>s in the ECU.
            </summary>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ClearDtcResult"/> containing the status of the operation.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ClearDtc(Vector.Diagnostics.Dtc)">
            <summary>
            Clears the given <see cref="T:Vector.Diagnostics.Dtc"/> in the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> to be cleared.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ClearDtcResult"/> containing the status of the operation.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ClearDtcs(System.UInt32)">
            <summary>
            Clears the given DTCS that match the status mask in the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>    
            <param name="groupOfDtcs">The DTC mask (group of DTCs) that should be deleted.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ClearDtcResult"/> containing the status of the operation.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ReadSnapshotDataRecords(Vector.Diagnostics.Dtc)">
            <summary>
            Reads the snapshot data reocrds for the given <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the snapshot data records.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of snapshot data records for <paramref name="dtc"/>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ReadExtendedDataRecords(Vector.Diagnostics.Dtc)">
            <summary>
            Reads the extended data records for the given <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the extended data records.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of extended data records for <paramref name="dtc"/>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.ReadExtendedDataRecords(Vector.Diagnostics.Dtc,System.Byte)">
            <summary>
            Reads the extended data records for the given <see cref="T:Vector.Diagnostics.Dtc"/> and the record number.
            </summary>
            <param name="dtc">The <see cref="T:Vector.Diagnostics.Dtc"/> for which to read the extended data records.</param>
            <param name="recordNumber">The record number for which to read the extended data records.</param>
            <returns>Returns a <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/> containing the status of the operation and a list of extended data records for <paramref name="dtc"/>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.Authenticate(System.String)">
            <summary>
            Authentication
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.AuthenticateByJob(System.String)">
            <summary>
            Execute the job with the passed name.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IEcu.Deauthenticate">
            <summary>
            Executes a deauthentication precedure.
            </summary>
            <returns>The <see cref="T:Vector.Diagnostics.AuthenticationResult"/> of the authentication.</returns>
        </member>
        <member name="T:Vector.Diagnostics.IMessage">
            <summary>
            IMessage is the base interface of requests and responses.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IMessage.GetParameter(System.String)">
            <summary>
            Get the parameter from the message with the given qualifier.
            </summary>
            <param name="qualifier">The qualifier of the parameter.</param>
            <returns>The parameter object if it exists, null otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IMessage.TryGetParameterCount(System.UInt32@)">
            <summary>
            Gets the (root/top level) parameter count of a message.
            </summary>
            <param name="outParamCount">The parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
        </member>
        <member name="M:Vector.Diagnostics.IMessage.GetHandle">
            <summary>
            Gets the native handle.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <returns>The handle of the current instance.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IMessage.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagateToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="P:Vector.Diagnostics.IMessage.Qualifier">
            <summary>
            The service qualifier (unique name).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.IMessage.Parameters">
            <summary>
            Read access to the (top level) parameter collection of that message.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.IMessage.Pdu">
            <summary>
            Read access to the message PDU as raw bytes.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.IMessage.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="T:Vector.Diagnostics.IParameter">
            <summary>
            Internal interface of the VDS <see cref="T:Vector.Diagnostics.Parameter"/>.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.Description">
            <summary>
            Gets the parameter's description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.Name">
            <summary>
            Gets the parameter's name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.Parameters">
            <summary>
            Gets the child parameters (might be empty).
            </summary>
            <value>The child parameters.</value>
            <remarks>When no parameter collection exists a new instance is created.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.Qualifier">
            <summary>
            Gets the parameter's qualifier.
            </summary>
            <value>The qualifier.</value>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.Semantic">
            <summary>
            Gets the parameter's semantic.
            </summary>
            <value>The semantic.</value>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.Unit">
            <summary>
            Gets the parameter's unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.Value">
            <summary>
            Gets the value.
            </summary>
            <value> The value.</value>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.ParentMessage">
            <summary>
            Gets the parent message.
            </summary>
            <value>The parent message.</value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.IParameter.IsReadOnly">
            <summary>
            Gets a value indicating whether this parameter is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IParameter.GetParameter(System.String)">
            <summary>
            Gets a sub parameter within a structured parameter.
            </summary>
            <param name="subParameterQualifier">The qualifier of the sub parameter.</param>
            <returns>The sub parameter if it exists, null otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IParameter.TryGetChildParameterCount(System.UInt32@)">
            <summary>
            Gets the child parameter count.
            </summary>
            <param name="outChildParamCount">The child parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IParameter.SetIterationCount(System.UInt32)">
            <summary>
            Set the number of iterations.
            </summary>
            <remarks>Sets the number of iterations in an iterative parameter. Do not use the Value property to add or remove iterations!</remarks>
            <param name="count">The number of iterations this iterative parameter will contain afterwards.</param>
            <returns><c>true</c> if actions succeeds, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IParameter.GetHandle">
            <summary>
            Gets the native handle of the current instance.
            </summary>
            <returns>The native parameter handle.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IParameter.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IParameter.GetChildParameterCollection">
            <summary>
            Gets the child parameter collection if one is existing.
            The difference to the <c>Parameters</c> property is that no <see cref="T:Vector.Diagnostics.ParameterCollection"/>
             instance is created when the method is called.
            </summary>
            <returns>The child parameter collection or <c>null</c>.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IParameter.ExchangeChildParameterCollection(Vector.Diagnostics.ParameterCollection)">
            <summary>
            Replaces the current parameter collection with the passed collection.
            </summary>
            <param name="newChildParameters">The new child parameter collection.</param>
            <returns>The old child parameter collection or <c>null</c> if no child parameter collection was used.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IParameter.GetAssignedValue">
            <summary>
            Gets the assigned <see cref="P:Vector.Diagnostics.IParameter.Value"/> or returns null.
            The difference to the <code>Value</code> property is that no Va<see cref="P:Vector.Diagnostics.IParameter.Value"/> instance is created implicitly.
            </summary>
            <returns>The assigned value <see cref="P:Vector.Diagnostics.IParameter.Value"/> or <c>null</c>.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="T:Vector.Diagnostics.IParameterParent">
            <summary>
            The base type of all types that can contain parameters.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.IParameterParent.HasParent">
            <summary>
            Returns <c>true</c> when a parent is available; otherwise <c>false</c> is returned.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IParameterParent.GetParent">
            <summary>
            Gets the parent instance.
            </summary>
            <returns>The parent instance or null</returns>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IParameterParent.Update">
            <summary>
            Updates the current parameters collection (message or struct parameter).
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.IParameterParent.UpdateParentParameterCollection">
            <summary>
            Updates the parent parameters collection.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="T:Vector.Diagnostics.IParameterCollection">
            <summary>
            Internal interface of the VDS <see cref="T:Vector.Diagnostics.ParameterCollection"/>.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IParameterCollection.IndexOf(Vector.Diagnostics.Parameter)">
            <summary>
            Index the of the specified <see cref="T:Vector.Diagnostics.Parameter"/>.
            </summary>
            <param name="parameter">The parameter to find.</param>
            <returns>The zero-based index of the first occurrence of the parameter within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IParameterCollection.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.IParameterCollection.SetParent(Vector.Diagnostics.IParameter)">
            <summary>
            Sets the parent instance.
            </summary>
            <param name="parent">The parent instance.</param>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ArgumentNullException">Throws an <see cref="T:System.ArgumentNullException" /> when the argument is <c>null</c>.</exception>
        </member>
        <member name="P:Vector.Diagnostics.IParameterCollection.Count">
            <summary>
            Return the number of parameters in this collection
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.IParameterCollection.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.IParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Vector.Diagnostics.Parameter"/> at the specified index.
            </summary>
            <value>The zero-based index value of the parameter in the collection.</value>
            <remarks>If the parameter with the specified index cannot be found, null is returned.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.IParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Vector.Diagnostics.Parameter"/> with the specified qualifier.
            </summary>
            <remarks>If the parameter with the specified qualifier cannot be found, null is returned.</remarks>
            <value>The qualifier of the <see cref="T:Vector.Diagnostics.Parameter"/>.</value>
        </member>
        <member name="T:Vector.Diagnostics.ISendResult">
            <summary>
            Internal interface of the <see cref="T:Vector.Diagnostics.SendResult"/> class.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.ISendResult.Response">
            <summary>
            The response to the sent request message (if available; null otherwise).
            In case of multiple responses are to be expected or possible for a certain request 
            (e.g. multiple responses or functional requests) then the Responses property will 
            provide the list of responses (i.e. this Response property will return null).
            </summary>
            <value>
            The response.
            </value>
            <remarks>
            The response message might be null if an error occurred. Please check the Status-property 
            for the <see cref="T:Vector.Diagnostics.SendStatus" /> value "OK" before accessing the response message.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.ISendResult.Responses">
            <summary>
            Gets the list of response messages from the ECU.
            </summary>
            <remarks>
            In the special case that several responses may be received for a single request sent
            (e.g. GM fault memory access with multiple responses or the responses belonging to a functional request)
            the response collection can be accessed using this 'Responses' container property.
            Notice that the 'Responses' property has always to be used for multiple response services, even if only one
            response is received; e.g. if there is only one DTC or if only one ECU did respond to a functional request.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.ISendResult.Status">
            <summary>
            Gets the status of the request message transmission.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.IVectorDiagnosticsInitHelper">
            <summary>
            The interface defines the initialize method to fill the inside of Vector.Diagnostics used
            simple dependency injection container <see cref="T:Vector.Diagnostics.DfwApiFacadeProvider"/>.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.IVectorDiagnosticsInitHelper.InitializeVectorDiagnostics">
            <summary>
            Initialize the Vector Diagnostics (VDS) library with default settings.
            </summary>
            <returns><c>true</c> when no error occures; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.IVectorDiagnosticsInitHelper.InitializeVectorDiagnostics(System.Boolean)">
            <summary>
            Initialize the Vector Diagnostics (VDS) library
            </summary>
            <param name="activateNativeObjectDisposedEvents">if set to <c>true</c> monitoring of native objects is activated.</param>
            <returns>
              <c>true</c> when no error occures; otherwise <c>false</c> is returned.
            </returns>
        </member>
        <member name="M:Vector.Diagnostics.IVectorDiagnosticsInitHelper.UnregisterVDIAdapter">
            <summary>
            Unregisters the adapter that connects VDS with the (native) implementation.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.IVectorDiagnosticsInitHelper.DeactivateNativeObjectRemovedEvents">
            <summary>
            Deactivates the native object removed events.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.DiagnosticMessage">
            <summary>
            Provides the base implementation for both <see cref="T:Vector.Diagnostics.Request"/> and <see cref="T:Vector.Diagnostics.Response"/>.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DiagnosticMessage.mAssignedEcu">
            <summary>
            Back reference to the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DiagnosticMessage.mParameterOwner">
            <summary>
            The <see cref="T:Vector.Diagnostics.Request"/> or <see cref="T:Vector.Diagnostics.Response"/> that aggregates this object.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DiagnosticMessage.mId">
            <summary>
            The unique message identification string ("qualifier" / "shortname").
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DiagnosticMessage.mPrimitiveId">
            <summary>
            The unique primitive identification string.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DiagnosticMessage.mPdu">
            <summary>
            The PDU bytes of the message.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DiagnosticMessage.mMessageHandle">
            <summary>
            The object's VDInternal handle.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DiagnosticMessage.mParameters">
            <summary>
            Message root parameters are handled with this list.
            (The parameters are managed in a collection member within this class, so that it is assured
            that for each parameter only one instance exists !)
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.DiagnosticMessage.mDisposed">
            <summary>
            Flag to track the dispose state.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.#ctor(Vector.Diagnostics.IEcu,Vector.Diagnostics.IMessage,System.String,System.String,System.Byte[],System.UInt32)">
            <summary>
            Initializes the common parts and prevents a default instance of the <see cref="T:Vector.Diagnostics.DiagnosticMessage"/> class from being created.
            </summary>
            <param name="assignedEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> that owns this message.</param>
            <param name="parameterOwner">The message that aggregates this object.</param>
            <param name="id">The service qualifier.</param>
            <param name="primitiveId">The service primitive qualifier.</param>
            <param name="pdu">The PDU (optional - pass <c>null</c> when not used).</param>
            <param name="messageHandle">The message handle.</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.#ctor(Vector.Diagnostics.IEcu,Vector.Diagnostics.IMessage,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.DiagnosticMessage"/> class.
            </summary>
            /// <param name="assignedEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> that owns this message.</param>
            <param name="owner">The message that aggregates this object.</param>
            <param name="hMessage">The message handle.</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.#ctor(Vector.Diagnostics.IEcu,Vector.Diagnostics.IMessage,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.DiagnosticMessage"/> class.
            </summary>
            <param name="assignedEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> that owns this message.</param>
            <param name="owner">The message that aggregates this object.</param>
            <param name="id">The unique Message identification string (qualifier / shortname).</param>
            <param name="messageHandle">The message handle.</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.#ctor(Vector.Diagnostics.IEcu,Vector.Diagnostics.IMessage,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.DiagnosticMessage"/> class.
            Note: The unique Message identification string (qualifier / shortname) will be retrieved lazy / on demand in this case.
            </summary>
            <param name="assignedEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> that owns this message.</param>
            <param name="owner">The message that aggregates this object.</param>
            <param name="bytes">The PDU of the message as byte array (raw data).</param>
            <param name="messageHandle">The message handle.</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.DiagnosticMessage"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.Dispose">
            <summary>
            Free resources allocated for this message.
            Call this method when the message is no longer used.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.ReleaseUnmanagedResources">
            <summary>
            Release unmanaged resources
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.ThrowObjectDisposedExceptionWhenAlreadyDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> when the current instance is already disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.DiagnosticMessage.HasParent">
            <summary>
            Returns always <c>false</c>, because a message is always the root object of parameters.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.GetParent">
            <summary>
            Returns always <c>null</c>, because a message is always the root object of parameters.
            </summary>
            <returns>Returns always <c>null</c>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.Update">
            <summary>
            Updates the parameters collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.UpdateParentParameterCollection">
            <summary>
            Updates the parent parameters collection, because the message is the root element of parameters
            this implementation redirects to <c>Update()</c>.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.DiagnosticMessage.Qualifier">
            <summary>
            The message's identifier string (unique qualifier / shortname).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.DiagnosticMessage.PrimitiveQualifier">
            <summary>
            The primitives qualifier (unique qualifier / short name).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.DiagnosticMessage.Pdu">
            <summary>
            Get the message PDU as raw bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.DiagnosticMessage.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.DiagnosticMessage.Parameters">
            <summary>
            Get the list of top level message parameters.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.GetParameter(System.String)">
            <summary>
            Get a specific parameter from the message.
            </summary>
            <param name="qualifier">The qualifier of the parameter.</param>
            <returns>The parameter object if it exists, null otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.TryGetParameterCount(System.UInt32@)">
            <summary>
            Gets the (root/top level) parameter count of a message.
            </summary>
            <param name="outParamCount">The parameter count [out].</param>
            <returns>
              <c>true</c> when the operation was successfully; otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.GetHandle">
            <summary>
            Gets the VDI handle.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.InitializeParameterCollectionWhenNeeded">
            <summary>
            Initializes the parameter collection when needed.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.DiagnosticMessage.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagateToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.NativeMessageDisposedEventHandler.NativeObjectDisposedEventHandler(System.Object,Vector.Diagnostics.NativeObjectDisposedEventArgs)">
            <summary>
            Handles the native object disposed event: Marks the referenced message instance and all childes as disposed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="disposedEventArgs">The <see cref="T:Vector.Diagnostics.NativeObjectDisposedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vector.Diagnostics.NativeEcuDisposedEventHandler.NativeObjectDisposedEventHandler(System.Object,Vector.Diagnostics.NativeObjectDisposedEventArgs)">
            <summary>
            Handles the native object disposed event: Marks the referenced ECU instance and all childes as disposed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="disposedEventArgs">The <see cref="T:Vector.Diagnostics.NativeObjectDisposedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Vector.Diagnostics.NativeObjectDisposedEventArgs">
            <summary>
            Event argument that contains information about unmanaged objects that were destructed and should be marked as disposed.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.NativeObjectDisposedEventArgs.#ctor(System.UInt32,Vector.Diagnostics.VdiObjectType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.NativeObjectDisposedEventArgs" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="P:Vector.Diagnostics.NativeObjectDisposedEventArgs.Handle">
            <summary>
            Gets the handle of the destructed object.
            </summary>
            <value>
            The handle of an ECU, message or parameter instance.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.NativeObjectDisposedEventArgs.Type">
            <summary>
            Gets the type of the destructed object.
            </summary>
            <value> The type.</value>
        </member>
        <member name="M:Vector.Diagnostics.NativeObjectDisposedEventArgs.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Vector.Diagnostics.Parameter">
            <summary>
            Represents a parameter of a message (request/response).
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.#ctor(System.String,System.UInt32,Vector.Diagnostics.IParameterParent,Vector.Diagnostics.IMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Parameter"/> class.
            </summary>
            <param name="parameterId">The parameter qualifier.</param>
            <param name="parameterHandle">The parameter handle.</param>
            <param name="parent">The parent container for a parameter(a <see cref="T:Vector.Diagnostics.IParameterCollection"/>)</param>
            <param name="parentMessage">Parent message this parameter belongs to.</param>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.Parameter"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.System#IDisposable#Dispose">
            <summary>
            Free resources allocated for this message.
            Call this method when the parameter is no longer used.
            </summary>
            <remarks>
            Not public because the parameter should be disposed with the message.
            </remarks>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.GetParameter(System.String)">
             <summary>
             Access to a sub parameter within a structured parameter.
             </summary>
             <param name="subParameterQualifier">The qualifier of the sub parameter.</param>
             <returns>The sub parameter if it exists, null otherwise.</returns>
             <example>This example shows how to get sub parameters from a parameter.
             <code>
             // Retrieve the door ECU from the application
             Ecu myEcu = Application.GetEcu("Door");
            
             // Create a request using the service qualifier
             Request request = myEcu.CreateRequest("Software_Version_Read");
            
             // Get the parent parameter from the request
             Parameter parameter = request.GetParameter("Software_Version");
             
             // Reade the sub parameters for the software version from the parent parameter
             Parameter paramMajor = parameter.GetParameter("Software_Version.Major");
             Parameter paramMinor = parameter.GetParameter("Software_Version.Minor");
             Parameter paramRevision = parameter.GetParameter("Software_Version.Revision");
             
             // ...
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#TryGetChildParameterCount(System.UInt32@)">
            <summary>
            Gets the child parameter count.
            </summary>
            <param name="outChildParamCount">The child parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.SetIterationCount(System.UInt32)">
             <summary>
             Set the number of iterations.
             </summary>
             <example>The following example shows how to set the number of iterations in an iterative parameter.
             <code>
             // Get the parameter from the request
             Parameter parameter = request.GetParameter("My_Param");
            
             // Set the number of iterations to 5
             bool settingIterationsWithoutError = parameter.SetIterationCount(5);
             </code>
             </example>
             <remarks>Sets the number of iterations in an iterative parameter. Do not use the Value property to add or remove iterations!</remarks>
             <param name="count">The number of iterations this iterative parameter will contain afterwards.</param>
             <returns><c>true</c> if actions succeeds, <c>false</c> otherwise.</returns>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#GetHandle">
            <summary>
            Gets the native handle of the current instance.
            </summary>
            <returns>
            The native parameter handle.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#GetChildParameterCollection">
            <summary>
            Gets the child parameter collection if one is existing.
            The difference to the <c>Parameters</c> property is that no <see cref="T:Vector.Diagnostics.ParameterCollection"/>
             instance is created when the method is called.
            </summary>
            <returns>The child parameter collection or <c>null</c>.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#ExchangeChildParameterCollection(Vector.Diagnostics.ParameterCollection)">
            <summary>
            Replaces the current parameter collection with the passed collection.
            </summary>
            <param name="newChildParameters">The new child parameter collection.</param>
            <returns>The old child parameter collection or <c>null</c> if no child parameter collection was used.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#GetAssignedValue">
            <summary>
            Gets the assigned <see cref="P:Vector.Diagnostics.Parameter.Value"/>.
            </summary>
            <returns>The assigned value <see cref="P:Vector.Diagnostics.Parameter.Value"/> or <c>null</c>.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.ToString">
            <summary>
            Get a descriptive string for the parameter, including its value.
            </summary>
            <returns>The parameter representation string in the format "[parameter_name]: [value]".</returns>
        </member>
        <member name="M:Vector.Diagnostics.Parameter.ThrowObjectDisposedExceptionWhenAlreadyDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> when the current instance is already disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#IsReadOnly">
            <summary>
            Gets a value indicating whether this parameter is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Value">
            <summary>
            Access the parameter value object.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Name">
            <summary>
            Get the parameter name.
            </summary>
            <remarks>The name of the parameter depends on the language settings for the
            diagnostic description in the host application.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Description">
            <summary>
            Get the parameter description text.
            </summary>
            <remarks>The description text of the parameter depends on the language settings of the
            diagnostic description in the host application.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Unit">
            <summary>
            Get the unit of the parameter.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Qualifier">
            <summary>
            The parameter qualifier (unique name).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Semantic">
            <summary>
            The parameter's semantic.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Parameters">
             <summary>
             Get sub parameters of a structured parameter.
             </summary>
             <value><see cref="T:Vector.Diagnostics.ParameterCollection"/> with a list of sub parameters.</value>
             <example>This example shows how to access the sub parameter collection to get a sub parameter.
             <code>
             // Use the ECU currently selected by the Application
             Ecu myEcu = Application.GetEcu();
             
             // Create a request using the service qualifier
             Request request = myEcu.CreateRequest("Software_Version_Read");
            
             // Send the request to the ECU and wait for a response
             SendResult result = request.Send();
             
             // Check if request has been sent successfully to the ECU
             if (result.Status == SendStatus.Ok)
             {
                 // Get the response from the send result
                 Response response = result.Response;
            
                 // Read the parameter 
                 Parameter paramSoftwareVersion = response.GetParameter("Software_Version");
             
                 // Read the sub parameters via indexer
                 Parameter paramMajor = paramSoftwareVersion.Parameters["Software_Version.Major"];
                 Parameter paramMinor = paramSoftwareVersion.Parameters["Software_Version.Minor"];
                 Parameter paramRevision = paramSoftwareVersion.Parameters["Software_Version.Revision"];
             
                 // Iterate over sub parameters with foreach-loop
                 foreach (Parameter parameter in paramSoftwareVersion.Parameters)
                 {
                     string paramName = parameter.Name;
                     string paramDescription = parameter.Description;
                     // ...
                 }
            
                 // Iterate over sub parameters with for-loop
                 for (int i = 0; i &lt; paramSoftwareVersion.Parameters.Count; i++)
                 {
                     Parameter parameter = paramSoftwareVersion.Parameters[i];
                     string paramName = parameter.Name;
                     string paramDescription = parameter.Description;
                     // ...
                 } 
             
                 // ...
             }
             </code>
             </example>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#ParentMessage">
            <summary>
            Gets the parent message.
            </summary>
            <value>The parent message.</value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.Parameter.Vector#Diagnostics#IParameter#IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
            <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="T:Vector.Diagnostics.ParameterCollection">
            <summary>
             Provide a strongly typed collection for <see cref="T:Vector.Diagnostics.Parameter"/>s
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.#ctor(Vector.Diagnostics.IMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.ParameterCollection"/> class.
            </summary>
            <param name="message">The message instance that shall own the parameters</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.#ctor(Vector.Diagnostics.IParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.ParameterCollection"/> class.
            </summary>
            <param name="structParameter">The struct parameter that shall own the parameters</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.#ctor(Vector.Diagnostics.IParameter,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.ParameterCollection"/> class.
            </summary>
            <param name="structParameter">The struct parameter that shall own the parameters</param>
            <param name="index">Only this sub parameter shall be within the collection
            (needed for environment data records).</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.ParameterCollection"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.Dispose">
            <summary>
             Cleanup the parameters in the ParameterCollection.
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollection.Count">
            <summary>
            Return the number of parameters in this collection
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollection.Vector#Diagnostics#IParameterCollection#IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
            <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Vector.Diagnostics.Parameter"/> with the specified qualifier.
            </summary>
            <remarks>If the parameter with the specified qualifier cannot be found, null is returned.</remarks>
            <value>The qualifier of the <see cref="T:Vector.Diagnostics.Parameter"/>.</value>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Vector.Diagnostics.Parameter"/> at the specified index.
            </summary>
            <value>The zero-based index value of the parameter in the collection.</value>
            <remarks>If the parameter with the specified index cannot be found, null is returned.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.IndexOf(Vector.Diagnostics.Parameter)">
            <summary>
            Index of the specified <see cref="T:Vector.Diagnostics.Parameter"/>.
            </summary>
            <param name="parameter">The parameter to find.</param>
            <returns>The zero-based index of the first occurrence of the parameter within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.Vector#Diagnostics#IParameterCollection#MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollection.ThrowObjectDisposedExceptionWhenAlreadyDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> when the current instance is already disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="T:Vector.Diagnostics.ParameterCollectionImpl">
            <summary>
             Provide a strongly typed collection for <see cref="T:Vector.Diagnostics.Parameter"/>s
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ParameterCollectionImpl.IndexOfResultObjectDisposed">
            <summary>
            This value is returned by <see cref="M:Vector.Diagnostics.ParameterCollectionImpl.IndexOf(Vector.Diagnostics.Parameter)"/> when the current was already disposed.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ParameterCollectionImpl.IndexOfResultInnerException">
            <summary>
            This value is returned by <see cref="M:Vector.Diagnostics.ParameterCollectionImpl.IndexOf(Vector.Diagnostics.Parameter)"/> when an exception is thrown,
            by the internally used generic list of <see cref="T:Vector.Diagnostics.Parameter"/> instances.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.#ctor(Vector.Diagnostics.IMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.ParameterCollectionImpl"/> class.
            </summary>
            <param name="message">The message instance that shall own the parameters</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.#ctor(Vector.Diagnostics.IParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.ParameterCollectionImpl"/> class.
            </summary>
            <param name="structParameter">The struct parameter that shall own the parameters</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.#ctor(Vector.Diagnostics.IParameter,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.ParameterCollectionImpl"/> class.
            As sub parameter only the parameter with the index is returned.
            </summary>
            <param name="structParameter">The struct parameter that shall own the parameters.</param>
            <param name="index">The element that should be put into the parameter collection.</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.ParameterCollectionImpl"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.Dispose">
            <summary>
             Cleanup the parameters in the ParameterCollection.
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.CleanupChildParameters(System.Boolean)">
            <summary>
            Removes all child parameters by clearing the list of child parameters.
            </summary>
            <param name="disposing">
            Pass <c>true</c> to Dispose all valid child parameters, when <c>false</c> is passed
            the collection is cleared but the child <see cref="T:Vector.Diagnostics.Parameter"/> instances are not disposed.
            </param>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollectionImpl.HasParent">
            <summary>
            Returns always true, because a ParameterCollection has always a parent (a message or a struct parameter).
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.GetParent">
            <summary>
            Gets the parent instance.
            </summary>
            <returns>The parent instance or null</returns>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollectionImpl.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
            <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollectionImpl.Count">
            <summary>
            Return the number of parameters in this collection
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollectionImpl.Item(System.String)">
            <summary>
            Gets the <see cref="T:Vector.Diagnostics.Parameter"/> with the specified qualifier.
            </summary>
            <remarks>If the parameter with the specified qualifier cannot be found, null is returned.</remarks>
            <value>The qualifier of the <see cref="T:Vector.Diagnostics.Parameter"/>.</value>
        </member>
        <member name="P:Vector.Diagnostics.ParameterCollectionImpl.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Vector.Diagnostics.Parameter"/> at the specified index.
            </summary>
            <value>The zero-based index value of the parameter in the collection.</value>
            <remarks>If the parameter with the specified index cannot be found, null is returned.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.IndexOf(Vector.Diagnostics.Parameter)">
            <summary>
            Index the of the specified <see cref="T:Vector.Diagnostics.Parameter"/>.
            </summary>
            <param name="parameter">The parameter to find.</param>
            <returns>
            The zero-based index of the first occurrence of the parameter within the entire collection, if found; otherwise, a negative number.
            </returns>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.Replace(System.Collections.Generic.List{Vector.Diagnostics.Parameter})">
            <summary>
            Replaces the parameters of the current collection with the passed parameter collection by moving the handles of the passed 
            collection to the current collection. The passed collection is invalid after this method returns.
            </summary>
            <param name="newParams">The new parameters.</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterCollectionImpl.ThrowObjectDisposedExceptionWhenAlreadyDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> when the current instance is already disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="T:Vector.Diagnostics.ParameterImpl">
            <summary>
            Represents a parameter of a message (request/response).
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.#ctor(System.String,System.UInt32,Vector.Diagnostics.IParameterParent,Vector.Diagnostics.IMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Parameter"/> class.
            </summary>
            <param name="parameterId">The parameter qualifier.</param>
            <param name="parameterHandle">The parameter handle.</param>
            /// <param name="parent">The parent container for a parameter(a <see cref="T:Vector.Diagnostics.IParameterCollection"/>)</param>
            <param name="parentMessage">Parent message this parameter belongs to.</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.ParameterImpl"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.Dispose">
            <summary>
            Free resources allocated for this message.
            Call this method when the message is no longer used.
            </summary>
            <remarks>
            Not public because the parameter should be disposed with the message.
            </remarks>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.ReleaseUnmanagedResources">
            <summary>
            Release unmanaged resources
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.HasParent">
            <summary>
            Returns always true, because a parameter has always a parent (a message or a struct parameter).
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.GetParent">
            <summary>
            Gets the parent instance.
            </summary>
            <returns>The parent instance or null</returns>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.GetParameter(System.String)">
             <summary>
             Access to a sub parameter within a structured parameter.
             </summary>
             <param name="subParameterQualifier">The qualifier of the sub parameter.</param>
             <returns>The sub parameter if it exists, null otherwise.</returns>
             <example>This example shows how to get sub parameters from a parameter.
             <code>
             // Retrieve the door ECU from the application
             Ecu myEcu = Application.GetEcu("Door");
            
             // Create a request using the service qualifier
             Request request = myEcu.CreateRequest("Software_Version_Read");
            
             // Get the parent parameter from the request
             Parameter parameter = request.GetParameter("Software_Version");
             
             // Reade the sub parameters for the software version from the parent parameter
             Parameter paramMajor = parameter.GetParameter("Software_Version.Major");
             Parameter paramMinor = parameter.GetParameter("Software_Version.Minor");
             Parameter paramRevision = parameter.GetParameter("Software_Version.Revision");
             
             // ...
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.InitializeParameterCollectionWhenNeeded">
            <summary>
            Initializes the parameter collection when needed.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.TryGetChildParameterCount(System.UInt32@)">
            <summary>
            Gets the child parameter count.
            </summary>
            <param name="outChildParamCount">The child parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.SetIterationCount(System.UInt32)">
             <summary>
             Set the number of iterations.
             </summary>
             <example>The following example shows how to set the number of iterations in an iterative parameter.
             <code>
             // Get the parameter from the request
             Parameter parameter = request.GetParameter("My_Param");
            
             // Set the number of iterations to 5
             bool settingIterationsWithoutError = parameter.SetIterationCount(5);
             </code>
             </example>
             <remarks>Sets the number of iterations in an iterative parameter. Do not use the Value property to add or remove iterations!</remarks>
             <param name="count">The number of iterations this iterative parameter will contain afterwards.</param>
             <returns><c>true</c> if actions succeeds, <c>false</c> otherwise.</returns>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.GetHandle">
            <summary>
            Gets the native handle of the current instance.
            </summary>
            <returns>
            The native parameter handle.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.ToString">
            <summary>
            Get a descriptive string for the parameter, including its value.
            </summary>
            <returns>The parameter representation string in the format "[parameter_name]: [value]".</returns>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.UpdateParentParameterCollection">
            <summary>
            Updates the parent parameters collection.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.GetChildParameterCollection">
            <summary>
            Gets the child parameter collection if one is existing.
            The difference to the <c>Parameters</c> property is that no <see cref="T:Vector.Diagnostics.ParameterCollection"/>
             instance is created when the method is called.
            </summary>
            <returns>The child parameter collection or <c>null</c>.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.ExchangeChildParameterCollection(Vector.Diagnostics.ParameterCollection)">
            <summary>
            Replaces the current parameter collection with the passed collection.
            </summary>
            <param name="newChildParameters">The new child parameter collection.</param>
            <returns>The old child parameter collection or <c>null</c> if no child parameter collection was used.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.GetAssignedValue">
            <summary>
            Gets the assigned <see cref="P:Vector.Diagnostics.ParameterImpl.Value"/>.
            </summary>
            <returns>The assigned value <see cref="P:Vector.Diagnostics.ParameterImpl.Value"/> or <c>null</c>.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.ParameterImpl.ThrowObjectDisposedExceptionWhenAlreadyDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> when the current instance is already disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.IsReadOnly">
            <summary>
            Gets a value indicating whether this parameter is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.Value">
            <summary>
            Access the parameter value object.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.Name">
            <summary>
            Get the parameter name.
            </summary>
            <remarks>The name of the parameter depends on the language settings for the
            diagnostic description in the host application.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.Description">
            <summary>
            Get the parameter description text.
            </summary>
            <remarks>The description text of the parameter depends on the language settings of the
            diagnostic description in the host application.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.Unit">
            <summary>
            Get the unit of the parameter.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.Qualifier">
            <summary>
            The parameter qualifier (unique name).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.Semantic">
            <summary>
            The parameter's semantic.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.Parameters">
             <summary>
             Get sub parameters of a structured parameter.
             </summary>
             <value><see cref="T:Vector.Diagnostics.ParameterCollection"/> with a list of sub parameters.</value>
             <example>This example shows how to access the sub parameter collection to get a sub parameter.
             <code>
             // Use the ECU currently selected by the Application
             Ecu myEcu = Application.GetEcu();
             
             // Create a request using the service qualifier
             Request request = myEcu.CreateRequest("Software_Version_Read");
            
             // Send the request to the ECU and wait for a response
             SendResult result = request.Send();
             
             // Check if request has been sent successfully to the ECU
             if (result.Status == SendStatus.Ok)
             {
                 // Get the response from the send result
                 Response response = result.Response;
            
                 // Read the parameter 
                 Parameter paramSoftwareVersion = response.GetParameter("Software_Version");
             
                 // Read the sub parameters via indexer
                 Parameter paramMajor = paramSoftwareVersion.Parameters["Software_Version.Major"];
                 Parameter paramMinor = paramSoftwareVersion.Parameters["Software_Version.Minor"];
                 Parameter paramRevision = paramSoftwareVersion.Parameters["Software_Version.Revision"];
             
                 // Iterate over sub parameters with foreach-loop
                 foreach (Parameter parameter in paramSoftwareVersion.Parameters)
                 {
                     string paramName = parameter.Name;
                     string paramDescription = parameter.Description;
                     // ...
                 }
            
                 // Iterate over sub parameters with for-loop
                 for (int i = 0; i &lt; paramSoftwareVersion.Parameters.Count; i++)
                 {
                     Parameter parameter = paramSoftwareVersion.Parameters[i];
                     string paramName = parameter.Name;
                     string paramDescription = parameter.Description;
                     // ...
                 } 
             
                 // ...
             }
             </code>
             </example>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.ParentMessage">
            <summary>
            Gets the parent message.
            </summary>
            <value>The parent message.</value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.ParameterImpl.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
            <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="T:Vector.Diagnostics.ReadDtcResult">
            <summary>
            Result of reading the <see cref="T:Vector.Diagnostics.Dtc"/>s of an <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ReadDtcResult.Dispose">
            <summary>
            Free native resources.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ReadDtcResult.Status">
            <summary>
            The status of the read <see cref="T:Vector.Diagnostics.Dtc"/>s operation.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ReadDtcResult.Dtcs">
            <summary>
            The <see cref="T:Vector.Diagnostics.Dtc"/>s returned by the <see cref="T:Vector.Diagnostics.Ecu"/>.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ReadDtcResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this <see cref="T:Vector.Diagnostics.ReadDtcResult"/>.
            </summary>
            <returns>The status as string.</returns>
        </member>
        <member name="T:Vector.Diagnostics.ReadEnvironmentDataResult">
            <summary>
            Result of reading the environment data of a <see cref="T:Vector.Diagnostics.Dtc"/>.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ReadEnvironmentDataResult.Dispose">
            <summary>
            Free native resources.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ReadEnvironmentDataResult.Status">
            <summary>
            The status of the operation.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ReadEnvironmentDataResult.EnvironmentData">
            <summary>
            The environment data (for each record one list element [modelling as packet required])
             if multiple responses are returned, e.g. for GMLAN, each response
             is added to the list
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ReadEnvironmentDataResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Vector.Diagnostics.ReadEnvironmentDataResult"/>.
            </summary>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Vector.Diagnostics.Request">
             <summary>
             Provides a diagnostic request message.
             </summary>
             <example>This example shows how to create a new request based on raw bytes as PDU.
             <code>
             // Use the ECU currently selected by the Application
             Ecu myEcu = Application.GetEcu();
            
             // Create a request using raw bytes as PDU
             Request request = myEcu.CreateRequest(new byte[] { 0x10, 0x03 });
             // ...
             
             // When the request is not needed any more use Dispose() to free allocated resources
             
             </code>
             </example>
             <example>This example shows how to create a new request based on a service qualifier.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request using the service qualifier
               using(Request request = myEcu.CreateRequest("Software_Version_Read"))
               {
                 // ...
               }
             }
             </code>
             </example>
             <remarks>
             The resources that are held for messages (requests and responses) have to be cleared after 
             the according objects will not be accessed any more. This has to be done by calling the Dispose() 
             method of such objects. C# comes with an extra statement which is built in in the language: ‘using’.
             With this keyword one can define a scope, outside of which an object will automatically be disposed.
             </remarks>
        </member>
        <member name="F:Vector.Diagnostics.Request.mRequestImpl">
            <summary>
            Managed pointer to the implementation object.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Request.#ctor(Vector.Diagnostics.IEcu,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Request"/> class.
            </summary>
            <param name="parentEcu">The <see cref="T:Vector.Diagnostics.IEcu"/> that owns this request.</param>
            <param name="requestId">The unique Request identification string (qualifier / shortname).</param>
            <param name="hRequest">The request handle.</param>
        </member>
        <member name="M:Vector.Diagnostics.Request.#ctor(Vector.Diagnostics.IEcu,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Request"/> class.
            Note: The unique Request identification string (qualifier / shortname) will be retrieved lazy / on demand in this case.
            </summary>
            <param name="parentEcu">The <see cref="P:Vector.Diagnostics.Request.Ecu"/> that owns this request.</param>
            <param name="bytes">The PDU of the request as byte array (raw data).</param>
            <param name="hRequest">The request handle.</param>
        </member>
        <member name="M:Vector.Diagnostics.Request.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.Request"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Request.Dispose">
            <summary>
            Free resources allocated for this message.
            Call this method when the message is no longer used.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Request.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vector.Diagnostics.Request.Vector#Diagnostics#IParameterParent#HasParent">
            <summary>
            Returns always <c>false</c>, because a message is always the root object of parameters.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Request.Vector#Diagnostics#IParameterParent#GetParent">
            <summary>
            Returns always <c>null</c>, because a message is always the root object of parameters.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <returns>Returns always <c>null</c>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Request.Vector#Diagnostics#IParameterParent#Update">
            <summary>
            Updates the current parameters collection (message or struct parameter).
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Request.Vector#Diagnostics#IParameterParent#UpdateParentParameterCollection">
            <summary>
            Updates the internal parameters collection.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Request.GetParameter(System.String)">
            <summary>
            Get a specific parameter from the request message.
            </summary>
            <param name="qualifier">The qualifier of the parameter.</param>
            <returns>The parameter object if it exists, null otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Request.Vector#Diagnostics#IMessage#TryGetParameterCount(System.UInt32@)">
            <summary>
            Gets the (root/top level) parameter count of a message.
            </summary>
            <param name="outParamCount">The parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Request.Send">
            <summary>
            Sends the request message to the ECU.
            </summary>
            <returns>
            The <see cref="T:Vector.Diagnostics.SendResult"/> object, which contains the status and also the response.
            </returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Request.SendAsynchronous">
             <summary>
             Sends the request message asynchronously to the ECU.
             </summary>
             <returns>The <see cref="T:Vector.Diagnostics.SendResult"/> object, which contains the status and also the response.</returns>
             <example>This example shows how to create a new request, send it asynchronously and then wait for the result.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request using the service qualifier
               using(Request request = myEcu.CreateRequest("Software_Version_Read"))
               {
                 // Send the request
                 using(SendResult result = request.SendAsynchronous())
                 {
                   // Do something here...
            
                   // Wait for the result
                   WaitResult waitResult = SendResult.WaitAll(result);
               
                   if(waitResult == WaitResult.Success)
                   {
                     // The response(s) are available now
                     Response response = result.Response;  
                   }
                   else
                   {
                     // error handling
                   }
                 }
               }
             }
             </code>
             </example>
             <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Request.Vector#Diagnostics#IMessage#GetHandle">
            <summary>
            Gets the handle.
            </summary>
            <returns>The handle of the current instance.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Request.ToString">
            <summary>
            Returns the qualifier of the service of the request message.
            </summary>
            <returns>Qualifier string of the request message.</returns>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Request.GetSendResults">
            <summary>
            Gets the send results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vector.Diagnostics.Request.Vector#Diagnostics#IMessage#MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagateToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
            <remarks>Used to signal that the corresponding native object are disposed.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Request.GetRequestImpl">
            <summary>
            Returns the actual implementation of the request
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vector.Diagnostics.Request.SuppressPositiveResponse">
            <summary>
            Access positive response suppression setting.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Request.Qualifier">
            <summary>
            The service qualifier (unique name).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.Request.RequestQualifier">
            <summary>
            The request primitive's identifier string (unique name).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.Request.Parameters">
            <summary>
            Get the list of top level request parameters.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.Request.Pdu">
            <summary>
            Get the raw request PDU.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.Request.Ecu">
            <summary>
            Gets the <see cref="P:Vector.Diagnostics.Request.Ecu"/> instance to that this instance belongs.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="P:Vector.Diagnostics.Request.Vector#Diagnostics#IMessage#IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Vector.Diagnostics.RequestCollection">
            <summary>
             Provide a strongly typed collection for <see cref="T:Vector.Diagnostics.Request"/>s.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.RequestCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.RequestCollection"/> class.
            </summary>
            <param name="requests">A list of requests</param>
        </member>
        <member name="P:Vector.Diagnostics.RequestCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Vector.Diagnostics.Request"/> with the specified qualifier.
            </summary>
            <remarks>If the request with the specified qualifier cannot be found, null is returned.</remarks>
            <value>The qualifier of the <see cref="T:Vector.Diagnostics.Request"/>.</value>
        </member>
        <member name="P:Vector.Diagnostics.RequestCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Vector.Diagnostics.Request"/> at the specified index.
            </summary>
            <value>The zero-based index value of the request in the collection.</value>
            <remarks>If the request with the specified index cannot be found, null is returned.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.RequestCollection.Dispose">
            <summary>
            Free resources.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.RequestImpl.mMessageImpl">
            <summary>
            Managed pointer to the implementation object.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.RequestImpl.mLastAsyncSendResult">
            <summary>
            The last send result of an asynchronous send message.
            (Required because when Dispose is called we have to wait until the asynchronous operation was finished.)
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.RequestImpl.mSendResults">
            <summary>
            Helper variable to track the send results (responses) that belong to this instance.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.RequestImpl.mSuppressPositiveResponse">
            <summary>
            A flag indicating whether positive responses should be suppressed.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.RequestImpl.mDisposed">
            <summary>
            Flag to track the dispose state.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.RequestImpl.mDisposedEventHandler">
            <summary>
            Helper that holds a weak reference to this instance and is registered as listener for native events.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.#ctor(Vector.Diagnostics.IEcu,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.RequestImpl"/> class.
            </summary>
            <param name="parentEcu">The <see cref="T:Vector.Diagnostics.IEcu"/> that owns this request.</param>
            <param name="requestId">The unique Request identification string (qualifier / shortname).</param>
            <param name="hRequest">The request handle.</param>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.#ctor(Vector.Diagnostics.IEcu,System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.RequestImpl"/> class.
            Note: The unique Request identification string (qualifier / shortname) will be retrieved lazy / on demand in this case.
            </summary>
            <param name="parentEcu">The <see cref="P:Vector.Diagnostics.RequestImpl.Ecu"/> that owns this request.</param>
            <param name="bytes">The PDU of the request as byte array (raw data).</param>
            <param name="hRequest">The request handle.</param>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.#ctor">
            <summary>
            Initializes the common parts and prevents a default instance of the <see cref="T:Vector.Diagnostics.RequestImpl"/> class from being created.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.RequestImpl"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.Dispose">
            <summary>
            Free resources allocated for this message.
            Call this method when the message is no longer used.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vector.Diagnostics.RequestImpl.HasParent">
            <summary>
            Returns always <c>false</c>, because a message is always the root object of parameters.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.GetParent">
            <summary>
            Returns always <c>null</c>, because a message is always the root object of parameters.
            </summary>
            <returns>Returns always <c>null</c>.</returns>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.Update">
            <summary>
            Updates the current parameters collection (message or struct parameter).
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.UpdateParentParameterCollection">
            <summary>
            Updates the internal parameters collection.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.GetParameter(System.String)">
            <summary>
            Get a specific parameter from the request message.
            </summary>
            <param name="qualifier">The qualifier of the parameter.</param>
            <returns>The parameter object if it exists, null otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.TryGetParameterCount(System.UInt32@)">
            <summary>
            Gets the (root/top level) parameter count of a message.
            </summary>
            <param name="outParamCount">The parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.Send">
            <summary>
            Sends the request message to the ECU.
            </summary>
            <returns>
            The <see cref="T:Vector.Diagnostics.SendResult"/> object, which contains the status and also the response.
            </returns>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.InitializeWriteRequest">
            <summary>
            Initializes a write request with it's corresponding read request. (Read before write)
            </summary>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c> is returned.</returns>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.SendAsynchronous">
             <summary>
             Sends the request message asynchronously to the ECU.
             </summary>
             <returns>The <see cref="T:Vector.Diagnostics.SendResult"/> object, which contains the status and also the response.</returns>
             <example>This example shows how to create a new request, send it asynchronously and then wait for the result.
             <code>
             public void EcuSampleScript()
             {
               // Use the ECU currently selected by the Application
               Ecu myEcu = Application.GetEcu();
            
               // Create a request using the service qualifier
               using(Request request = myEcu.CreateRequest("Software_Version_Read"))
               {
                 // Send the request
                 using(SendResult result = request.SendAsynchronous())
                 {
                   // Do something here...
            
                   // Wait for the result
                   WaitResult waitResult = SendResult.WaitAll(result);
               
                   if(waitResult == WaitResult.Success)
                   {
                     // The response(s) are available now
                     Response response = result.Response;  
                   }
                   else
                   {
                     // error handling
                   }
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.GetHandle">
            <summary>
            Gets the handle.
            </summary>
            <returns>The handle of the current instance.</returns>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.ToString">
            <summary>
            Returns the qualifier of the service of the request message.
            </summary>
            <returns>Qualifier string of the request message.</returns>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.GetSendResults">
            <summary>
            Gets the send results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vector.Diagnostics.RequestImpl.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagateToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
            <remarks>Used to signal that the corresponding native object are disposed.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.RequestImpl.SuppressPositiveResponse">
            <summary>
            Access positive response suppression setting.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.RequestImpl.Qualifier">
            <summary>
            The service qualifier (unique name).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.RequestImpl.RequestQualifier">
            <summary>
            The request primitive's identifier string (unique name).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.RequestImpl.Parameters">
            <summary>
            Get the list of top level request parameters.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.RequestImpl.Pdu">
            <summary>
            Get the raw request PDU.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.RequestImpl.Ecu">
            <summary>
            Gets the <see cref="P:Vector.Diagnostics.RequestImpl.Ecu"/> instance to that this instance belongs.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.RequestImpl.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Vector.Diagnostics.ResponseStatus">
            <summary>
            A response's detailed status.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ResponseStatus.NotInitialized">
            <summary>
            Not yet initialized.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ResponseStatus.Negative">
            <summary>
            A negative response.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ResponseStatus.Positive">
            <summary>
            A positive response.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ResponseStatus.FailedResponseParse">
            <summary>
            The response's pdu could not be matched/parsed correctly.
            Pdu is always filled, Parameters are left empty (empty ParameterCollection).
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.Response">
            <summary>
            Provides a diagnostic response message.
            </summary>
            <example>This example sends a request to the ECU and reads a parameter from the response
            <code>
            // Use the ECU currently selected by the Application
            Ecu myEcu = Application.GetEcu();
            
            // Create a request using raw bytes as PDU
            using(Request request = myEcu.CreateRequest(new byte[] {0x10, 0x03}))
            {
              // Send the request to the ECU and wait for a response
              using(SendResult result = request.Send())
              {
                // Retrieve the response from the send result
                // Caution: the response can be null, e.g. if sending failed
                Response response = result.Response;
            
                // Get a parameter from the response
                Parameter timingParameter = response.GetParameter("Timing_Res_1ms");
            
                // Write the parameter value to the output window, indicating the parameter's unit
                Output.WriteLine("Timing: " + timingParameter.Value.ToDouble() + timingParameter.Unit);
              }
            }
            </code>
            </example>
            <remarks>
            The resources that are held for messages (requests and responses) have to be cleared after 
            the corresponding objects will not be accessed any more. This has to be done by calling the Dispose() 
            method of such objects. C# comes with an extra statement which is built in in the language: ‘using’.
            With this keyword one can define a scope, outside of which an object will automatically be disposed.
            </remarks>
        </member>
        <member name="M:Vector.Diagnostics.Response.#ctor(Vector.Diagnostics.IEcu,System.UInt32,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Response"/> class.
            </summary>
            <param name="assignedEcu">The <see cref="P:Vector.Diagnostics.Response.Ecu"/> from that this response was received.</param>
            <param name="hResponse">The response handle.</param>
            <param name="isPositive">True, if the response is a positive response.</param>
        </member>
        <member name="M:Vector.Diagnostics.Response.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.Response"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Response.Dispose">
            <summary>
            Free resources allocated for this response.
            Call this method after the response has been handled and won't be accessed any more.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Response.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.Response.Vector#Diagnostics#IParameterParent#GetParent">
            <summary>
            Returns always <c>null</c>, because a message is always the root object of parameters.
            </summary>
            <returns>Returns always <c>null</c>.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.Response.Vector#Diagnostics#IParameterParent#HasParent">
            <summary>
            Returns always <c>false</c>, because a message is always the root object of parameters.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Response.Vector#Diagnostics#IParameterParent#Update">
            <summary>
            Updates the current parameters collection (message or struct parameter).
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Response.Vector#Diagnostics#IParameterParent#UpdateParentParameterCollection">
            <summary>
            Updates the internal parameters collection.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Response.GetParameter(System.String)">
            <summary>
            Get a specific parameter from the response message.
            </summary>
            <param name="qualifier">The qualifier of the parameter.</param>
            <returns>The parameter object if it exists, null otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Response.Vector#Diagnostics#IMessage#TryGetParameterCount(System.UInt32@)">
            <summary>
            Gets the (root/top level) parameter count of a message.
            </summary>
            <param name="outParamCount">The parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
        </member>
        <member name="M:Vector.Diagnostics.Response.Vector#Diagnostics#IMessage#GetHandle">
            <summary>
            Gets the handle.
            </summary>
            <returns>The handle of the current instance.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.Response.Vector#Diagnostics#IMessage#MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagateToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="P:Vector.Diagnostics.Response.IsPositive">
            <summary>
            Indicates whether the response is a positive or negative response.
            </summary>
            <value>True, if the response is a positive response. Otherwise, false.</value>
        </member>
        <member name="P:Vector.Diagnostics.Response.Status">
            <summary>
            Returns a response's detailed status.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Response.Parameters">
            <summary>
            Read access to the (top level) parameter collection of that message.
            </summary>
            <value>List of parameters of the response message.</value>
        </member>
        <member name="P:Vector.Diagnostics.Response.Pdu">
            <summary>
            The message PDU.
            </summary>
            <value>The PDU of the message as raw bytes.</value>
        </member>
        <member name="P:Vector.Diagnostics.Response.Vector#Diagnostics#IMessage#Qualifier">
            <summary>
            The service qualifier (unique name).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Response.ResponseQualifier">
            <summary>
            The response primitive's identifier string (unique qualifier / shortname).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Response.Ecu">
            <summary>
            Gets the <see cref="P:Vector.Diagnostics.Response.Ecu"/> instance to that this instance belongs.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.Response.Vector#Diagnostics#IMessage#IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Vector.Diagnostics.ResponseImpl.mIsPositive">
            <summary>
            A flag indicating whether the response was positive.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ResponseImpl.mResponseStatus">
            <summary>
            A more detailed response status.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ResponseImpl.mDisposedEventHandler">
            <summary>
            Helper that holds a weak reference to this instance and is registered as listener for native events.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.ResponseImpl.mDisposed">
            <summary>
            Flag to track the dispose state.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.#ctor(Vector.Diagnostics.IEcu,System.UInt32,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Response"/> class.
            </summary>
            <param name="assignedEcu">The <see cref="P:Vector.Diagnostics.ResponseImpl.Ecu"/> from that this response was received.</param>
            <param name="hResponse">The response handle.</param>
            <param name="isPositive">True, if the response is a positive response.</param>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.ResponseImpl"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.Dispose">
            <summary>
            Free resources allocated for this response.
            Call this method after the response has been handled and won't be accessed any more.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.GetParent">
            <summary>
            Returns always <c>null</c>, because a message is always the root object of parameters.
            </summary>
            <returns>Returns always <c>null</c>.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.HasParent">
            <summary>
            Returns always <c>false</c>, because a message is always the root object of parameters.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.Update">
            <summary>
            Updates the current parameters collection (message or struct parameter).
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.UpdateParentParameterCollection">
            <summary>
            Updates the internal parameters collection.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.ThrowObjectDisposedExceptionWhenAlreadyDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException" /> when the current instance is already disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Throws an <see cref="T:System.ObjectDisposedException" /> when the instance was disposed.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.GetParameter(System.String)">
            <summary>
            Get a specific parameter from the response message.
            </summary>
            <param name="qualifier">The qualifier of the parameter.</param>
            <returns>The parameter object if it exists, null otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.TryGetParameterCount(System.UInt32@)">
            <summary>
            Gets the (root/top level) parameter count of a message.
            </summary>
            <param name="outParamCount">The parameter count [out].</param>
            <returns><c>true</c> when the operation was successfully; otherwise <c>false</c></returns>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.GetHandle">
            <summary>
            Gets the handle.
            </summary>
            <returns>The handle of the current instance.</returns>
            <remarks>Not part of the official VDS interface.</remarks>
        </member>
        <member name="M:Vector.Diagnostics.ResponseImpl.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagateToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.IsPositive">
            <summary>
            Indicates whether the response is a positive or negative response.
            </summary>
            <value>True, if the response is a positive response. Otherwise, false.</value>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.Status">
            <summary>
            Returns a response's detailed status.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.Parameters">
            <summary>
            Read access to the (top level) parameter collection of that message.
            </summary>
            <value>List of parameters of the response message.</value>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.Pdu">
            <summary>
            The message PDU.
            </summary>
            <value>The PDU of the message as raw bytes.</value>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.Qualifier">
            <summary>
            The service qualifier (unique name).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.ResponseQualifier">
            <summary>
            The response primitive's identifier string (unique qualifier / shortname).
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.Ecu">
            <summary>
            Gets the <see cref="P:Vector.Diagnostics.ResponseImpl.Ecu"/> instance to that this instance belongs.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.ResponseImpl.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Vector.Diagnostics.SecurityAccessResult">
            <summary>
            Contains the result of unlock an ECU using <see cref="M:Vector.Diagnostics.Ecu.Unlock(System.Byte)"/> and <see cref="M:Vector.Diagnostics.Ecu.Unlock(System.Byte,System.String)"/>.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SecurityAccessResult.NoResult">
            <summary>
            The current state of unlock an ECU is unknown (initial state).
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SecurityAccessResult.Success">
            <summary>
            Unlock an ECU in the specified level was successful.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SecurityAccessResult.InvalidSeedKeyDll">
            <summary>
            The seed and key DLL was not configured or could not be used.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SecurityAccessResult.CommunicationError">
            <summary>
            A communication error occurred when unlocking the ECU.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SecurityAccessResult.NegativeResponse">
            <summary>
            The ECU to be unlocked responds with a negative response code (NRC).
            Check trace window for further details.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SecurityAccessResult.Failure">
            <summary>
            Unlocking the ECU failed because of an unspecified error.
            See write window or log file for further details.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.SendStatus">
            <summary>
            The request transmission result states.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SendStatus.Ok">
            <summary>
            Sending data to the ECU succeeded.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SendStatus.InvalidRequest">
            <summary>
            Invalid request specified.
            </summary>
            <remarks>No response is available.</remarks>
        </member>
        <member name="F:Vector.Diagnostics.SendStatus.CommunicationError">
            <summary>
            Communication error occurred (either sending the request or receiving the response).
            </summary>
            <remarks>No response is available.</remarks>
        </member>
        <member name="F:Vector.Diagnostics.SendStatus.FailedResponseParse">
            <summary>
            One (or more) responses received that do not match the definitions.
            </summary>
            <remarks>No response is available.</remarks>
        </member>
        <member name="F:Vector.Diagnostics.SendStatus.UnexpectedResponse">
            <summary>
            One or more responses received while no or just a single response was expected.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SendStatus.AsynchronousTransactionPending">
            <summary>
            Needed for asynchronous communication: No response information available yet.
            I.e. (final) response not received and also no error detected by now.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.WaitResult">
            <summary>
            The result codes of a waiting operation.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.WaitResult.Aborted">
            <summary>
            Waiting operation aborted, i.e. SendResult is not available.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.WaitResult.Timeout">
            <summary>
            Timeout occurred during wait operation.
            In TimeOut case no responses were received, i.e. the transaction is not completed yet 
            and therefore the SendResult object does not contain any responses.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.WaitResult.Success">
            <summary>
            Wait operation was successful, i.e. the transaction is completed and
            the SendResult object contains the responses.
            </summary>
        </member>
        <member name="T:Vector.Diagnostics.SendResult">
            <summary>
            The result of the service communication transaction.
            Contains the transaction status (e.g. error state) and the response object if available.
            </summary>
            <remarks>
            To assure that all (of the possibly multiple) responses of a service communication
            transaction are cleared, call the Dispose() method of the SendResult object when the responses
            will not be accessed any more.
            </remarks>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.#ctor(Vector.Diagnostics.IEcu,System.UInt32,System.UInt32[],Vector.Diagnostics.SendStatus,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.SendResult"/> class.
            </summary>
            <param name="parentEcu">The destination <see cref="T:Vector.Diagnostics.Ecu"/> that owns the request of this instance.</param>
            <param name="hResponse">The handle of the response.</param>
            <param name="hResponses">The handle of the responses.</param>
            <param name="sendStatus">The send status.</param>
            <param name="isPositive">The response type (true, false or null).</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.#ctor(Vector.Diagnostics.IEcu,System.UInt32,Vector.Diagnostics.SendStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.SendResult"/> class for asynchronous sending of requests.
            </summary>
            <param name="parentEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> that owns the request of this instance.</param>
            <param name="transactionHandle">The transaction handle.</param>
            <param name="sendStatus">The send status of the transaction.</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.#ctor(Vector.Diagnostics.IEcu)">
            <summary>
            Initializes the common parts and prevents a default instance of the <see cref="T:Vector.Diagnostics.SendResult"/> class from being created.
            </summary>
            <param name="parentEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> that owns the request of this instance.</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.SendResult"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.Dispose">
            <summary>
            Free resources allocated for this send result.
            Disposes all 'send result' resources (i.e. single / multiple responses).
            Call this method after the send result, i.e. response(s), won't be used any more.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vector.Diagnostics.SendResult.Status">
            <summary>
            Gets the status of the request message transmission.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.SendResult.Response">
            <summary>
            The response to the sent request message (if available; null otherwise).
            In case of multiple responses are to be expected or possible for a certain request (e.g. multiple responses or
            functional requests) then the Responses property will provide the list of responses (i.e. this Response property
            will return null).
            </summary>
            <remarks>
            The response message might be null if an error occurred.
            Please check the Status-property for the <see cref="T:Vector.Diagnostics.SendStatus"/> value "OK" before accessing the response message.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.SendResult.Responses">
            <summary>
            Gets the list of response messages from the ECU.
            </summary>
            <remarks>
            In the special case that several responses may be received for a single request sent
            (e.g. GM fault memory access with multiple responses or the responses belonging to a functional request)
            the response collection can be accessed using this 'Responses' container property.
            Notice that the 'Responses' property has always to be used for multiple response services, even if only one
            response is received; e.g. if there is only one DTC or if only one ECU did respond to a functional request.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.SendResult.IsTransactionCompleted">
            <summary>
            Gets a value indicating whether this transaction was completed.
            </summary>
            <value>
            <c>true</c> if this transaction was completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.SendResult.TransactionHandle">
            <summary>
            Gets the transaction handle.
            </summary>
            <value>
            The transaction handle.
            </value>
            <remarks>The value zero has a special meaning: transaction completed.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.SendResult.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.WaitAll(System.Int32,Vector.Diagnostics.SendResult[])">
            <summary>
            Either waits for all results to complete or a timeout to occur.
            </summary>
            <param name="timeout">
            The timeout in milliseconds. 
            In case timeout is &lt; 0 no timeout shall occur.
            In case timeout == 0 the method shall return immediately, 
            indicating either Success in case the result was already available when the method was called 
            or Aborted/Timeout otherwise.
            </param>
            <param name="results">The results that must complete.</param>
            <returns>A WaitResult value indicating the exact outcome of the waiting operation.</returns>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.WaitAll(Vector.Diagnostics.SendResult[])">
            <summary>
            Waits for all results to complete.
            </summary>
            <param name="results">The results that must complete.</param>
            <returns>A WaitResult value indicating the exact outcome of the waiting operation.</returns>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.WaitAny(System.Int32,System.Int32@,Vector.Diagnostics.SendResult[])">
            <summary>
            Either waits for one of the results to complete or a timeout to occur.
            </summary>
            <param name="timeout">
            The timeout in milliseconds. 
            In case timeout is &lt; 0 no timeout shall occur.
            In case timeout == 0 the method shall return immediately, 
            indicating either Success in case the result was already available when the method was called
            or Aborted/Timeout otherwise.
            </param>
            <param name="index">The index of the result that completed.</param>
            <param name="results">The results that must complete.</param>
            <returns>A WaitResult value indicating the exact outcome of the waiting operation.</returns>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.WaitAny(System.Int32@,Vector.Diagnostics.SendResult[])">
            <summary>
            Waits for one of the results to complete.
            </summary>
            <param name="index">The index of the result that completed.</param>
            <param name="results">The results that must complete.</param>
            <returns>A WaitResult value indicating the exact outcome of the waiting operation.</returns>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.GetResponses">
            <summary>
            Gets the available responses.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <returns>A list of available response objects.</returns>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagateToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.System#Collections#Generic#IEnumerable{Vector#Diagnostics#Response}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Vector.Diagnostics.SendResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="F:Vector.Diagnostics.SendResultImpl.TransactionCompleted">
            <summary>
            Special value for transaction completed.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.SendResultImpl.mTransactionHandle">
            <summary>
            Wait handle for asynchronous requests. Important: 0  <see cref="F:Vector.Diagnostics.SendResultImpl.TransactionCompleted"/> means transaction completed.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.#ctor(Vector.Diagnostics.IEcu,System.UInt32,System.UInt32[],Vector.Diagnostics.SendStatus,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.SendResult"/> class.
            </summary>
            <param name="parentEcu">The destination <see cref="T:Vector.Diagnostics.Ecu"/> that owns the request of this instance.</param>
            <param name="hResponse">The handle of the response.</param>
            <param name="hResponses">The handle of the responses.</param>
            <param name="sendStatus">The send status.</param>
            <param name="isPositive">The response type (true, false or null).</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.#ctor(Vector.Diagnostics.IEcu,System.UInt32,Vector.Diagnostics.SendStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.SendResult"/> class for asynchronous sending of requests.
            </summary>
            <param name="parentEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> that owns the request of this instance.</param>
            <param name="transactionHandle">The transaction handle.</param>
            <param name="sendStatus">The send status of the transaction.</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.#ctor(Vector.Diagnostics.IEcu)">
            <summary>
            Initializes the common parts and prevents a default instance of the <see cref="T:Vector.Diagnostics.SendResult"/> class from being created.
            </summary>
            <param name="parentEcu">The <see cref="T:Vector.Diagnostics.Ecu"/> that owns the request of this instance.</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.Initialize(System.UInt32,System.Collections.Generic.IEnumerable{System.UInt32},Vector.Diagnostics.SendStatus,System.Nullable{System.Boolean})">
            <summary>
            Initializes the members of a <see cref="T:Vector.Diagnostics.SendResult"/> object.
            </summary>
            <param name="iResponseHandle">The handle of the response.</param>
            <param name="iResponseHandles">The handle of the responses.</param>
            <param name="sendStatus">The send status.</param>
            <param name="isPositive">The response type (true, false or null).</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Vector.Diagnostics.SendResultImpl"/> class.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.Dispose">
            <summary>
            Free resources allocated for this send result.
            Disposes all 'send result' resources (i.e. single / multiple responses).
            Call this method after the send result, i.e. response(s), won't be used any more.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.WaitInternal(System.Boolean,System.Int32,System.Int32@,Vector.Diagnostics.SendResultImpl[])">
            <summary>
            Internal wait that implements both WaitAll and WaitAny.
            Because of a CANoe restriction WaitForMultipleObjects cannot be used, this method
            implements busy waiting by using a native Wait implementation provided by the environment.
            </summary>
            <param name="waitAll">True if all results must complete, otherwise false.</param>
            <param name="timeout">A timer in [ms] after which the wait operation will return.</param>
            <param name="results">The results to wait for.</param>
            <param name="index">For a WaitAny operation the index of the result that completed.</param>
            <returns>A WaitResult value indicating the exact outcome of the waiting operation.</returns>
        </member>
        <member name="P:Vector.Diagnostics.SendResultImpl.Status">
            <summary>
            Gets the status of the request message transmission.
            </summary>
        </member>
        <member name="P:Vector.Diagnostics.SendResultImpl.Response">
            <summary>
            The response to the sent request message (if available; null otherwise).
            In case of multiple responses are to be expected or possible for a certain request (e.g. multiple responses or
            functional requests) then the Responses property will provide the list of responses (i.e. this Response property
            will return null).
            </summary>
            <remarks>
            The response message might be null if an error occurred.
            Please check the Status-property for the <see cref="T:Vector.Diagnostics.SendStatus"/> value "OK" before accessing the response message.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.SendResultImpl.Responses">
            <summary>
            Gets the list of response messages from the ECU.
            </summary>
            <remarks>
            In the special case that several responses may be received for a single request sent
            (e.g. GM fault memory access with multiple responses or the responses belonging to a functional request)
            the response collection can be accessed using this 'Responses' container property.
            Notice that the 'Responses' property has always to be used for multiple response services, even if only one
            response is received; e.g. if there is only one DTC or if only one ECU did respond to a functional request.
            </remarks>
        </member>
        <member name="P:Vector.Diagnostics.SendResultImpl.TransactionHandle">
            <summary>
            Gets the transaction handle.
            </summary>
            <value>
            The transaction handle.
            </value>
            <remarks>The value zero has a special meaning: transaction completed.</remarks>
        </member>
        <member name="P:Vector.Diagnostics.SendResultImpl.IsTransactionCompleted">
            <summary>
            Gets a value indicating whether this transaction was completed.
            </summary>
            <value>
            <c>true</c> if this transaction was completed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Vector.Diagnostics.SendResultImpl.IsDisposed">
            <summary>
            Gets a value indicating whether the current instance was disposed.
            </summary>
            <value>
              <c>true</c> if the current instance was disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.GetResponses">
            <summary>
            Gets the available responses.
            </summary>
            <remarks>Not part of the official VDS interface.</remarks>
            <returns>A list of available response objects.</returns>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.MarkAsDisposed(System.Boolean)">
            <summary>
            Marks the instance as disposed.
            </summary>
            <param name="propagadeToChildNodes">if set to <c>true</c> the child nodes are also maked as disposed.</param>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.System#Collections#Generic#IEnumerable{Vector#Diagnostics#Response}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Vector.Diagnostics.SendResultImpl.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Vector.Diagnostics.Value">
            <summary>
            To access a parameter's value.
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.Value.#ctor(Vector.Diagnostics.IParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Value"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Vector.Diagnostics.Value.ToString">
            <summary>
            Get the parameter value as string.
            </summary>
            <returns>parameter value as string.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not a string.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Value.ToDouble">
            <summary>
            Gets the parameter value as <c>double</c>.
            </summary>
            <returns>parameter value as <c>double</c>.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not a <c>double</c>.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Value.ToInt32">
            <summary>
            Gets the parameter value as <c>Int32</c>.
            </summary>
            <returns><c>Int32</c> parameter value.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not an integer.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Value.ToUInt32">
            <summary>
            Gets the parameter value as <c>UInt32</c>.
            </summary>
            <returns><c>UInt32</c> parameter value.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not an unsigned integer.</exception>
        </member>
        <member name="M:Vector.Diagnostics.Value.GetBytes">
            <summary>
            Gets the parameter value as <c>byte[]</c>.
            </summary>
            <returns>Parameter value as byte[].</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not a byte array.</exception>    
        </member>
        <member name="M:Vector.Diagnostics.Value.Set(System.String)">
            <summary>
            Set String parameter value.
            </summary>
            <param name="stringValue">String parameter value.</param>
            <remarks>Ensure that the data type of the parameter is a string.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Value.Set(System.Double)">
            <summary>
            Set Double parameter value.
            </summary>
            <param name="doubleValue">Double parameter value.</param>
            <remarks>Ensure that the data type of the parameter is 'double'.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Value.Set(System.Int32)">
            <summary>
            Set Int32 parameter value.
            </summary>
            <param name="intValue">Int32 parameter value.</param>
            <remarks>Ensure that the data type of the parameter is 'integer'.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Value.Set(System.UInt32)">
            <summary>
            Set UInt32 parameter value.
            </summary>
            <param name="uintValue">UInt32 parameter value.</param>
            <remarks>Ensure that the data type of the parameter is 'unsigned integer'.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.Value.Set(System.Byte[])">
            <summary>
            Set raw parameter value.
            </summary>
            <param name="valueBytes">byte[] parameter value.</param>
            <remarks>Ensure that the data type of the parameter is a byte array.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.#ctor(Vector.Diagnostics.IParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Diagnostics.Value"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.ToString">
            <summary>
            Get the parameter value as string.
            </summary>
            <returns>parameter value as string.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not a string.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.ToDouble">
            <summary>
            Gets the parameter value as <c>double</c>.
            </summary>
            <returns>parameter value as <c>double</c>.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not a <c>double</c>.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.ToInt32">
            <summary>
            Gets the parameter value as <c>Int32</c>.
            </summary>
            <returns><c>Int32</c> parameter value.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not an integer.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.ToUInt32">
            <summary>
            Gets the parameter value as <c>UInt32</c>.
            </summary>
            <returns><c>UInt32</c> parameter value.</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not an unsigned integer.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.GetBytes">
            <summary>
            Gets the parameter value as <c>byte[]</c>.
            </summary>
            <returns>Parameter value as byte[].</returns>
            <exception cref="T:Vector.Diagnostics.DiagnosticException"><see cref="T:Vector.Diagnostics.DiagnosticException"/> is thrown if the parameter data type is not a byte array.</exception>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.Set(System.String)">
            <summary>
            Set String parameter value.
            </summary>
            <param name="stringValue">String parameter value.</param>
            <remarks>Ensure that the data type of the parameter is a string.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.Set(System.Double)">
            <summary>
            Set Double parameter value.
            </summary>
            <param name="doubleValue">Double parameter value.</param>
            <remarks>Ensure that the data type of the parameter is 'double'.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.Set(System.Int32)">
            <summary>
            Set Int32 parameter value.
            </summary>
            <param name="intValue">Int32 parameter value.</param>
            <remarks>Ensure that the data type of the parameter is 'integer'.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.Set(System.UInt32)">
            <summary>
            Set UInt32 parameter value.
            </summary>
            <param name="uintValue">UInt32 parameter value.</param>
            <remarks>Ensure that the data type of the parameter is 'unsigned integer'.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.Set(System.Byte[])">
            <summary>
            Set raw parameter value.
            </summary>
            <param name="valueBytes">byte[] parameter value.</param>
            <remarks>Ensure that the data type of the parameter is a byte array.</remarks>
            <returns>True if value has been set, false otherwise.</returns>
        </member>
        <member name="M:Vector.Diagnostics.ValueImpl.GetParameterHandle">
            <summary>
            Gets the parameter handle.
            </summary>
            <returns>The parameter handle.</returns>
        </member>
        <member name="T:Vector.Diagnostics.VariantSelectionResult">
            <summary>
            The result of a call to <see cref="M:Vector.Diagnostics.Ecu.SelectVariant(System.String)"/>.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.VariantSelectionResult.NotInitialized">
            <summary>
            In case no result was assigned yet.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.VariantSelectionResult.Success">
            <summary>
            The variant was selected successfully.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.VariantSelectionResult.VariantDoesNotExist">
            <summary>
            The variant does not exist within the diagnostic description.
            </summary>
        </member>
        <member name="F:Vector.Diagnostics.VariantSelectionResult.VariantSelectionNotPossible">
            <summary>
            E.g. CANoe restriction
            </summary>
        </member>
        <member name="M:Vector.Diagnostics.WeakReferenceWrapper`1.Lock">
            <summary>
            Returns the target instance or null when the instance was already garbage collected.
            </summary>
            <returns>The target instance or null when the instance was already garbage collected.</returns>
        </member>
    </members>
</doc>
