<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vector.CANoe.TFS.ITE</name>
    </assembly>
    <members>
        <member name="T:Vector.CANoe.TFS.Verdict">
            <summary>
            Verdict of a test module: Passed, Failed
            Verdict of a test unit: Passed, Failed, None, Inconclusive, ErrorInTestSystem
            </summary>
        </member>
        <member name="F:Vector.CANoe.TFS.Verdict.Passed">
            <summary>
            Verdict 'Passed': The test was successfully.
            </summary>
        </member>
        <member name="F:Vector.CANoe.TFS.Verdict.Failed">
            <summary>
            Verdict 'Failed': The test of the SUT fails.
            </summary>
        </member>
        <member name="F:Vector.CANoe.TFS.Verdict.None">
            <summary>
            Verdict 'None': Used as start verdict of a test case.
            </summary>
        </member>
        <member name="F:Vector.CANoe.TFS.Verdict.Inconclusive">
            <summary>
            Verdict 'Inconclusive': Test could not be evaluated or test was stopped.
            </summary>
        </member>
        <member name="F:Vector.CANoe.TFS.Verdict.ErrorInTestSystem">
            <summary>
            Verdict 'ErrorInTestSystem': Problems with the test setup.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.CheckType">
            <summary>
            The type of a check. The default type is Condition.
            </summary>
            <remarks>
            If a Constraint or Condition is injured, the verdict of the test module/test unit is failed.
            A Observation does not influence the verdict of a test module/test unit.
            </remarks>
            <see cref="T:Vector.CANoe.TFS.Check"/>
            <see cref="T:Vector.CANoe.TFS.ValueCheck`1"/>
        </member>
        <member name="F:Vector.CANoe.TFS.CheckType.Constraint">
            <summary>
            Constraints are used to monitor the test setup and the test environment.
            </summary>
        </member>
        <member name="F:Vector.CANoe.TFS.CheckType.Condition">
            <summary>
            Conditions are used to check the system to be tested during the test procedure.
            </summary>
        </member>
        <member name="F:Vector.CANoe.TFS.CheckType.Observation">
            <summary>
            Observations are used to check conditions or constraints that should not lead to a
            fail of the test module/test unit on violation.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.TestCaseAttribute">
            <summary>
            Mark a method with this attribute, and it will be handled
            as a test case.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="TestCase1" />
            </example>
            <remarks>
            A test case can have some parameters.
            </remarks>
        </member>
        <member name="M:Vector.CANoe.TFS.TestCaseAttribute.#ctor(System.String,System.String)">
            <summary>
            The constructor takes the title and description of a test case.
            </summary>
            <param name="title"> The title of a test case is written to the report. The test execution dialog shows the title of a test case. </param>
            <param name="description"> The description of a test case is written to the report. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="TestCase1" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.TestCaseAttribute.#ctor(System.String)">
            <summary>
            The constructor takes the title of a test case. The description can be set inside of a test case by the Report API.
            </summary>
            <seealso cref="T:Vector.CANoe.TFS.Report"/>
            <param name="title"> The title of a test case is written to the report. The test execution dialog shows the title of a test case. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="TestCase2" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.TestCaseAttribute.#ctor">
            <summary>
            Standard constructor. The title and description of a test case
            can be set inside of a test case by the Report API.
            </summary>
            <seealso cref="T:Vector.CANoe.TFS.Report"/>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="TestCase3" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.TestCaseAttribute.OnEntry(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="eventArgs">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestCaseAttribute.OnException(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="eventArgs">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestCaseAttribute.OnExit(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="args">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestCaseAttribute.CompileTimeInitialize(System.Reflection.MethodBase)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="method"> Internal parameter </param>
        </member>
        <member name="T:Vector.CANoe.TFS.TestFunctionAttribute">
            <summary>
            Mark a method with this attribute, and it will be handled
            as a test function.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="TestFunction" />
            </example>
            <remarks>
            A test case can have some parameters and a return value.
            </remarks>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFunctionAttribute.#ctor(System.String)">
            <summary>
            The constructor may take the title of a test function.
            </summary>
            <param name="title"> The title of a test case is written to the report. The test execution dialog shows the title of a test case. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="TestFunction" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFunctionAttribute.#ctor">
            <summary>
            Standard constructor. 
            </summary> 
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="TestFunction" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFunctionAttribute.OnEntry(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="eventArgs">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFunctionAttribute.OnException(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="eventArgs">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFunctionAttribute.OnExit(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="args">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Vector.CANoe.TFS.Report">
            <summary>
            Reporting functionality of a test unit.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestSequenceTitle(System.String)">
            <summary>
            The title of a test sequence is written into the test report.
            </summary>
            <param name="title">Title of the test sequence</param>
            <remarks>
            Can be used within test sequences.
            </remarks>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestFunctionTitle(System.String)">
            <summary>
            The title of a test function is written into the test report.
            </summary>
            <param name="title">Title of the test function</param>
            <remarks>
            Can be used within test functions instead of the title
            of the TestFunction attribute
            </remarks>
            <seealso cref="T:Vector.CANoe.TFS.TestFunctionAttribute"/>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseTitle(System.String)">
            <summary>
            The title of a test case is written into the test report.
            </summary>
            <param name="title">Title of the test case</param>
            <remarks>
            Can be used within test cases instead of the title
            of the TestCase attribute.
            </remarks>
            <seealso cref="T:Vector.CANoe.TFS.TestCaseAttribute"/>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseDescription(System.String)">
            <summary>
            The description of a test case is written into the test report.
            </summary>
            <param name="description">Description of the test case</param>
            <remarks>
            Can be used instead of the description 
            of the TestCase attribute.
            </remarks>
            <seealso cref="T:Vector.CANoe.TFS.TestCaseAttribute"/>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStep(System.String,System.String,System.Int32)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
            <param name="level">Report Level</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepPass(System.String,System.String,System.Int32)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as passed.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
            <param name="level">Report Level</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepFail(System.String,System.String,System.Int32)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as failed and influences the resulting verdict.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
            <param name="level">Report Level</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepWarning(System.String,System.String,System.Int32)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as warning.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
            <param name="level">Report Level</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStep(System.String,System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The default report level is 0.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepPass(System.String,System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as passed.
            The default report level is 0.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepFail(System.String,System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as failed.
            The default report level is 0.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepWarning(System.String,System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as warning.
            The default report level is 0.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStep(System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The default report level is 0.
            </summary>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepPass(System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as passed.
            The default report level is 0.
            </summary>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepFail(System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as failed.
            The default report level is 0.
            </summary>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepWarning(System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as warning.
            The default report level is 0.
            </summary>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.SetEngineerInfo(System.String,System.String)">
            <summary>
            With this function, information pairs of name and description can be taken up
            into the report in the area TestEngineer. The area must not be created; it is 
            automatically available in the report.
            </summary>
            <param name="name"> Name of the engineer information </param>
            <param name="description"> Description of the engineer information </param>
            <example>
            This example demonstrates the usage of some reporting functions
            <code source="..\Build Documentation\TFSExamples.cs" region="ReportingDemo" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.AddExternalRef(System.String,System.String,System.String,System.String)">
            <summary>
            Function adds an external reference to the report.
            Can be used in test case or in main function.
            </summary>
            <param name="type"> may be "url" for any kinds of URLs, "doors" for links to DOORS, "easee" for links to eASEE </param>
            <param name="title"> Text with which the link generated in the test report is displayed. If not indicated the URL indicated in ref is used </param>
            <param name="refTarget"> The URL of the external resource, which is referenced. </param>
            <param name="owner"> Optional, otherwise "". This attribute is intended to be used by applications which maintain links to external resources automatically so they can identify their external reference elements. E.g. the Test Automation Editor DOORS Extension marks its DOORS references with a specific value of this attribute. </param>
            <example>
            This example demonstrates the usage of the function in a test case.
            <code source="..\Build Documentation\TFSExamples.cs" region="AddExternalRef" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.SetSetupInfo(System.String,System.String)">
            <summary>
            With this function, information pairs of name and description can be taken up
            into the report in the area TestSetUp. The area must not be created; it is 
            automatically available in the report. 
            </summary>
            <param name="name"> Name of the Setup information </param>
            <param name="description"> Description of the Setup information </param>
            <example>
            This example demonstrates the usage of some reporting functions
            <code source="..\Build Documentation\TFSExamples.cs" region="ReportingDemo" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.SetSUTInfo(System.String,System.String)">
            <summary>
            With this function, information pairs of name and description can be taken up
            into the report in the area device to be tested (SUT). The area must not be created; it is 
            automatically available in the report. 
            </summary>
            <param name="name"> Name of the SUT information </param>
            <param name="description"> Description of the SUT information </param>
            <example>
            This example demonstrates the usage of some reporting functions
            <code source="..\Build Documentation\TFSExamples.cs" region="ReportingDemo" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseComment(System.String)">
            <summary>
            With this function within a test case a commentary can be inserted into 
            the report. This comment can relate to a message that can also be 
            output in the report. The verdict of the test case is not be influenced.
            </summary>
            <param name="comment">the comment to be inserted</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.AddExtendedInfo(System.String,System.String)">
            <summary>
            Function takes over information into the protocol that is not subject to processing by CANoe.
            Can be used in test cases and in main.
            </summary>
            <param name="type">may be “html” or “text”. Different types are ignored.</param>
            <param name="text">must be XML or XHTML if the type is “html”</param>
            <example>
            This example demonstrates the usage of this function
            <code source="..\Build Documentation\TFSExamples.cs" region="AddExtendedInfo" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.AddImage(System.String,System.String,System.String,System.String)">
            <summary>
            Function takes over the reference to a file that contains an image into the protocol. 
            Can be used in testcases and in main.
            </summary>
            <param name="description">Description text for the picture</param>
            <param name="filename">Name of the picture file, possibly with path specification</param>
            <param name="width">Optional parameter. Can be provided in pixels (like "100px" or just "100") or in percent of the containing element (like "20%")</param>
            <param name="height">Optional parameter. Can be provided in pixels (like "100px" or just "100") or in percent of the containing element (like "20%")</param>
            <example>
            This example demonstrates the usage of some reporting functions
            <code source="..\Build Documentation\TFSExamples.cs" region="AddImage" />
            </example>
        </member>
        <member name="T:Vector.CANoe.TFS.Report.MiscInfoList">
            <summary>
            A list of key value pairs, used by AddMiscInfoBlock.
            Contains the information of the information block.
            </summary>
            <example>
            This example demonstrates the usage this class
            <code source="..\Build Documentation\TFSExamples.cs" region="AddMiscInfoBlock" />
            </example>
        </member>
        <member name="P:Vector.CANoe.TFS.Report.MiscInfoList.Values">
            <summary>
            Key value pair list.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.MiscInfoList.Add(System.String,System.String)">
            <summary>
            Add an entry to the info list
            </summary>
            <param name="key">identifier</param>
            <param name="value">value</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.AddMiscInfoBlock(System.String,Vector.CANoe.TFS.Report.MiscInfoList)">
            <summary>
            Function generates a new information block for additional information pairs in the report. 
            </summary>
            <param name="title">Title of the information block</param>
            <param name="miscInfoList">List of key value pairs. MiscInfoList is a subclass of Report. It contains one function: Add(String key, String value)</param>
            <example>
            This example demonstrates the usage of this function
            <code source="..\Build Documentation\TFSExamples.cs" region="AddMiscInfoBlock" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.AddWindowCapture(System.String,System.String,System.String,System.String)">
            <summary>
            Function creates a screen capture of a Graphics, Statistics, Data, Trace or Panel window. The test case verdict is not affected. Window capture is not allowed in standalone mode. Errors on creating the window capture are reported as a warning in the test report.
            </summary>
            <param name="window">Name of the window to be captured (corresponds to the name of the corresponding node in the test setup)</param>
            <param name="data">Optional, otherwise "". Applies only for the following windows:
            <br />
            <br />Graphics Window
            <br />List of signal, variable or diagnostic parameter names to be enabled for the sceen capture. If no name is defined, all currently visible curves are captured. Names must be separated with a semicolon. The following syntax is supported:
            <br />Signals: [network::][node::][message::]SignalName
            <br />Environment Variables: EnvVarName
            <br />System Variables: sysvar::Namespace::SysVarName
            <br />Diagnostic Parameter: [ecu::][service::][(reqest | response)::]ParameterName
            <br />
            <br />It is possible to provide the name only. The first matching signal, variable or diagnostic parameter will be used. The test case verdict is not affected. Errors on creating the window capture are reported as a warning in the test report. Tip: Please refer to the "More object info" column in the Graphics Window to determine the full name.
            <br />
            <br />Statistics Window
            <br />Defines the tab page of the Statistics Window. If no page is not defined, the currently active page is captured.
            </param>
            <param name="title">Text heading that precedes the captured window image in the test report. </param>
            <param name="file">Optional, otherwise "". Name of the file into which the captured image is to be saved. If you do not specify a name, an automatic filename is generated. Existing files with the same name will be overwritten without confirmation.</param>
            <example>
            This example demonstrates the usage of some reporting functions
            <code source="..\Build Documentation\TFSExamples.cs" region="AddWindowCapture" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.FileName(System.String)">
            <summary>
            Function sets the name of the report file using the user interface. 
            To be effective, the function must be called in a test module/test unit before every other CAPL function that relates to the report and executed before every test case. 
            If the report file name is modified, it is not be possible to open it via the CANoe user interface (test run dialog).
            Note: To be effective this function must be called before any other reporting or test function.
            </summary>
            <param name="filename">Name of the output file, possibly with path. Without path specification, the directory is used in which the configuration file is found. The extension .xml, .html, or .vtestreport is added automatically.</param>
            <example>
            This example demonstrates the usage of some reporting functions
            <code source="..\Build Documentation\TFSExamples.cs" region="ReportingDemo" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseMeasuredValue(System.String,System.Int32)">
            <summary>
            Adds an entry in the measured values table for the specified parameter.
            </summary>
            <param name="semanticName">Name of the measured value</param>
            <param name="value">Measured value</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseMeasuredValue(System.String,System.Double)">
            <summary>
            Adds an entry in the measured values table for the specified parameter.
            </summary>
            <param name="semanticName">Name of the measured value</param>
            <param name="value">Measured value</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseMeasuredValue(System.String,System.String)">
            <summary>
            Adds an entry in the measured values table for the specified parameter.
            </summary>
            <param name="semanticName">Name of the measured value</param>
            <param name="value">Measured value</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseMeasuredValue``1(System.String)">
            <summary>
            Adds an entry in the measured values table for the specified parameter.
            </summary>
            <typeparam name="T">Signal, environment variable or system variable</typeparam>
            <param name="semanticName">Name of the measured value</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseMeasuredValue(System.String,System.Int32,System.String)">
            <summary>
            Adds an entry in the measured values table for the specified parameter.
            </summary>
            <param name="semanticName">Name of the measured value</param>
            <param name="value">Measured value</param>
            <param name="unit">Unit of the measured value</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseMeasuredValue(System.String,System.Double,System.String)">
            <summary>
            Adds an entry in the measured values table for the specified parameter.
            </summary>
            <param name="semanticName">Name of the measured value</param>
            <param name="value">Measured value</param>
            <param name="unit">Unit of the measured value</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseMeasuredValue(System.String,System.String,System.String)">
            <summary>
            Adds an entry in the measured values table for the specified parameter.
            </summary>
            <param name="semanticName">Name of the measured value</param>
            <param name="value">Measured value</param>
            <param name="unit">Unit of the measured value</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseMeasuredValue``1(System.String,System.String)">
            <summary>
            Adds an entry in the measured values table for the specified parameter.
            </summary>
            <typeparam name="T">Signal, environment variable or system variable</typeparam>
            <param name="semanticName">Name of the measured value</param>
            <param name="unit">Unit of the measured value</param>
        </member>
        <member name="P:Vector.CANoe.TFS.Report.CurrentCycle">
            <summary>
            Returns the current test cycle.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.Report.CurrentTestCaseTitle">
            <summary>
            Returns the current Test Case name.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCaseSkipped(System.String)">
            <summary>
            This function can be used to mark a test case as not executed. This will t
            hen appear as a "skipped" Test Case in the Test Report. The verdict of the Test 
            Module is not affected.
            </summary>
            <param name="title">Title of the test case</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestSequenceSkipped(System.String)">
            <summary>
            This function can be used to mark a test sequences as not executed. This will then
            appear as a "skipped" Test Sequence in the Test Report. The verdict of the Test 
            Module is not affected.
            </summary>
            <param name="title">Title of the test sequence</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCommandBegin(System.String,System.String)">
            <summary>
            Starts a test command. Using this function a sub function of a test case
            is handled as test command.
            </summary>
            <param name="title"> The title of a test command is written to the report. </param>
            <param name="description"> The description of a test command is written to the report. </param>
            <remarks>
            Test commands are only allowed within test cases and test sequences.
            </remarks>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCommandEnd(Vector.CANoe.TFS.Verdict)">
            <summary>
            Ends a test command with a dedicated verdict.
            </summary>
            <param name="verdict"> The verdict of a test command has impact to the resulting verdict of a test module/test unit. </param>
            <remarks>
            Test commands are only allowed within test cases and test sequences.
            </remarks>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestCommandEnd">
            <summary>
            Ends a test command. Verdict of the test command is the result of the test steps.
            </summary>
            <remarks>
            Test commands are only allowed within test cases and test sequences.
            </remarks>
        </member>
        <member name="P:Vector.CANoe.TFS.Report.VerdictTestunit">
            <summary>
            Returns or sets the current verdict of the test unit.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.Report.VerdictLastTestCase">
            <summary>
            Returns the verdict of a test case.
            </summary>
            <remarks>
            Inside of a test case it returns the verdict of the current test case.
            Outside of a test case it returns the verdict of the last test case.
            </remarks>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepInconclusive(System.String,System.String,System.Int32)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as inconclusive.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
            <param name="level">Report Level</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepInconclusive(System.String,System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as inconclusive.
            The default report level is 0.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepInconclusive(System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as inconclusive.
            The default report level is 0.
            </summary>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepErrorInTestSystem(System.String,System.String,System.Int32)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as error in test system.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
            <param name="level">Report Level</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepErrorInTestSystem(System.String,System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as error in test system.
            The default report level is 0.
            </summary>
            <param name="step">Test Step</param>
            <param name="description">Description</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Report.TestStepErrorInTestSystem(System.String)">
            <summary>
            Writing a test step with a description into the report.
            The level can be used in combination with the report filter
            of the test configuration dialog to suppress test steps in the report.
            The test is marked as error in test system.
            The default report level is 0.
            </summary>
            <param name="description">Description</param>
        </member>
        <member name="P:Vector.CANoe.TFS.Report.TestUnitName">
            <summary>
            Returns the Test Unit name.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.Report.TestConfigurationName">
            <summary>
            Returns the Test Configuration name.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.Diagnostics">
            <summary>
            Diagnostics functionality of a test module/test unit.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Diagnostics.CollectEcuInformation(System.String,System.String)">
            <summary>
            This functions sends diagnostic requests and writes the responses to the report
            file. It considers all requests below a diagnostic class that have constant parameters only.
            </summary>
            <param name="ecu">ECU qualifier for the diagnostic target</param>
            <param name="classname">qualifier of the diagnostic class</param>
            <returns>0 when the all requests have received a positive response. Negative numbers specify the diagnostic failure reason.</returns>
        </member>
        <member name="T:Vector.CANoe.TFS.Validation">
            <summary>
            Validation functionality of a test module/test unit.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Validation.ValidateTesterAction(System.String,System.String,Vector.CANoe.Threading.CriterionDelegate,System.Int32,Vector.CANoe.TFS.Verdict)">
            <summary>
            Creates a popup window with the given tester instruction. The window closes automatically when the needed condition is fulfilled or after user cancel.
            The condition is checked every time when the given trigger occurs. The check of the condition must be implemented in the given criterion. 
            The window contains a field for entering a comment that is automatically adopted into the test report when the user cancels before timeout. The result of the command is reported.
            Function is not allowed in standalone mode and is reported as an error in test system or fail in case of 2-valued verdict concept.
            </summary>
            <param name="actionText">the text that is shown in the popup window</param>
            <param name="heading">the heading that is shown in the popup window</param>
            <param name="criterion">the criterion to check the condition</param>
            <param name="timeout">the maximum time to wait for a fulfilled condition</param>
            <param name="resultOnAbort">the verdict to set when timeout occured or user cancel</param>
            <returns><br>0: timeout occured</br>  
            <br>1: condition fulfilled</br>
            <br>2: user cancel</br>
            <br>-1: general error</br>
            </returns>
            <example>
            This example demonstrates the usage of a tester action
            <code source="..\Build Documentation\TFSExamples.cs" region="TesterAction" />
            </example>
        </member>
        <member name="T:Vector.CANoe.TFS.ICheck">
            <summary>
            Interface of a check. A check observes a criterion while a test sequence will be executed. 
            The interface can be used for a faster notation of value checks.
            Checks can be used with global scope in a test module/test unit
            or they can be used in test cases.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.ICheck.Activate">
            <summary>
            Activates a check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. The default title of the check is used for the reporting of the check.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.ICheck.Activate(System.String)">
            <summary>
            Activates a check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. The given title of the check is used for the reporting of the check.
            </summary>
            <param name="title"> The title of the check is written to the report. </param>
        </member>
        <member name="M:Vector.CANoe.TFS.ICheck.Deactivate">
            <summary>
            Deactivates a check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.Check">
            <summary>
            Check class. Can be used as Condition, Constraint or Observation
            in combination with the Criterion classes
            Checks can be used with global scope in a test module/test unit
            or they can be used in test cases.
            Checks cannot be used as static variable.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Check.#ctor(Vector.CANoe.Threading.CriterionDelegate)">
             <summary>
             The constructor needs a user-defined handler. The default type of the check is Condition.
             </summary>
             <param name="callback">The user-defined handler must be marked with the Criterion attribute.</param>
            <example>
             Check that the lights are on while the test sequence is active:
             <code source="..\Build Documentation\TFSExamples.cs" region="Check1" />
             </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Check.#ctor(Vector.CANoe.TFS.CheckType,Vector.CANoe.Threading.CriterionDelegate)">
             <summary>
             The constructor needs a user-defined handler and the type of a check.
             </summary>
             <param name="type"> The type of a check is Condition, Constraint or Observation. </param>
             <param name="callback"> The user-defined handler must be marked with the Criterion attribute. </param>
            <example>
             Check that the lights are on while the test sequence is active.
             <code source="..\Build Documentation\TFSExamples.cs" region="Check2" />
             </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Check.#ctor(Vector.CANoe.Threading.ICriterion)">
            <summary>
            The constructor needs a criterion. The default type of the check is Condition.
            </summary>
            <param name="criterion"> The criterion of a check. </param>
            <example>
            Check that the lights are on while the test sequence is active.
            <code source="..\Build Documentation\TFSExamples.cs" region="Check3" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Check.#ctor(Vector.CANoe.TFS.CheckType,Vector.CANoe.Threading.ICriterion)">
            <summary>
            The constructor needs a criterion and the type of a check.
            </summary>
            <param name="type"> The type of a check is Condition, Constraint or Observation. </param>
            <param name="criterion"> The criterion of a check. </param>
            <example>
            Check that the lights are on while the test sequence is active.
            <code source="..\Build Documentation\TFSExamples.cs" region="Check4" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Check.Activate">
            <summary>
            Activates a check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. The default title of the check is used for the reporting of the check.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Check.Activate(System.String)">
            <summary>
            Activates a check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. The given title of the check is used for the reporting of the check.
            </summary>
            <param name="title"> The title of the check is updated and written to the report. </param>
        </member>
        <member name="M:Vector.CANoe.TFS.Check.Deactivate">
            <summary>
            Deactivates a check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Check.Dispose">
            <summary>
            Disposes the check, frees internal resources. Please call Dispose on the check when you don't need it anymore.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.UserCheck">
            <summary>
            UserCheck class. A user check can be used as Condition, Constraint or Observation
            in combination with user defined check functions.
            Checks can be used with global scope in a test module/test unit
            or they can be used in test cases.
            Checks cannot be used as static variable.
            </summary>
            <remarks>Please dispose after usage</remarks>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_USAGE" />
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_DEFINITION" />
            </example>
        </member>
        <member name="E:Vector.CANoe.TFS.UserCheck.OnActivated">
            <summary>
            Event is called when the UserCheck is activated  (when activation is finished).
            </summary>
        </member>
        <member name="E:Vector.CANoe.TFS.UserCheck.OnDeactivating">
            <summary>
            Event is called when the UserCheck is deactivating (when deactivation starts).
            </summary>
        </member>
        <member name="E:Vector.CANoe.TFS.UserCheck.OnDisposing">
            <summary>
            Event is called when the UserCheck is disposing (when disposing starts).
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheck.#ctor(Vector.CANoe.TFS.CheckType,System.String,System.String)">
            <summary>
            The constructor for a user defined check.
            </summary>
            <param name="type"> The user check type can be 'Condition', 'Constraint' or 'Observation'. </param>
            <param name="title"> The title determines the header used in the statistics report and is added to the report when the violation occurs.</param>
            <param name="description"> A description of the specifications that are checked. This description is added to the statistics report.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_USAGE" />
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_DEFINITION" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheck.#ctor(System.String,System.String)">
            <summary>
            The constructor for a user defined check. The type of the user check is set to 'Condition'.
            </summary>
            <param name="title"> The title determines the header used in the statistics report.</param>
            <param name="description"> A description of the specifications that are checked. This description is added to the statistics report.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_USAGE" />
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_DEFINITION" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheck.Activate">
            <summary>
            Activates a check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. A default title 'User Check' is used.
            </summary>    
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_USAGE" />
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_DEFINITION" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheck.Activate(System.String)">
            <summary>
            Activates a check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. 
            </summary>
            <param name="title"> The title of the check is updated and written to the report. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_USAGE" />
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_DEFINITION" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheck.Deactivate">
            <summary>
            Deactivates a check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_USAGE" />
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_DEFINITION" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheck.ReportViolation(System.String)">
            <summary>
            Reports a violation.
            </summary> 
            <param name="violationDescription"> The description is added to the report file when the violation is detected.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_USAGE" />
            <code source="..\Build Documentation\TFSExamples.cs" region="UC_DEFINITION" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheck.Dispose">
            <summary>
            Disposes the check, frees internal resources. Please call Dispose on the check when you don't need it anymore.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheck.NotifyUnregisterCallbacks">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1">
             <summary>
             The AbsoluteCycleTimeCheck class allows to verify that the message cycle time is in 
             an expected range. The range is specified in absolute terms.
             The check can be used with global scope in a test module/test unit
             or it can be used in test cases.
             Checks cannot be used as static variable.
             </summary>
             <typeparam name="T">Type of the frame whose cycle time shall be checked.</typeparam>
            <example>
             <code source="..\Build Documentation\TFSExamples.cs" region="ACTC_UF" />
             </example>
        </member>
        <member name="M:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1.#ctor(Vector.CANoe.Runtime.Internal.IFrame,Vector.CANoe.TFS.CheckType,System.Int32,System.Int32)">
            <summary>
            The constructor for an AbsoluteCycleTimeCheck.
            </summary>
            <param name="frame"> The CAN frame object for which the check is applied.</param>
            <param name="type"> The check type can be 'Condition', 'Constraint' or 'Observation'. </param>
            <param name="minAbsoluteCycleTime"> A violation is detected if minAbsoluteCycleTime (in milliseconds) is under-run.</param>
            <param name="maxAbsoluteCycleTime"> A violation is detected if maxAbsoluteCycleTime (in milliseconds) is exceeded.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="ACTC_UF" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1.#ctor(Vector.CANoe.Runtime.Internal.IFrame,System.Int32,System.Int32)">
            <summary>
            The constructor for an AbsoluteCycleTimeCheck. The type of the user check is set to 'Condition'.
            </summary>
            <param name="frame"> The CAN frame object for which the check is applied.</param>
            <param name="minAbsoluteCycleTime"> A violation is detected if minAbsoluteCycleTime (in milliseconds) is under-run.</param>
            <param name="maxAbsoluteCycleTime"> A violation is detected if maxAbsoluteCycleTime (in milliseconds) is exceeded.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="ACTC_UF_DCT" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1.#ctor(Vector.CANoe.TFS.CheckType,System.Int32,System.Int32)">
             <summary>
             The constructor for an AbsoluteCycleTimeCheck that uses a NetworkDB frame.
             </summary> 
             <param name="type"> The check type can be 'Condition', 'Constraint' or 'Observation'. </param>
             <param name="minAbsoluteCycleTime"> A violation is detected if minAbsoluteCycleTime (in milliseconds) is under-run.</param>
             <param name="maxAbsoluteCycleTime"> A violation is detected if maxAbsoluteCycleTime (in milliseconds) is exceeded.</param>
            <example>
             <code source="..\Build Documentation\TFSExamples.cs" region="ACTC_DF" />
             </example>
        </member>
        <member name="M:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1.#ctor(System.Int32,System.Int32)">
            <summary>
            The constructor for an AbsoluteCycleTimeCheck. The type of the user check is set to 'Condition'.
            </summary>
            <param name="minAbsoluteCycleTime"> A violation is detected if minAbsoluteCycleTime (in milliseconds) is under-run.</param>
            <param name="maxAbsoluteCycleTime"> A violation is detected if maxAbsoluteCycleTime (in milliseconds) is exceeded.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="ACTC_DF_DCT" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1.Activate">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. A default title 'AbsoluteCycleTimeCheck' is used.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="ACTC_UF" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1.Activate(System.String)">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. 
            </summary>
            <param name="title"> The title of the check is used for reporting. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="ACTC_UF" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1.Deactivate">
            <summary>
            Deactivates the check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="ACTC_UF" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.AbsoluteCycleTimeCheck`1.Dispose">
            <summary>
            Disposes the check, frees internal resources. Please call Dispose on the check when you don't need it anymore.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.RelativeCycleTimeCheck`1">
            <summary>
            The RelativeCycleTimeCheck class allows to monitor if the message cycle time is in 
            an expected range. The range is specified relative to the message cycle time.
            The RelativeCycleTimeCheck is not available for user defined frames.
            The check can be used with global scope in a test module/test unit
            or it can be used in test cases.
            Checks cannot be used as static variable.
            </summary>
            <typeparam name="T">Type of the frame whose cycle time shall be checked.</typeparam>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="RCTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.RelativeCycleTimeCheck`1.#ctor(Vector.CANoe.TFS.CheckType,System.Double,System.Double)">
            <summary>
            The constructor for a relative cycle time check.
            </summary>
            <param name="type"> The check type can be 'Condition', 'Constraint' or 'Observation'. </param>
            <param name="minRelativeCycleTime"> A violation is detected if the minRelativeCycleTime (fraction 0...1 of the cycle time) is under-run.</param>
            <param name="maxRelativeCycleTime"> A violation is detected if the maxRelativeCycleTime (fraction 1...  of the cycle time) is exceeded.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="RCTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.RelativeCycleTimeCheck`1.#ctor(System.Double,System.Double)">
            <summary>
            The constructor for a RelativeCycleTimeCheck. The type of the check is set to 'Condition'.
            </summary>
            <param name="minRelativeCycleTime"> A violation is detected if the minRelativeCycleTime (fraction 0...1 of the cycle time) is under-run.</param>
            <param name="maxRelativeCycleTime"> A violation is detected if the maxRelativeCycleTime (fraction 1...  of the cycle time) is exceeded.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="RCTC_DCT" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.RelativeCycleTimeCheck`1.Activate">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. A default title 'RelativeCycleTimeCheck' is used.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="RCTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.RelativeCycleTimeCheck`1.Activate(System.String)">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. 
            </summary>
            <param name="title"> The title of the check is used for reporting. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="RCTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.RelativeCycleTimeCheck`1.Deactivate">
            <summary>
            Deactivates the check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="RCTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.RelativeCycleTimeCheck`1.Dispose">
            <summary>
            Disposes the check, frees internal resources. Please call Dispose on the check when you don't need it anymore.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.OccurenceTimeCheck`1">
            <summary>
            The OccurenceTimeCheck class allows to monitor if the message cycle time is in 
            an expected range. The range boundaries are calculated from the message delay and cycle times.
            This check can be used for cyclic messages that can asynchronously restart their send cycle.
            The OccurenceTimeCheck is not available for user defined frames.
            The check can be used with global scope in a test module/test unit
            or it can be used in test cases.  
            Checks cannot be used as static variable.
            </summary>
            <typeparam name="T">Type of the frame whose occurrence time shall be checked.</typeparam>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurenceTimeCheck`1.#ctor(Vector.CANoe.TFS.CheckType,System.Double,System.Double)">
            <summary>
            The constructor for a occurrence time check.
            </summary>
            <param name="type"> The check type can be 'Condition', 'Constraint' or 'Observation'. </param>
            <param name="minRelativeDelayTime"> A violation is detected if the minRelativeDelayTime (fraction 0...1 of the delay time) is under-run.</param>
            <param name="maxRelativeCycleTime"> A violation is detected if the maxRelativeCycleTime (fraction 1...  of the cycle time) is exceeded.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurenceTimeCheck`1.#ctor(System.Double,System.Double)">
            <summary>
            The constructor for a OccurenceTimeCheck. The type of the check is set to 'Condition'.
            </summary>
            <param name="minRelativeDelayTime"> A violation is detected if the minRelativeDelayTime (fraction 0...1 of the delay time) is under-run.</param>
            <param name="maxRelativeCycleTime"> A violation is detected if the maxRelativeCycleTime (fraction 1...  of the cycle time) is exceeded.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC_DCT" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurenceTimeCheck`1.Activate">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. A default title 'OccurenceTimeCheck' is used.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurenceTimeCheck`1.Activate(System.String)">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. 
            </summary>
            <param name="title"> The title of the check is used for reporting. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurenceTimeCheck`1.Deactivate">
            <summary>
            Deactivates the check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurenceTimeCheck`1.Dispose">
            <summary>
            Disposes the check, frees internal resources. Please call Dispose on the check when you don't need it anymore.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.OccurrenceCountCheck`1">
            <summary>
            The OccurrenceCountCheck class allows to monitor if the message occurrence is in 
            an expected range. The range boundaries are calculated from the message delay and cycle times.
            This check can be used for cyclic messages that can asynchronously restart their send cycle.
            The OccurrenceCountCheck is not available for user defined frames.
            The check can be used with global scope in a test module/test unit
            or it can be used in test cases.  
            Checks cannot be used as static variable.
            </summary>
            <typeparam name="T">Type of the frame whose occurrence count shall be checked.</typeparam>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurrenceCountCheck`1.#ctor(Vector.CANoe.TFS.CheckType,System.Int32,System.Int32,System.Int32)">
            <summary>
            The constructor for a occurrence count check.
            </summary>
            <param name="type"> The check type can be 'Condition', 'Constraint' or 'Observation'</param>
            <param name="minCount">Defines the required number of each defined message that must occur at least without the check failing. If the attribute is "0", each defined message need not to occur</param>
            <param name="maxCount">Defines the maximum number of each defined message that may occur without the check failing. If the attribute is "0", infinite message occurrences per defined message are allowed</param>
            <param name="timeout">Defines the cyclic repeating time period in which the minimum and maximum number of defined messages must occur without the check failing</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OCC_DCT" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurrenceCountCheck`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            The constructor for a OccurrenceCountCheck. The type of the check is set to 'Condition'.
            </summary>
            <param name="minCount">Required minimum number of defined messages</param>
            <param name="maxCount">Allowed maximum number of defined messages</param>
            <param name="timeout">time to wait for check to succeed.</param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC_DCT" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurrenceCountCheck`1.Activate">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. A default title 'OccurrenceCountCheck' is used.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurrenceCountCheck`1.Activate(System.String)">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. 
            </summary>
            <param name="title"> The title of the check is used for reporting. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurrenceCountCheck`1.Deactivate">
            <summary>
            Deactivates the check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="OTC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.OccurrenceCountCheck`1.Dispose">
            <summary>
            Disposes the check, frees internal resources. Please call Dispose on the check when you don't need it anymore.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.DlcCheck`1">
            <summary>
            The DlcCheck class allows to monitor if the DLC of a message is 
            as defined in the network database.
            The DlcCheck is not available for user defined frames but the UserCheck class 
            can be used to implement such a check.
            The check can be used with global scope in a test module
            or it can be used in test cases.
            Checks cannot be used as static variable.
            </summary> 
            <typeparam name="T">Type of the frame whose DLC shall be checked.</typeparam>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="DLCC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.DlcCheck`1.#ctor(Vector.CANoe.TFS.CheckType)">
            <summary>
            The constructor for a DLC check.
            </summary>
            <param name="type"> The check type can be 'Condition', 'Constraint' or 'Observation'. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="DLCC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.DlcCheck`1.#ctor">
            <summary>
            The constructor for a DlcCheck. The type of the check is set to 'Condition'.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="DLCC_DCT" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.DlcCheck`1.Activate">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. A default title 'DlcCheck' is used.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="DLCC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.DlcCheck`1.Activate(System.String)">
            <summary>
            Activates the check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. 
            </summary>
            <param name="title"> The title of the check is used for reporting. </param>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="DLCC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.DlcCheck`1.Deactivate">
            <summary>
            Deactivates a check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
            <example>
            <code source="..\Build Documentation\TFSExamples.cs" region="DLCC" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.DlcCheck`1.Dispose">
            <summary>
            Disposes the check, frees internal resources. Please call Dispose on the check when you don't need it anymore.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.ValueCheck`1">
            <summary>
            Represents a simple check for a value of a signal, environment variable or system variable.
            Checks can be used with global scope in a test module/test unit
            or they can be used in test cases.
            Checks cannot be used as static variable.
            </summary>
            <typeparam name="T">Type of the runtime value to be checked.</typeparam>
            <example>
            Check that the lights are on while the test sequence is active:
            <code source="..\Build Documentation\TFSExamples.cs" region="ValueCheck1" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.#ctor(Vector.CANoe.TFS.CheckType,System.Double)">
            <summary>
            The constructor needs a value and the type of a check. The default relation is Relation.Equal.
            </summary>
            <param name="type"> The type of a check is Condition, Constraint or Observation. </param>
            <param name="value"> The value that should be checked. </param>
            <example>
            Check that the lights are on while the test sequence is active:
            <code source="..\Build Documentation\TFSExamples.cs" region="ValueCheck1" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.#ctor(Vector.CANoe.TFS.CheckType,Vector.CANoe.Threading.Relation,System.Double)">
            <summary>
            The constructor needs a value, the relation and the type of a check.
            </summary>
            <param name="type"> The type of a check is Condition, Constraint or Observation. </param>
            <param name="relation"> The relation that is used for the value check. </param>
            <param name="value"> The value that should be checked. </param>
            <example>
            Check that the lights are on while the test sequence is active:
            <code source="..\Build Documentation\TFSExamples.cs" region="ValueCheck2" />
            </example>
            <seealso cref="T:Vector.CANoe.Threading.Relation"/>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.#ctor(System.Double)">
            <summary>
            The constructor needs a value. The default relation is Equal and the default type is Condition.
            </summary>
            <param name="value"> The value that should be checked. </param>
            <example>
            Check that the lights are on while the test sequence is active:
            <code source="..\Build Documentation\TFSExamples.cs" region="ValueCheck3" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.#ctor(Vector.CANoe.Threading.Relation,System.Double)">
            <summary>
            The constructor needs a value and a relation. The default type is Condition.
            </summary>
            <param name="relation"> The relation that is used for the value check. </param>
            <param name="value"> The value that should be checked. </param>
            <example>
            Check that the lights are on while the test sequence is active:
            <code source="..\Build Documentation\TFSExamples.cs" region="ValueCheck4" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.#ctor(Vector.CANoe.TFS.CheckType,Vector.CANoe.Threading.ICriterion)">
            <summary>
            Internal constructor. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.Activate">
            <summary>
            Activates a check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. The default title of the check is used for the reporting of the check.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.Activate(System.String)">
            <summary>
            Activates a check. The activation of a check assigns the check as Condition, Constraint or Observation to the test module/test unit
            until the check will be deactivated. The given title of the check is used for the reporting of the check.
            </summary>
            <param name="title"> The title of the check is updated and written to the report. </param>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.Deactivate">
            <summary>
            Deactivates a check. The Condition, Constraint or Observation is removed from the test module/test unit.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.ValueCheck`1.Dispose">
            <summary>
            Disposes the check, frees internal resources. Please call Dispose on the check when you don't need it anymore.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.CheckEvaluator">
            <summary>
            Internal class. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.CheckEvaluator.#ctor(Vector.CANoe.Threading.ICriterion,System.Collections.Generic.IList{System.Type},System.Collections.Generic.IList{Vector.CANoe.Runtime.Internal.IRuntimeValue},Vector.CANoe.TFS.CheckType,System.String)">
            <summary>
            Internal constructor. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.CheckEvaluator.Evaluate">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.CheckEvaluator.RuntimeValues">
            <summary>
            Internal property. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.CheckEvaluator.Type">
            <summary>
            Internal property. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.CheckEvaluator.Description">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.CheckEvaluator.Title">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.UserCheckCallback">
            <summary>
            Internal class. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheckCallback.#ctor(Vector.CANoe.TFS.UserCheck,Vector.CANoe.TFS.CheckType,System.String,System.String)">
            <summary>
            Internal constructor. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.UserCheckCallback.NotifyUnregisterCallbacks">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.UserCheckCallback.Type">
            <summary>
            Internal property. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.UserCheckCallback.Title">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.UserCheckCallback.Description">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.InputAttribute">
            <summary>
            Input attribute for test commands. The Input attribute is used to set values within test commands.
            </summary>
            <example>
            Definition of the Initialize command
            <code source="..\Build Documentation\TFSExamples.cs" region="TestPatternClass1" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.InputAttribute.#ctor(System.Type)">
            <summary>
            The constructor uses the type of the value that is set.
            </summary>
            <param name="t">Type of the parameter to be set</param>
        </member>
        <member name="T:Vector.CANoe.TFS.ExpectedAttribute">
            <summary>
            Expected attribute for test commands. The Expected attribute is used to check simple value conditions within test commands.
            </summary>
            <example>
            Definition of the StateChange command
            <code source="..\Build Documentation\TFSExamples.cs" region="TestPatternClass2" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.ExpectedAttribute.#ctor(System.Type)">
            <summary>
            The constructor uses the type of the value that has to be checked. The default relation is Relation.Equal.
            </summary>
            <param name="t">Type of the parameter to be checked</param>
        </member>
        <member name="M:Vector.CANoe.TFS.ExpectedAttribute.#ctor(System.Type,Vector.CANoe.Threading.Relation)">
            <summary>
            The constructor uses the type of the value that has to be checked and the relation.
            </summary>
            <param name="t">Type of the parameter to be checked</param>
            <param name="relation">Relation for the value check</param>
            <see cref="P:Vector.CANoe.TFS.ExpectedAttribute.Relation"/>
        </member>
        <member name="P:Vector.CANoe.TFS.ExpectedAttribute.Relation">
            <summary>
            Returns the relation of the Expected attribute.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.StateChange">
            <summary>
            Test command StateChange
            </summary>
            <remarks>
            This test command can be used to set parameter values, wait for a specified time and 
            then check the value of parameters.
            </remarks>
            <example>
            Definition of the StateChange command
            <code source="..\Build Documentation\TFSExamples.cs" region="TestPatternClass3" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.StateChange.#ctor">
            <summary>
            Default constructor. Has to be called by the user defined sub class.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.StateChange.Execute">
            <summary>
            Executes the test command
            </summary>
            <returns>Returns the verdict of the test command.</returns>
            <remarks>Test command execution is only allowed inside of test cases</remarks>
        </member>
        <member name="P:Vector.CANoe.TFS.StateChange.Description">
            <summary>
            The description of the test command is written to the report
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.StateChange.Wait">
            <summary>
            Defines the time of the Wait after the input parameters were set
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.Initialize">
            <summary>
            Test command Initialize
            </summary>
            <remarks>
            This test command can be used to set parameter values and wait for a specified time.
            </remarks>
            <example>
            Definition of the Initialize command
            <code source="..\Build Documentation\TFSExamples.cs" region="TestPatternClass4" />
            </example>
        </member>
        <member name="M:Vector.CANoe.TFS.Initialize.#ctor">
            <summary>
            Default constructor. Has to be called by the user defined sub class.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Initialize.Execute">
            <summary>
            Executes the test command
            </summary>
            <returns>Returns the verdict of the test command.</returns>
            <remarks>Test command execution is only allowed inside of test cases</remarks>
        </member>
        <member name="P:Vector.CANoe.TFS.Initialize.Description">
            <summary>
            The description of the test command is written to the report
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.Initialize.Wait">
            <summary>
            Defines the time of the Wait after the input parameters were set
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.Assert">
            <summary>
            Internal class. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsTrue(System.Boolean)">
            <summary>
            Evaluates if the boolean expression is true. If not the testcase is assumed to be failing
            and a report entry is created.
            </summary>
            <param name="b">boolean expresion</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Evaluates if the boolean expression is true. If not the testcase is assumed to be failing
            and the string is added to the report.
            </summary>
            <param name="b">boolean expresion</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsFalse(System.Boolean)">
            <summary>
            Evaluates if the boolean expression is false. If not the testcase is assumed to be failing
            and a report entry is created.
            </summary>
            <param name="b">boolean expresion</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Evaluates if the boolean expression is false. If not the testcase is assumed to be failing
            and the string is added to the report.
            </summary>
            <param name="b">boolean expresion</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsEqual(System.Double,System.Double)">
            <summary>
            Evaluates if the passed values are equal. If they are not equal the testcase is 
            assumed to be failing and a report entry is created.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsEqual(System.Double,System.Double,System.String)">
            <summary>
            Evaluates if the passed values are equal. If they are not equal the testcase is 
            assumed to be failing and the string is added to the report.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsNotEqual(System.Double,System.Double)">
            <summary>
            Evaluates if the passed values are not equal. If they are equal the testcase 
            is assumed to be failing and a report entry is created.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsNotEqual(System.Double,System.Double,System.String)">
            <summary>
            Evaluates if the passed values are not equal. If they are equal the testcase 
            is assumed to be failing and the string is added to the report.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsNull(System.Object)">
            <summary>
            Evaluates if the passed object is Null. If not the testcase 
            is assumed to be failing and a report entry is created.
            </summary>
            <param name="anObject">anObject</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsNull(System.Object,System.String)">
            <summary>
            Evaluates if the passed object is Null. If not the testcase 
            is assumed to be failing and the string is added to the report.
            </summary>
            <param name="anObject">anObject</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsNotNull(System.Object)">
            <summary>
            Evaluates if the passed object is not Null. If not the testcase 
            is assumed to be failing and a report entry is created.
            </summary>
            <param name="anObject">anObject</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsNotNull(System.Object,System.String)">
            <summary>
            Evaluates if the passed object is not Null. If not the testcase 
            is assumed to be failing and the string is added to the report.
            </summary>
            <param name="anObject">anObject</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsGreater(System.Double,System.Double)">
            <summary>
            Evaluates if value 'a' is greater than 'b'. If not the testcase is 
            assumed to be failing and a report entry is created.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsGreater(System.Double,System.Double,System.String)">
            <summary>
            Evaluates if value 'a' is greater than 'b'. If not the testcase is 
            assumed to be failing and the string is added to the report.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsGreaterOrEqual(System.Double,System.Double)">
            <summary>
            Evaluates if value 'a' is greater or equal to 'b'. If not the testcase is 
            assumed to be failing and a report entry is created.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsGreaterOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Evaluates if value 'a' is greater or equal to 'b'. If not the testcase is 
            assumed to be failing and the string is added to the report.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsLess(System.Double,System.Double)">
            <summary>
            Evaluates if value 'a' is less than 'b'. If not the testcase is 
            assumed to be failing and a report entry is created.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsLess(System.Double,System.Double,System.String)">
            <summary>
            Evaluates if value 'a' is less than 'b'. If not the testcase is 
            assumed to be failing and the string is added to the report.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsLessOrEqual(System.Double,System.Double)">
            <summary>
            Evaluates if value 'a' is less or equal to 'b'. If not the testcase is 
            assumed to be failing and a report entry is created.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
        </member>
        <member name="M:Vector.CANoe.TFS.Assert.IsLessOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Evaluates if value 'a' is less or equal to 'b'. If not the testcase is 
            assumed to be failing and the string is added to the report.
            </summary>
            <param name="a">Double value a</param>
            <param name="b">Double value b</param>
            <param name="s">String to be added to the report</param>
        </member>
        <member name="T:Vector.CANoe.TFS.StateChangeExecutor">
            <summary>
            Internal class. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.StateChangeExecutor.#ctor(Vector.CANoe.TFS.StateChange)">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.StateChangeExecutor.Execute">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.InitializeExecutor">
            <summary>
            Internal class. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.InitializeExecutor.#ctor(Vector.CANoe.TFS.Initialize)">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.InitializeExecutor.Execute">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.Utilities">
            <summary>
            Internal class. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Utilities.CompareSignalValues(Vector.CANoe.Runtime.Internal.IRuntimeValue,Vector.CANoe.Threading.Relation,System.Double)">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Utilities.RelationToString(Vector.CANoe.Threading.Relation)">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Utilities.ReportValueCriterion(Vector.CANoe.Threading.Relation,System.Double,System.Double)">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.Utilities.CheckTypeToInt32(Vector.CANoe.TFS.CheckType)">
            <summary>
            Internal constructor. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.TestResetNamespaceDistObjValues">
            <summary>
            Allows the user to reset an object, namespace or member
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.TestResetNamespaceDistObjValues.Reset(System.String)">
            <summary>
            Resets all values
            </summary>
            <param name="path">the path to the object, namespace or member</param>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_int">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_uint">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_double">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_bool">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_string">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_int_int">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_int_uint">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_int_double">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_int_bool">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_int_string">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_uint_uint">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_uint_double">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_uint_bool">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_uint_string">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_double_double">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_double_bool">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_double_string">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_bool_bool">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_bool_string">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.FctDel_string_string">
            <summary>
            Predefined delegate for test cases and test sequences with a dedicated signature.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.TestFactory">
            <summary>
            This class is used to setup the test tree. The method that contain the test tree definition
            must be marked with the TestFactory attribute.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_int,System.Int32)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_int)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_uint,System.UInt32)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_uint)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_double,System.Double)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_double)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_bool,System.Boolean)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_bool)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_string,System.String)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_string)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_int_int,System.Int32,System.Int32)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_int_int)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_int_uint,System.Int32,System.UInt32)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_int_uint)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_int_double,System.Int32,System.Double)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_int_double)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_int_bool,System.Int32,System.Boolean)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_int_bool)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_int_string,System.Int32,System.String)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_int_string)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_uint_uint,System.UInt32,System.UInt32)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_uint_uint)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_uint_double,System.UInt32,System.Double)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_uint_double)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_uint_bool,System.UInt32,System.Boolean)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_uint_bool)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_uint_string,System.UInt32,System.String)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_uint_string)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_double_double,System.Double,System.Double)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_double_double)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_double_bool,System.Double,System.Boolean)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_double_bool)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_double_string,System.Double,System.String)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_double_string)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_bool_bool,System.Boolean,System.Boolean)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_bool_bool)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_bool_string,System.Boolean,System.String)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_bool_string)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS.FctDel_string_string,System.String,System.String)">
            <summary>
            This method is used to add a test case or test sequence with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <param name="param1"> Typed method parameter of the test case or test sequence. </param>
            <param name="param2"> Typed method parameter of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList(System.String,Vector.CANoe.TFS.FctDel_string_string)">
            <summary>
            This method is used to add a test case or test sequence list with a dedicated signature.
            </summary>
            <param name="title"> Title of the test case or test sequence list. </param>
            <param name="element"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateTestTree(Vector.CANoe.TFS.ITestTreeElement[])">
            <summary>
            This method must be always used to create the test tree.
            </summary>
            <param name="testTreeElements"> List of test tree elements. </param>
            <returns> A test tree instance - ITestTree </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(Vector.CANoe.TFS._void)">
            <summary>
            This method is used to add a test case or test sequence that has no parameters.
            </summary>
            <param name="elementFunction"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(System.String,Vector.CANoe.TFS._void)">
            <summary>
            This method is used to add a test case or test sequence that has no parameters.
            </summary>
            <param name="title"> The title is visible in the test configuration and the test report. </param>
            <param name="elementFunction"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement``1(``0,System.Object[])">
            <summary>
            This method is used to add a test case or test sequence with parameters.
            </summary>
            <typeparam name="T"> Defines the function type of the test case or test sequence. </typeparam>
            <param name="elementFunction"> Name of the test case or test sequence. </param>
            <param name="parameterValues"> Parameter values that are used for the test case or test sequence execution. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement``1(System.String,``0,System.Object[])">
            <summary>
            This method is used to add a test case or test sequence with parameters.
            </summary>
            <typeparam name="T"> Defines the function type of the test case or test sequence. </typeparam>
            <param name="title"> The title is visible in the test configuration and the test report. </param>
            <param name="elementFunction"> Name of the test case or test sequence. </param>
            <param name="parameterValues"> Parameter values that are used for the test case or test sequence execution. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList``1(``0)">
            <summary>
            This method is used to create a test case or test sequence list.
            The list elements are arranged inside of a test group.
            </summary>
            <typeparam name="T"> Defines the function type of the test case or test sequence. </typeparam>
            <param name="elementFunction"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElementList``1(System.String,``0)">
            <summary>
            This method is used to create a test case or test sequence list.
            The list elements are arranged inside of a test group. 
            </summary>
            <typeparam name="T"> Defines the function type of the test case or test sequence. </typeparam>
            <param name="title"> The title is visible in the test configuration and the test report. </param>
            <param name="elementFunction"> Name of the test case or test sequence. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateGroup(System.String,Vector.CANoe.TFS.ITestTreeElement[])">
            <summary>
            Creates a test group in the test tree.
            </summary>
            <param name="title"> The title is visible in the test configuration and the test report. </param>
            <param name="childElements"> List of test tree elements in the test group. </param>
            <returns> A test tree element </returns>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.CreateElement(Vector.CANoe.TFS.Internal.TestTreeElementType)">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactory.IsValidElementFunctionType(System.Reflection.MethodInfo,System.String@,Vector.CANoe.TFS.Internal.TestTreeElementType@,System.String)">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.BreakOnFailAttribute">
            <summary>
            Mark a test case or test sequence with this attribute to break on verdict fail.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.BreakOnFailAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor takes bool argument.
            </summary>
            <param name="breakOnFail">if set to <c>true</c> [break on fail].</param>
        </member>
        <member name="P:Vector.CANoe.TFS.BreakOnFailAttribute.BreakOnFail">
            <summary>
            Internal property
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.TestSequenceAttribute">
            <summary>
            Mark a method with this attribute, and it will be handled as a test sequence.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.TestSequenceAttribute.#ctor(System.String,System.String)">
            <summary>
            The constructor takes the title and description of a test sequence.
            </summary>
            <param name="title"> The title of a test sequence is written to the report. </param>
            <param name="description"> The description of a test sequence is written to the report. </param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestSequenceAttribute.#ctor(System.String)">
            <summary>
            The constructor takes the title of a test sequence.
            </summary>
            <param name="title"> The title of a test sequence is written to the report. </param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestSequenceAttribute.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.TestSequenceAttribute.CompileTimeInitialize(System.Reflection.MethodBase)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="method"> Internal parameter </param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestSequenceAttribute.OnEntry(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="eventArgs">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestSequenceAttribute.OnException(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="eventArgs">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Vector.CANoe.TFS.TestSequenceAttribute.OnExit(Vector.PostCompiler.Interface.MethodExecutionEventArgs)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="args">The <see cref="T:Vector.PostCompiler.Interface.MethodExecutionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Vector.CANoe.TFS.ExportAttribute">
            <summary>
            Defines the corresponding function to be an interface function.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.ExportAttribute.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.ValuesAttribute">
            <summary>
            To add a test tree list the test case ore test sequence parameters have to marked with
            the Values or Range attribute. The Values attribute allows to define a value list for the parameter.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.ValuesAttribute.#ctor(System.Object[])">
            <summary>
            Constructor for a value list.
            </summary>
            <param name="values"> The values must be convertible to the parameter type. </param>
        </member>
        <member name="P:Vector.CANoe.TFS.ValuesAttribute.Values">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.RangeAttribute">
            <summary>
            To add a test tree list the test case ore test sequence parameters have to marked with
            the Values or Range attribute. The Range attribute allows to define a value list for the parameter
            from min to max with the distance step.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.RangeAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Constructor for a value list that is calculated from the given parameters.
            </summary>
            <param name="min"> Minimum value of the value list. </param>
            <param name="max"> Maximum value of the value list. </param>
            <param name="step"> Distance between the values in the list. </param>
        </member>
        <member name="P:Vector.CANoe.TFS.RangeAttribute.Min">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.RangeAttribute.Max">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="P:Vector.CANoe.TFS.RangeAttribute.Step">
            <summary>
            Internal method. You should never use this type.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.SequentialAttribute">
            <summary>
            Defines the calculation method to setup the tree list.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.SequentialAttribute.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.CombinatorialAttribute">
            <summary>
            Defines the calculation method to setup the tree list.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.CombinatorialAttribute.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.PairwiseAttribute">
            <summary>
            Defines the calculation method to setup the tree list.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.PairwiseAttribute.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.TestClassAttribute">
            <summary>
            This attribute is used to mark a class in the ITE that contains event handlers or a test tree.
            The event handlers are active as long as the test unit is active.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.TestClassAttribute.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.TestFactoryAttribute">
            <summary>
            This attribute is used to mark the method that defines the test tree.
            The attribute can be used several times in the ITE, i.e. it is possible to define several test tree's.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactoryAttribute.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.TestFactoryAttribute.CompileTimeValidate(System.Reflection.MethodBase)">
            <summary>
            Internal method. You should never use this type.
            </summary>
            <param name="method">internal parameter.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:Vector.CANoe.TFS.ITestTreeElement">
            <summary>
            Empty interface for test tree elements. Only used to ease the setup of the test tree.
            </summary>
        </member>
        <member name="T:Vector.CANoe.TFS.ITestTree">
            <summary>
            Interface of the test tree. It allows to add a single element or a range of elements.
            </summary>
        </member>
        <member name="M:Vector.CANoe.TFS.ITestTree.Add(Vector.CANoe.TFS.ITestTreeElement)">
            <summary>
            Add a single element to the end of the test tree.
            </summary>
            <param name="testTreeElement"> Test tree element. </param>
        </member>
        <member name="M:Vector.CANoe.TFS.ITestTree.Add(Vector.CANoe.TFS.ITestTreeElement[])">
            <summary>
            Add some element to the end of the test tree.
            </summary>
            <param name="testTreeElements"> Test tree element list. </param>
        </member>
        <member name="T:Vector.CANoe.TFS._void">
            <summary>
            Standard delegate for test cases and test sequences that have no parameters.
            </summary>
        </member>
    </members>
</doc>
