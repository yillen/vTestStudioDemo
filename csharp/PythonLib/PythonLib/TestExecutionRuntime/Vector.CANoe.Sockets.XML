<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vector.CANoe.Sockets</name>
    </assembly>
    <members>
        <member name="T:Vector.CANoe.Sockets.NetworkStream">
            <summary>
            Provides the underlying stream of data for network access.
            </summary>
        </member>
        <member name="F:Vector.CANoe.Sockets.NetworkStream.isSocketOwner">
            if a socket is owned by the stream the socket is closed by the stream during his close() method.
        </member>
        <member name="F:Vector.CANoe.Sockets.NetworkStream.fileAccess">
            file access(read, write, read/write)
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.#ctor(Vector.CANoe.Sockets.Internal.Socket)">
            <summary>
            Creates a new instance of the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> class for the specified <see cref="T:Vector.CANoe.Sockets.Socket"/>.
            </summary>
            <param name="socket">The <see cref="T:Vector.CANoe.Sockets.Socket"/> that the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> will use to send and receive data.</param>
            <exception cref="T:System.ArgumentNullException">This is thrown because the <paramref name="socket"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">
            This is thrown because the <paramref name="socket"/> parameter is not connected.-or- 
            the <see cref="P:System.Net.Sockets.Socket.SocketType"/> property of the <paramref name="socket"/> parameter is not <see cref="F:System.Net.Sockets.SocketType.Stream"/>.-or-
            the <paramref name="socket"/> parameter is in a nonblocking state.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.#ctor(Vector.CANoe.Sockets.Internal.Socket,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> class
            for the specified <see cref="T:Vector.CANoe.Sockets.Socket"/> with the specified <see cref="T:Vector.CANoe.Sockets.Socket"/> ownership.
            </summary>
            <param name="socket">The <see cref="T:Vector.CANoe.Sockets.Socket"/> that the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> will use to send and receive data.</param>
            <param name="ownsSocket">Set to <see langword="true"/> to indicate that the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> will take ownership of the <see cref="T:Vector.CANoe.Sockets.Socket"/>; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.ArgumentNullException">This is thrown because the <paramref name="socket"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">
            This is thrown because the <paramref name="socket"/> parameter is not connected.-or- 
            the value of the <see cref="P:System.Net.Sockets.Socket.SocketType"/> property of the <paramref name="socket"/> parameter is not <see cref="F:System.Net.Sockets.SocketType.Stream"/>.-or-
            the <paramref name="socket"/> parameter is in a nonblocking state.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.#ctor(Vector.CANoe.Sockets.Internal.Socket,System.IO.FileAccess)">
            <summary>
            Creates a new instance of the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> class for the specified <see cref="T:Vector.CANoe.Sockets.Socket"/> with the specified access rights.
            </summary>
            <param name="socket">The <see cref="T:Vector.CANoe.Sockets.Socket"/> that the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> will use to send and receive data.</param>
            <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess"/> values that specify the type of access given to the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> over the provided <see cref="T:Vector.CANoe.Sockets.Socket"/>.</param>
            <exception cref="T:System.ArgumentNullException">This is thrown because the <paramref name="socket"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">
            This is thrown because the <paramref name="socket"/> parameter is not connected.-or- 
            the <see cref="P:System.Net.Sockets.Socket.SocketType"/> property of the <paramref name="socket"/> parameter is not <see cref="F:System.Net.Sockets.SocketType.Stream"/>.-or-
            the <paramref name="socket"/> parameter is in a nonblocking state.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.#ctor(Vector.CANoe.Sockets.Internal.Socket,System.IO.FileAccess,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> class for the specified <see cref="T:Vector.CANoe.Sockets.Socket"/> 
            with the specified access rights and the specified <see cref="T:Vector.CANoe.Sockets.Socket"/> ownership.
            </summary>
            <param name="socket">The <see cref="T:Vector.CANoe.Sockets.Socket"/> that the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> will use to send and receive data.</param>
            <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess"/> values that specifies the type of access given to the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> over the provided <see cref="T:Vector.CANoe.Sockets.Socket"/>.</param>
            <param name="ownsSocket">Set to <see langword="true"/> to indicate that the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> will take ownership of the <see cref="T:Vector.CANoe.Sockets.Socket"/>; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.ArgumentNullException">This is thrown because the <paramref name="socket"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">
            This is thrown because the <paramref name="socket"/> parameter is not connected.-or- 
            the <see cref="P:System.Net.Sockets.Socket.SocketType"/> property of the <paramref name="socket"/> parameter is not <see cref="F:System.Net.Sockets.SocketType.Stream"/>.-or-
            the <paramref name="socket"/> parameter is in a nonblocking state.
            </exception>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.CanRead">
            <summary>
            Gets a value that indicates whether the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> supports reading.
            </summary>
            <returns><see langword="true"/> if data can be read from the stream; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.CanSeek">
            <summary>
            Gets a value that indicates whether the stream supports seeking.
            This property is currently not supported. This property always returns <see langword="false"/>
            </summary>
            <returns><see langword="false"/> in all cases to indicate that <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> cannot seek a specific location in the stream.</returns>
            <remarks>This property is currently not supported. This property always returns <see langword="false"/>.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.CanTimeout">
            <summary>
            Indicates whether timeout properties are usable for <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.
            </summary>
            <returns><see langword="true"/> in all cases.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.CanWrite">
            <summary>
            Gets a value that indicates whether the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> supports writing.
            </summary>
            <returns><see langword="true"/> if data can be written to the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.Length">
            <summary>
            Gets the length of the data available on the stream.
            This property is currently not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <returns>The length of the data available on the stream.</returns>
            <exception cref="T:System.NotSupportedException">This is thrown for any use of this property.</exception>
            <remarks>This property is currently not supported and always throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.Position">
            <summary>
            Gets or sets the current position in the stream.
            This property is currently not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <returns>The current position in the stream.</returns> 
            <exception cref="T:System.NotSupportedException">This is thrown for any use of this property.</exception>
            <remarks>This property is currently not supported and always throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.Readable">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> can be read.
            </summary>
            <returns><see langword="true"/> to indicate that the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> can be read; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.Socket">
            <summary>
            Gets the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/>.
            </summary>
            <returns>A <see cref="T:Vector.CANoe.Sockets.Socket"/> that represents the underlying network connection.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.NetworkStream.Writeable">
            <summary>
            Gets a value that indicates whether the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> is writable.
            </summary>
            <returns><see langword="true"/> if data can be written to the stream; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read from the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.
            </summary>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that is the location in memory to store data read from the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.</param>
            <param name="offset">The location in <paramref name="buffer"/> to begin storing the data.</param>
            <param name="size">The number of bytes to read from the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call.</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown because the <paramref name="buffer"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This is thrown because 
            the <paramref name="offset"/> parameter is less than 0.-or- 
            the <paramref name="offset"/> parameter is greater than the length of the <paramref name="buffer"/> parameter.-or- 
            the <paramref name="size"/> is less than 0.-or-
            the <paramref name="size"/> is greater than the length of <paramref name="buffer"/> minus the value of the <paramref name="offset"/> parameter.
            </exception>
            <exception cref="T:System.IO.IOException">
            This is thrown because 
            the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> is closed.-or- 
            there was a failure while reading from the network. -or-
            an error occurred when accessing the socket. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">This is thrown because the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> is closed.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write to a stream.
            </summary>
            <param name="buffer">An array of type <see cref="T:System.Byte"/> that contains the data to write to the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.</param>
            <param name="offset">The location in <paramref name="buffer"/> to begin sending the data.</param>
            <param name="size">The number of bytes to write to the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate that is executed when <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous call.</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown because the <paramref name="buffer"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown because 
            the <paramref name="offset"/> parameter is less than 0.-or- 
            the <paramref name="offset"/> parameter is greater than the length of <paramref name="buffer"/>.-or- 
            the <paramref name="size"/> parameter is less than 0.-or- 
            the <paramref name="size"/> parameter is greater than the length of <paramref name="buffer"/> minus the value of the <paramref name="offset"/> parameter.
            </exception>
            <exception cref="T:System.ObjectDisposedException">This is thrown because the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> is closed.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.Flush">
            <summary>
            Flushes data from the stream. This method is reserved for future use.
            </summary>
            <exception cref="T:System.NotImplementedException">This is thrown for any use of this Method.</exception>
            <remarks>
            This method is reserved for future use.
            For any use of this method, a <see cref="T:System.NotSupportedException"/> is thrown.
            </remarks>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.Close">
            <summary>
            Closes the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.Close(System.Int32)">
            <summary>
            Closes the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> after waiting the specified time to allow data to be sent.
            </summary>
            <param name="timeout">A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.</param>
        </member>
        <member name="F:Vector.CANoe.Sockets.NetworkStream.disposed">
            indicates wheter Dispose() is already called.
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">Set to <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous read.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that represents an asynchronous call.</param>
            <returns>The number of bytes read from the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.</returns>
            <exception cref="T:System.ArgumentNullException">This is thrown because the <paramref name="asyncResult"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.ObjectDisposedException">This is thrown because the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> is closed.</exception>
            <exception cref="T:System.InvalidOperationException">This is thrown because <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> was not called.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous write.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> that represents the asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException">This is thrown because the <paramref name="asyncResult"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.ObjectDisposedException">This is thrown because the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> is closed.</exception>
            <exception cref="T:System.InvalidOperationException">This is thrown because <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> was not called.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
            
             <summary>
             Sets the current position of the stream to the given value.
             This method is currently not supported and always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">This parameter is not used.</param>
             <param name="origin">This parameter is not used.</param>
             <returns>The position in the stream.</returns>
             <exception cref="T:System.NotSupportedException">This is thrown for any use of this method.</exception>
             <remarks>This method is currently not supported and always throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            This method is currently not supported and always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">This parameter is not used.</param>
            <exception cref="T:System.NotSupportedException">This is thrown for any use of this method.</exception>
            <remarks>This method is currently not supported and always throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>This method must not be used. Please use <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> instead.</summary>
            <param name="buffer">
            An array of bytes. When this method returns, the <paramref name="buffer"/> contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.
            </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the <paramref name="buffer"/>. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.NotSupportedException">This method must not be used. Please use <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> instead.</exception>
            <remarks>This method must not be used. Please use <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> instead.</remarks>
        </member>
        <member name="M:Vector.CANoe.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>This method must not be used. Please use <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> instead.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.NotSupportedException">This method must not be used. Please use <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> instead.</exception>
            <remarks>This method must not be used. Please use <see cref="M:Vector.CANoe.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> instead.</remarks>
        </member>
        <member name="T:Vector.CANoe.Sockets.OnIpSendPrepareAttribute">
            <summary>
            Mark a method with this attribute, and it will be called right 
            before a packet will be sent by the TCP/IP stack.
            </summary>
            <remarks>
            The method must take two parameters which are of type <see cref="T:Vector.CANoe.Sockets.Socket"/> and <see cref="T:Vector.CANoe.Runtime.EthernetPacket"/>. 
            The method must be a <see langword="public"/> instance method and it must have a <see cref="T:System.Boolean"/> return type.
            
            </remarks>
            <example>
            <code source="..\Build Documentation\SocketExamples.cs" region="OnIpSendPrepare" />
            </example>
        </member>
        <member name="M:Vector.CANoe.Sockets.OnIpSendPrepareAttribute.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="T:Vector.CANoe.Sockets.OnIpReceivePrepareAttribute">
            <summary>
            Mark a method with this attribute, and it will be called right 
            before a received packet will be dispatched to the TCP/IP stack.
            </summary>
            <remarks>
            The method must take a single parameter which is of type <see cref="T:Vector.CANoe.Runtime.EthernetPacket"/>. 
            The method must be a <see langword="public"/> instance method and it must have a <see cref="T:System.Boolean"/> return type.
            
            </remarks>
            <example>
            <code source="..\Build Documentation\SocketExamples.cs" region="OnIpReceivePrepare" />
            </example>
        </member>
        <member name="M:Vector.CANoe.Sockets.OnIpReceivePrepareAttribute.#ctor">
            <summary>
            Default constructor. 
            </summary>
        </member>
        <member name="T:Vector.CANoe.Sockets.Security.DtlsClient">
            <summary>
            Provides access to datagram-based communication that uses the Datagram Transport Layer Security (DTLS) security protocol to authenticate the server and optionally the client.
            </summary>
        </member>
        <member name="F:Vector.CANoe.Sockets.Security.DtlsClient.mUdpClient">
            <summary>
            Gets the underlying <see cref="T:Vector.CANoe.Sockets.UdpClient"/>.
            </summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.Security.DtlsClient.Available">
            <summary>
            Gets the amount of data received from the network that is available to read.
            </summary>
            <returns>The number of bytes of data received from the network.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.Security.DtlsClient.DontFragment">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies whether the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> allows Internet Protocol (IP) datagrams to be fragmented.
            </summary>
            <returns>true if the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> allows datagram fragmentation; otherwise, false.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.Security.DtlsClient.LocalEndPoint">
            <summary>
            The local endpoint to which the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> is bound.
            </summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.Security.DtlsClient.RemoteEndPoint">
            <summary>
            The remote endpoint to which the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> is connected.
            </summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.Security.DtlsClient.Ttl">
            <summary>
            Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/>.
            </summary>
            <returns>The TTL value.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> class and binds it to the given local endpoint.
            </summary>
            <param name="localEP">The <see cref="T:System.Net.IPEndPoint"/> on which to bind locally.</param>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsClient.Close">
            <summary>
            Closes the DTLS connection and releases all resources.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsClient.BeginAuthenticateAsClient(System.Net.IPEndPoint,System.String,Vector.CANoe.Sockets.Security.X509Certificate,System.AsyncCallback,System.Object)">
            <summary>
            Called by clients to begin an asynchronous operation to authenticate the server and the client.
            </summary>
            <param name="remoteEP">The remote endpoint to which the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> will connect.</param>
            <param name="targetHost">The name of the server that shares this <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/>.  If null or empty, the hostname of the server will not be checked.</param>
            <param name="clientCertificate">The <see cref="T:Vector.CANoe.Sockets.Security.X509Certificate"/> used to authenticate the client.</param>
            <param name="asyncCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the authentication is complete.</param>
            <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the <paramref name="asyncCallback"/> delegate when the operation completes."</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that indicates the status of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Is thrown when no <paramref name="clientCertificate"/> is handed to the method.</exception>
            <exception cref="T:System.InvalidOperationException">Is thrown when the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> has already authenticated.</exception>
            <exception cref="T:System.Security.Authentication.AuthenticationException">Is thrown when authentication has failed.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Sends a datagram to a remote host asynchronously.
            The destination was specified previously by a call to <see cref="M:Vector.CANoe.Sockets.Security.DtlsClient.BeginAuthenticateAsClient(System.Net.IPEndPoint,System.String,Vector.CANoe.Sockets.Security.X509Certificate,System.AsyncCallback,System.Object)"/> and has been authenticated successfully.
            </summary>
            <param name="datagram">A <see cref="T:System.Byte"/> array that contains the data to be sent.</param>
            <param name="bytes">The number of bytes to send.</param>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the send operation. This object is passed to the requestCallback delegate when the operation is complete.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that references the asynchronous send.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">Is thrown when the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> is not authenticated.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsClient.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult"> An <see cref="T:System.IAsyncResult"/> object returned by a call to <see cref="M:Vector.CANoe.Sockets.Security.DtlsClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)"/>.
            </param>
            <returns>If successful, the number of bytes sent to the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/>.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsClient.BeginReceive(System.AsyncCallback,System.Object)">
            <summary>
            Receives a datagram from a remote host asynchronously.
            </summary>
            <param name="requestCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <paramref name="requestCallback"/> delegate when the operation is complete.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that references the asynchronous receive.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">Is thrown when the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> is not authenticated.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsClient.EndReceive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous receive.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> object returned by a call to <see cref="M:Vector.CANoe.Sockets.Security.DtlsClient.BeginReceive(System.AsyncCallback,System.Object)"/>.</param>
            <returns>If successful, an array of bytes that contains datagram data.</returns>
        </member>
        <member name="T:Vector.CANoe.Sockets.Security.DtlsListener">
            <summary>
            Listens for connections from DTLS network clients.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsListener.#ctor(Vector.CANoe.Sockets.Security.X509Certificate,System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.Security.DtlsListener"/> class.
            </summary>
            <param name="serverCertificate">The <see cref="T:Vector.CANoe.Sockets.Security.X509Certificate"/> to authenticate with as server.</param>
            <param name="localEP">The <see cref="T:System.Net.IPEndPoint"/> on which the <see cref="T:Vector.CANoe.Sockets.Security.DtlsListener"/> will listen.</param>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsListener.BeginAcceptDtlsClient(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous operation to accept an incoming authentication attempt.
            </summary>
            <param name="asyncCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="asyncState">A user-defined object containing information about the accept operation. This object is passed to the <paramref name="asyncCallback"/> delegate when the operation is complete.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous creation of the <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/>.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.DtlsListener.EndAcceptDtlsClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:Vector.CANoe.Sockets.Security.DtlsListener.BeginAcceptDtlsClient(System.AsyncCallback,System.Object)"/> method.</param>
            <returns>A <see cref="T:Vector.CANoe.Sockets.Security.DtlsClient"/>.</returns>
            <exception cref="T:System.Security.Authentication.AuthenticationException">Is thrown when the authentication has failed.</exception>
        </member>
        <member name="T:Vector.CANoe.Sockets.Security.X509Certificate">
            <summary>
            Provides methods that help you use X.509 v.3 certificates.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.X509Certificate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> class using the name of a PKCS7 signed file.
            </summary>
            <param name="certificateIdentifier">The name of a PKCS7 signed file.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="certificateIdentifier"/> parameter is <see langword="null"/>.</exception>
        </member>
        <member name="T:Vector.CANoe.Sockets.Security.SslStream">
            <summary>
            Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.#ctor(Vector.CANoe.Sockets.NetworkStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.Security.SslStream"/> class using the specified <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.
            </summary>
            <param name="innerStream">A <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> object used by the <see cref="T:Vector.CANoe.Sockets.Security.SslStream"/> for sending and receiving data.</param>
            <exception cref="T:System.ArgumentException"><paramref name="innerStream"/> is not readable.-or-<paramref name="innerStream"/> is not writable.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerStream"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.BeginAuthenticateAsClient(System.String,Vector.CANoe.Sockets.Security.X509Certificate,System.AsyncCallback,System.Object)">
            <summary>
            Called by clients to begin an asynchronous operation to authenticate the server and optionally the client.
            </summary>
            <param name="targetHost">The name of the server that shares this <see cref="T:Vector.CANoe.Sockets.Security.SslStream"/>. If <see langword="null"/> or empty, the hostname of the server will not be checked.</param>
            <param name="clientCertificate">The <see cref="T:Vector.CANoe.Sockets.Security.X509Certificate"/> used to authenticate the client.</param>
            <param name="asyncCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the authentication is complete.</param>
            <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the <paramref name="asyncCallback"/> delegate when the operation completes.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that indicates the status of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientCertificate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
            <exception cref="T:System.InvalidOperationException">Authentication has already occurred.-or-Server authentication using this <see cref="T:Vector.CANoe.Sockets.Security.SslStream"/> was tried previously.-or- Authentication is already in progress.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.BeginAuthenticateAsServer(Vector.CANoe.Sockets.Security.X509Certificate,System.AsyncCallback,System.Object)">
            <summary>
            Called by servers to begin an asynchronous operation to authenticate the client and optionally the server in a client-server connection.
            </summary>
            <param name="serverCertificate">The <see cref="T:Vector.CANoe.Sockets.Security.X509Certificate"/> used to authenticate the server.</param>
            <param name="asyncCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the authentication is complete.</param>
            <param name="asyncState">A user-defined object that contains information about the operation. This object is passed to the <paramref name="asyncCallback"/> delegate when the operation completes.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that indicates the status of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverCertificate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Security.Authentication.AuthenticationException">The authentication failed and left this object in an unusable state.</exception>
            <exception cref="T:System.InvalidOperationException">Authentication has already occurred.-or-Client authentication using this <see cref="T:Vector.CANoe.Sockets.Security.SslStream"/> was tried previously.-or- Authentication is already in progress.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.
            </summary>
            <param name="buffer">A <see cref="T:System.Byte"/> array that receives the bytes read from the stream.</param>
            <param name="offset">The zero-based location in <paramref name="buffer"/> at which to begin storing the data read from this stream.</param>
            <param name="count">The maximum number of bytes to read from the stream.</param>
            <param name="asyncCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the read operation is complete.</param>
            <param name="asyncState">A user-defined object that contains information about the read operation. This object is passed to the <paramref name="asyncCallback"/> delegate when the operation completes.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that indicates the status of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> &lt; 0.-or-<paramref name="offset"/> &gt; the length of <paramref name="buffer"/>.-or-<paramref name="offset"/> + <paramref name="count"/> &gt; the length of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">The read operation failed.-or-Encryption is in use, but the data could not be decrypted</exception>
            <exception cref="T:System.NotSupportedException">There is already a read operation in progress.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.EndRead(System.IAsyncResult)">
            <summary>
            Ends an asynchronous read operation started with a previous call to <see cref="M:Vector.CANoe.Sockets.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> instance returned by a call to <see cref="M:Vector.CANoe.Sockets.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/></param>
            <returns>A <see cref="T:System.Int32"/> value that specifies the number of bytes read from the underlying stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:Vector.CANoe.Sockets.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            There is no pending read operation to complete. -or-
            Authentication has not occurred.
            </exception>
            <exception cref="T:System.IO.IOException">The read operation failed.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation that writes System.Bytes from the specified buffer to the stream.
            </summary>
            <param name="buffer">A <see cref="T:System.Byte"/> array that supplies the bytes to be written to the stream.</param>
            <param name="offset">The zero-based location in <paramref name="buffer"/> at which to begin reading bytes to be written to the stream.</param>
            <param name="count">An <see cref="T:System.Int32"/> value that specifies the number of bytes to read from <paramref name="buffer"/>.</param>
            <param name="asyncCallback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the write operation is complete.</param>
            <param name="asyncState">A user-defined object that contains information about the write operation. This object is passed to the <paramref name="asyncCallback"/> delegate when the operation completes.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that indicates the status of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="offset"/> &lt; 0.-or-<paramref name="offset"/> &gt; the length of <paramref name="buffer"/>.-or-<paramref name="offset"/> + <paramref name="count"/> &gt; the length of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">The write operation failed.</exception>
            <exception cref="T:System.NotSupportedException">There is already a write operation in progress.</exception>
            <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">Authentication has not occurred.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Security.SslStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation started with a previous call to <see cref="M:Vector.CANoe.Sockets.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> instance returned by a call to <see cref="M:Vector.CANoe.Sockets.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:Vector.CANoe.Sockets.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
            There is no pending write operation to complete. -or-
            Authentication has not occurred.</exception>
            <exception cref="T:System.ObjectDisposedException">This is thrown because the <see cref="T:Vector.CANoe.Sockets.Security.SslStream"/> is closed.</exception>
        </member>
        <member name="T:Vector.CANoe.Sockets.Socket">
            <summary>
            Provides ethernet network access on the socket level.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.Socket"/> class using the specified address family, socket type and protocol.
            </summary>
            <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"/> values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.Socket.CreateNewSocket(System.IntPtr,System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary> Internal method. You should never need to call or override this method. </summary>
            <param name="socketHandle">The socket handle.</param>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>The ISocket</returns>
        </member>
        <member name="T:Vector.CANoe.Sockets.TcpClient">
            <summary>
            TCP Client implementation
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.#ctor(Vector.CANoe.Sockets.Internal.Socket)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> class with the information form the socket, 
            this constructor is needed to return a new TCPClient object after a successful accept.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> class.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> class with the specified <paramref name="family"/>.
            </summary>
            <param name="family">The <see cref="P:System.Net.IPAddress.AddressFamily"/> of the IP protocol.</param>
            <exception cref="T:System.ArgumentException">
            This is thrown because 
            the <paramref name="family"/> parameter is not equal to <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> -or- 
            the <paramref name="family"/> parameter is not equal to <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> class and binds it to the specified local endpoint.
            </summary>
            <param name="localEP">The <see cref="T:System.Net.IPEndPoint"/> to which you bind the TCP <see cref="T:Vector.CANoe.Sockets.Socket"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because the <paramref name="localEP"/> parameter is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.Stream">
            <summary>Contains the network stream to send and receive data</summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.Socket">
            <summary>Socket instance for internal use</summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.Active">
            <summary>
            Gets or set a value that indicates whether a connection has been made.
            </summary>
            <returns><see langword="true"/> if the connection has been made; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <returns>The number of bytes of data received from the network and available to be read.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.Connected">
            <summary>
            Gets a value indicating whether the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> for a <see cref="T:Vector.CANoe.Sockets.TcpClient"/> is connected to a remote host.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:Vector.CANoe.Sockets.TcpClient.Client"/> socket was connected to a remote resource as of the most recent operation; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.ExclusiveAddressUse">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies whether the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> allows only one client to use a port.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> allows only one client to use a specific port; otherwise, <see langword="false"/>.
            This property is only accessible when using the operating system stack.
            </returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when attempting to access the underlying socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <remarks>This property is only accessible when using the operating system stack.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.LingerState">
            <summary>
            Gets or sets information about the linger state of the associated socket.
            </summary>
            <returns>A <see cref="T:System.Net.Sockets.LingerOption"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.NoDelay">
            <summary>
            Gets or sets a value that disables a delay when send or receive buffers are not full.
            </summary>
            <returns><see langword="true"/> if the delay is disabled, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.ReceiveBufferSize">
            <summary>
            Gets or sets the size of the receive buffer.
            </summary>
            <returns>The size of the receive buffer, in bytes.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">This is thrown because an error occurred when setting the buffer size.</exception>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.ReceiveTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which a synchronous Receive call will time out.
            Note that there are no synchronous calls in CANoe, so this property has no effect.
            </summary>
            <returns>The time-out value of the connection in milliseconds.</returns>
            <remarks>Note that there are no synchronous calls in CANoe, so this property has no effect.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.SendBufferSize">
            <summary>
            Gets or sets the size of the send buffer.
            </summary>
            <returns>The size of the send buffer, in bytes.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.SendTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which a synchronous Send call will time out.
            Note that there are no synchronous calls in CANoe, so this property has no effect.
            </summary>
            <returns>The send time-out value, in milliseconds.</returns>
            <remarks>Note that there are no synchronous calls in CANoe, so this property has no effect.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpClient.Client">
            <summary>
            Gets the underlying network <see cref="T:Vector.CANoe.Sockets.Socket"/>.
            </summary>
            <returns>The underlying network <see cref="T:Vector.CANoe.Sockets.Socket"/>.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a remote host connection. The remote host is specified by an <see cref="T:System.Net.IPAddress"/> and a port number (<see cref="T:System.Int32"/>).
            </summary>
            <param name="address">
            The <see cref="T:System.Net.IPAddress"/> of the remote host.
            </param>
            <param name="port">
            The port number of the remote host.
            </param>
            <param name="requestCallback">
            An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.
            </param>
            <param name="state">
            A user-defined object that contains information about the connect operation.
            This object is passed to the <paramref name="requestCallback"/> delegate when the operation is complete.
            </param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because the <paramref name="address"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This is thrown because the <paramref name="port"/> number is not valid.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.Close">
            <summary>
            Disposes this <see cref="T:Vector.CANoe.Sockets.TcpClient"/> instance and requests that the underlying TCP connection be closed.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> class.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            Set to <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt.
            </summary>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> object returned by a call to <see cref="M:Vector.CANoe.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because the <paramref name="asyncResult"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is thrown because the <paramref name="asyncResult"/> parameter was not returned by a call to a <see cref="M:Vector.CANoe.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)"/> method.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown because the <see cref="M:Vector.CANoe.Sockets.TcpClient.EndConnect(System.IAsyncResult)"/> method was previously called for the asynchronous connection.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when attempting to access the <see cref="T:Vector.CANoe.Sockets.Socket"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpClient.GetStream">
            <summary>
            Returns the <see cref="T:Vector.CANoe.Sockets.NetworkStream"/> used to send and receive data.
            </summary>
            <returns>The underlying <see cref="T:Vector.CANoe.Sockets.NetworkStream"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            This is thrown because the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> is not connected to a remote host.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the <see cref="T:Vector.CANoe.Sockets.TcpClient"/> has been closed.
            </exception>
        </member>
        <member name="T:Vector.CANoe.Sockets.TcpListener">
            <summary>
            TCPListener implementation.
            </summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpListener.Server">
            <summary>
            Gets the underlying network <see cref="T:Vector.CANoe.Sockets.Socket"/>.
            </summary>
            <returns>The underlying <see cref="T:Vector.CANoe.Sockets.Socket"/>.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.TcpListener"/> class for IPv4 that listens on the specified port.
            </summary>
            <param name="port">
            The port on which to listen for incoming connection attempts.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This is thrown because the port number is not between <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.TcpListener"/> class with
            the specified local endpoint.
            </summary>
            <param name="localEP">
            An <see cref="T:System.Net.IPEndPoint"/> that represents the local endpoint to which to bind the listener <see cref="T:Vector.CANoe.Sockets.Socket"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="localEP"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.TcpListener"/> class that
            listens for incoming connection attempts on the specified local IP address
            and port number.
            </summary>
            <param name="localAddr">
            An <see cref="T:System.Net.IPAddress"/> that represents the local IP address.
            </param>
            <param name="port">
            The port on which to listen for incoming connection attempts.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="localAddr"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This is thrown because <paramref name="port"/> is not between <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpListener.Socket">
            <summary>
            Socket instance for internal use
            </summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpListener.Active">
            <summary>
            Gets a value that indicates whether <see cref="T:Vector.CANoe.Sockets.TcpListener"/> is actively listening for client connections.
            </summary>
            <returns>true if <see cref="T:Vector.CANoe.Sockets.TcpListener"/> is actively listening; otherwise, false.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpListener.ExclusiveAddressUse">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies whether the <see cref="T:Vector.CANoe.Sockets.TcpListener"/>
            allows only one underlying socket to listen to a specific port.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:Vector.CANoe.Sockets.TcpListener"/> allows only one <see cref="T:Vector.CANoe.Sockets.TcpListener"/>
            to listen to a specific port; otherwise, <see langword="false"/>.
            This property is only accessible when using the operating system stack.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            This is thrown because the <see cref="T:Vector.CANoe.Sockets.TcpListener"/> has been started. Call the <see cref="M:Vector.CANoe.Sockets.TcpListener.Stop"/> method and then set the <see cref="P:Vector.CANoe.Sockets.TcpListener.ExclusiveAddressUse"/> property.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when attempting to access the underlying socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <remarks>This property is only accessible when using the operating system stack.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.TcpListener.LocalEndpoint">
            <summary>
            Gets the underlying <see cref="T:System.Net.EndPoint"/> of the current <see cref="T:Vector.CANoe.Sockets.TcpListener"/>.
            </summary>
            <returns>The <see cref="T:System.Net.EndPoint"/> to which the <see cref="T:Vector.CANoe.Sockets.Socket"/> is bound.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
            <summary>
            Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:Vector.CANoe.Sockets.TcpListener"/> instance.
            This method is not supported and will always throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="allowed">
            A <see cref="T:System.Boolean"/> value that specifies whether to enable or disable NAT traversal.
            </param>
            <exception cref="T:System.NotImplementedException">This is thrown because NAT traversal is not supported by Vector CANoe.</exception>
            <remarks>NAT traversal is not supported by Vector CANoe, so calling <see cref="M:Vector.CANoe.Sockets.TcpListener.AllowNatTraversal(System.Boolean)"/> will always throw a <see cref="T:System.NotImplementedException"/>.</remarks>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
            <summary> Begins an asynchronous operation to accept an incoming connection attempt.</summary>
            <param name="callback">
            An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.
            </param>
            <param name="state">
            A user-defined object containing information about the accept operation.
            This object is passed to the <paramref name="callback"/> delegate when the operation is complete.
            </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous creation of the <see cref="T:Vector.CANoe.Sockets.TcpClient"/>.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred while attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
            <summary>
            Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:Vector.CANoe.Sockets.TcpClient"/> to handle remote host communication.
            </summary>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> returned by a call to the <see cref="M:Vector.CANoe.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)"/> method.
            </param>
            <returns>A <see cref="T:Vector.CANoe.Sockets.TcpClient"/>.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.Pending">
            <summary>
            Determines if there are pending connection requests.
            </summary>
            <returns><see langword="true"/> if connections are pending; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This is thrown because the listener has not been started with a call to <see cref="M:Vector.CANoe.Sockets.TcpListener.Start"/>.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.Start">
            <summary>
            Starts listening for incoming connection requests.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the
            specific error code. When you have obtained this code, you can refer to the
            <see href="https://docs.microsoft.com/en-us/windows/win32/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see>
            documentation in MSDN for a detailed description of the error.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.Start(System.Int32)">
            <summary>
            Starts listening for incoming connection requests with a maximum number of pending connection.
            </summary>
            <param name="backlog">
            The maximum length of the pending connections queue.
            </param>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred while accessing the socket.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This is thrown because the <paramref name="backlog"/> parameter is less than zero or exceeds the maximum number of permitted connections.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.TcpListener.Stop">
            <summary>
            Closes the listener.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode"/> property to obtain the
            specific error code. When you have obtained this code, you can refer to the
            <see href="https://docs.microsoft.com/en-us/windows/win32/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see>
            documentation in MSDN for a detailed description of the error.
            </exception>
        </member>
        <member name="T:Vector.CANoe.Sockets.UdpClient">
            <summary>
            Provides User Datagram Protocol (UDP) network services.
            </summary>
        </member>
        <member name="F:Vector.CANoe.Sockets.UdpClient.disposed">
            <summary>
            Indicates whether the object is disposed or not.
            </summary>
        </member>
        <member name="F:Vector.CANoe.Sockets.UdpClient.asyncReceiveBuffer">
            <summary>
            The receive buffer to store the received data until EndReceive is called. 
            </summary>
        </member>
        <member name="F:Vector.CANoe.Sockets.UdpClient.asyncReceiveEndPoint">
            <summary> the remote endpoint </summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.LocalEndpoint">
            <summary>The local endpoint</summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.Socket">
            <summary>here the underlying socket is stored.</summary>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.IpSocketOptionLevel">
            <summary>Returns the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> of the internet layer of this <see cref="T:Vector.CANoe.Sockets.UdpClient"/>.</summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> class. This constructor only initializes a connection based on IPv4!
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> class.
            </summary>
            <param name="family">
            One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values that specifies the addressing scheme of the socket.
            </param>
            <exception cref="T:System.ArgumentException">
            This is thrown because <paramref name="family"/> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>. 
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> class and
             binds it to the local port number provided.
             This constructor only initializes a connection based on IPv4!
             </summary>
             <param name="port">
             The local port number from which you intend to communicate.
            </param>
             <exception cref="T:System.ArgumentOutOfRangeException">
             This is thrown because the <paramref name="port"/> parameter is greater than <see cref="F:System.Net.IPEndPoint.MaxPort"/> or less than <see cref="F:System.Net.IPEndPoint.MinPort"/>.
             </exception>
             <exception cref="T:System.Net.Sockets.SocketException">
             This is thrown because an error occurred when accessing the socket.
             </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> class and binds it to the specified local endpoint.
            </summary>
            <param name="localEP">
            An <see cref="T:System.Net.IPEndPoint"/> that represents the local endpoint to which you bind the UDP connection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="localEP"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> class and binds it to the local port number provided.
            </summary>
            <param name="port">
            The port on which to listen for incoming connection attempts.
            </param>
            <param name="family">
            One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values that specifies the addressing scheme of the socket.
            </param>
            <exception cref="T:System.ArgumentException">This is thrown because 
            <paramref name="family"/> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">This is thrown because 
            <paramref name="port"/> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort"/> or less than <see cref="F:System.Net.IPEndPoint.MinPort"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.Available">
            <summary>
            Gets the amount of data received from the network that is available to read.
            </summary>
            <returns>The number of bytes of data received from the network.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred while attempting to access the socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.DontFragment">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies whether the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> allows Internet Protocol (IP) datagrams to be fragmented.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> allows datagram fragmentation; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.NotSupportedException">
            This is thrown because this property can be set only for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork"/> flag or 
            the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6"/> flag.
            </exception>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.Client">
            <summary>
            Gets the underlying network <see cref="T:Vector.CANoe.Sockets.Socket"/>.
            </summary>
            <returns>The underlying Network <see cref="T:Vector.CANoe.Sockets.Socket"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.EnableBroadcast">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies whether the <see cref="T:Vector.CANoe.Sockets.UdpClient"/>
            may send or receive broadcast packets.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> allows broadcast packets; otherwise, <see langword="false"/>.
            For the CANoe stack, the default is <see langword="true"/>.
            </returns>
            <remarks>For the CANoe stack, the default is <see langword="true"/>.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.ExclusiveAddressUse">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies whether the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> allows only one client to use a port.
            </summary>
            <returns>
            <see langword="true"/> if the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> allows only one client to use a
            specific port; otherwise, <see langword="false"/>.
            This property is only accessible when using the operating system stack.
            </returns>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when attempting to access the underlying socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <remarks>This property is only accessible when using the operating system stack.</remarks>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.MulticastLoopback">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies whether outgoing multicast packets are delivered to the sending application.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> receives outgoing multicast packets; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Vector.CANoe.Sockets.UdpClient.Ttl">
            <summary>
            Gets or sets a value that specifies the Time to Live (TTL) value of Internet
            Protocol (IP) packets sent by the <see cref="T:Vector.CANoe.Sockets.UdpClient"/>.
            </summary>
            <returns>The TTL value.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)">
            <summary>
            Receives a datagram from a remote host asynchronously.
            </summary>
            <param name="requestCallback">
            An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.
            </param>
            <param name="state">
            A user-defined object that contains information about the receive operation.
            This object is passed to the <paramref name="requestCallback"/> delegate when the operation is complete.
            </param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that references the asynchronous receive.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Sends a datagram to a remote host asynchronously. The destination was specified
            previously by a call to <see cref="O:Vector.CANoe.Sockets.UdpClient.Connect"/>.
            </summary>
            <param name="datagram">
            A <see cref="T:System.Byte"/> array that contains the data to be sent.
            </param>
            <param name="bytes">
            The number of bytes to send.
            </param>
            <param name="requestCallback">
            An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.
            </param>
            <param name="state">
            A user-defined object that contains information about the send operation.
            This object is passed to the <paramref name="requestCallback"/> delegate when the operation
            is complete.
            </param>
            <returns>An <see cref="T:System.IAsyncResult"/> object that references the asynchronous send.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Vector.CANoe.Sockets.UdpClient"/> is not connected to a remote EndPoint.</exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Sends a datagram to a destination asynchronously. The destination is specified by a <see cref="T:System.Net.EndPoint"/>.
            </summary>
            <param name="datagram">
            A <see cref="T:System.Byte"/> array that contains the data to be sent.
            </param>
            <param name="bytes">
            The number of bytes to send.
            </param>
            <param name="endPoint">
            The <see cref="T:System.Net.EndPoint"/> that represents the destination for the data.
            </param>
            <param name="requestCallback">
            An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.
            </param>
            <param name="state">
            A user-defined object that contains information about the send operation.
            This object is passed to the <paramref name="requestCallback"/> delegate when the operation
            is complete.
            </param> 
            <returns>An <see cref="T:System.IAsyncResult"/> object that references the asynchronous send.</returns>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.Close">
            <summary>
            Closes the UDP connection.
            </summary> 
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.Connect(System.Net.IPEndPoint)">
            <summary>
            Establishes a default remote host using the specified network endpoint.
            </summary>
            <param name="endPoint">
            An <see cref="T:System.Net.IPEndPoint"/> that specifies the network endpoint to which you intend to send data.
            </param>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because the <paramref name="endPoint"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> is closed.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Establishes a default remote host using the specified IP address and port number.
            </summary>
            <param name="addr">
            The <see cref="T:System.Net.IPAddress"/> of the remote host to which you intend to send data.
            </param>
            <param name="port">
            The port number to which you intend send data.
            </param>    
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because <see cref="T:Vector.CANoe.Sockets.UdpClient"/> is closed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="addr"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This is thrown because <paramref name="port"/> is not between <see cref="F:System.Net.IPEndPoint.MinPort"/> and <see cref="F:System.Net.IPEndPoint.MaxPort"/>.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)">
            <summary>
            Leaves a multicast group.
            </summary>
            <param name="multicastAddr">
            The <see cref="T:System.Net.IPAddress"/> of the multicast group to leave.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is thrown because the IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily"/> 
            value that defines the addressing scheme of the socket.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="multicastAddr"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)">
            <summary>
            Leaves a multicast group.
            </summary>
            <param name="multicastAddr">
            The <see cref="T:System.Net.IPAddress"/> of the multicast group to leave.
            </param>
            <param name="ifindex">
            The local address of the multicast group to leave.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is thrown because the IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily"/>
            value that defines the addressing scheme of the socket.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="multicastAddr"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)">
            <summary>
            Ends a pending asynchronous receive.
            </summary>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> object returned by a call to <see cref="M:Vector.CANoe.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)"/>.
            </param>
            <param name="remoteEP">
            The specified remote endpoint.
            </param>
            <returns>If successful, the number of bytes received. If unsuccessful, this method returns 0.</returns>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="asyncResult"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is thrown because <paramref name="asyncResult"/> was not returned by a call to the <see cref="M:Vector.CANoe.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)"/> method.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown because <see cref="M:Vector.CANoe.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)"/> was previously called for the asynchronous read.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when attempting to access the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/>. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> object returned by a call to <see cref="O:Vector.CANoe.Sockets.UdpClient.BeginSend"/>.
            </param>
            <returns>If successful, the number of bytes sent to the <see cref="T:Vector.CANoe.Sockets.UdpClient"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="asyncResult"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is thrown because <paramref name="asyncResult"/> was not returned by a call to the 
            <see cref="O:Vector.CANoe.Sockets.UdpClient.BeginSend"/> method.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This is thrown because <see cref="M:Vector.CANoe.Sockets.UdpClient.EndSend(System.IAsyncResult)"/> 
            was previously called for the asynchronous read.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when attempting to access the underlying socket.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)">
            <summary>
            Adds a <see cref="T:Vector.CANoe.Sockets.UdpClient"/> to a multicast group.
            </summary>
            <param name="multicastAddr">
            The multicast <see cref="T:System.Net.IPAddress"/> of the group you want to join.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is thrown because the IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily"/> value that defines the addressing scheme of the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)">
            <summary>
            Adds a <see cref="T:Vector.CANoe.Sockets.UdpClient"/> to a multicast group.
            </summary>
            <param name="ifindex">
            The interface index associated with the local IP address on which to join the multicast group.
            </param>
            <param name="multicastAddr">
            The multicast <see cref="T:System.Net.IPAddress"/> of the group you want to join.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)">
            <summary>
            Adds a <see cref="T:Vector.CANoe.Sockets.UdpClient"/> to a multicast group with the specified Time to Live (TTL).
            </summary>
            <param name="multicastAddr">
            The <see cref="T:System.Net.IPAddress"/> of the multicast group to join.
            </param>
            <param name="timeToLive">
            The Time to Live (TTL), measured in router hops.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            This is thrown because the TTL provided is not between 0 and 255
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            This is thrown because <paramref name="multicastAddr"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            This is thrown because the IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily"/> value that defines the addressing scheme of the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Adds a <see cref="T:Vector.CANoe.Sockets.UdpClient"/> to a multicast group.
            </summary>
            <param name="multicastAddr">
            The multicast <see cref="T:System.Net.IPAddress"/> of the group you want to join.
            </param>
            <param name="localAddress">
            The local <see cref="T:System.Net.IPAddress"/>
            </param>
            <exception cref="T:System.ObjectDisposedException">
            This is thrown because the underlying <see cref="T:Vector.CANoe.Sockets.Socket"/> has been closed.
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            This is thrown because an error occurred when accessing the socket.
            </exception>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> class.
            </summary>
        </member>
        <member name="M:Vector.CANoe.Sockets.UdpClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vector.CANoe.Sockets.UdpClient"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            Set to <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
    </members>
</doc>
