<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vector.Scripting.UI</name>
    </assembly>
    <members>
        <member name="T:Vector.Scripting.UI.ConfirmationResult">
            <summary>
            The result of the confirmation dialog.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationResult.OK">
            <summary>
            User clicked 'OK'.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationResult.Cancel">
            <summary>
            User clicked 'Cancel'.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationResult.Yes">
            <summary>
            User clicked 'Yes'.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationResult.No">
            <summary>
            User clicked 'No'.
            </summary>
        </member>
        <member name="T:Vector.Scripting.UI.ConfirmationDialogButtons">
            <summary>
            Defines the combination of buttons shown in the dialog.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationDialogButtons.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationDialogButtons.OKCancel">
            <summary>
            OK and Cancel button.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationDialogButtons.YesNo">
            <summary>
            Yes and No button.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationDialogButtons.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons.
            </summary>
        </member>
        <member name="T:Vector.Scripting.UI.ConfirmationDialogIcon">
            <summary>
            Specifies which icon is shown in the dialog.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationDialogIcon.None">
            <summary>
            No icon.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationDialogIcon.Information">
            <summary>
            Information icon.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationDialogIcon.Warning">
            <summary>
            Warning icon.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.ConfirmationDialogIcon.Error">
            <summary>
            Error icon.
            </summary>
        </member>
        <member name="T:Vector.Scripting.UI.ConfirmationDialog">
            <summary>
            This class contains static methods for showing confirmation dialogs.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.ConfirmationDialog.#ctor">
            <summary>
            Internal. You should never use this. All dialogs are opened with static member functions.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.ConfirmationDialog.Show(System.String,System.String)">
            <summary>
            Displays a modal message box. Blocks the execution of the script until the user dismisses the dialog. 
            Default values: Buttons = Ok (-> display a single Ok button); Icon = None (no icon is displayed);
            </summary>
            <param name="message">Message string displayed in dialog. </param>
            <param name="caption">Caption of dialog box. </param>
            <returns>ConfirmationResult</returns>
        </member>
        <member name="M:Vector.Scripting.UI.ConfirmationDialog.Show(System.String,System.String,Vector.Scripting.UI.ConfirmationDialogButtons)">
            <summary>
            Displays a modal message box. Blocks the execution of the script until the user dismisses the dialog. 
            Default values: Icon = None (no icon is displayed);
            </summary>
            <param name="message">Message string displayed in dialog. </param>
            <param name="caption">Caption of dialog box. </param>
            <param name="buttons">Buttons to be displayed in dialog box [enum ConfirmationDialogButtons. </param>
            <returns>ConfirmationResult</returns>
        </member>
        <member name="M:Vector.Scripting.UI.ConfirmationDialog.Show(System.String,System.String,Vector.Scripting.UI.ConfirmationDialogButtons,Vector.Scripting.UI.ConfirmationDialogIcon)">
            <summary>
            Displays a modal message box. Blocks the execution of the script until the user closes the dialog. 
            </summary>
            <param name="message">Message string displayed in dialog. </param>
            <param name="caption">Caption of dialog box. </param>
            <param name="buttons">Buttons to be displayed in dialog box [enum ConfirmationDialogButtons]. </param>
            <param name="icon">Icon to be displayed in dialog box [enum ConfirmationDialogIcon]. </param>
            <returns>ConfirmationResult</returns>
        </member>
        <member name="T:Vector.Scripting.UI.DataEntryResult">
            <summary>
            The result of a DataEntryDialog.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.DataEntryResult.OK">
            <summary>
            User clicked 'OK'.
            </summary>
        </member>
        <member name="F:Vector.Scripting.UI.DataEntryResult.Cancel">
            <summary>
            User clicked 'Cancel'.
            </summary>
        </member>
        <member name="T:Vector.Scripting.UI.DataEntryDialog">
            <summary>
            This class contains static methods that open dialogs for entering data.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.DataEntryDialog.#ctor">
            <summary>
            Internal. You should never use this. All dialogs are opened with static member functions.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.DataEntryDialog.Show``1(System.String,System.String,System.String,``0@)">
            <summary>
            Opens a dialog to enter a value.
            </summary>
            <typeparam name="T">The type to be entered. The type can be 'String', 'int', 'uint' or 'double'</typeparam>
            <param name="message">A message to be displayed.</param>
            <param name="caption">The caption for the dialog box.</param>
            <param name="info">Further information to be shown.</param>
            <param name="value">This parameter contains the initial value and the value entered by the user.</param>
            <returns>DataEntryResult</returns>
            <exception cref="T:System.NotSupportedException">If T is no int, uint, string or double a NotSupportedException is raised.</exception>
        </member>
        <member name="M:Vector.Scripting.UI.DataEntryDialog.Show``1(System.String,System.String,System.String,``0@,Vector.Scripting.UI.RangeCollection{``0})">
            <summary>
            Opens a dialog to enter a value. A Range (collection of Intervals) restricts the valid values. The 
            dialog can only be closed with "OK" if the entered value is valid. The provided "value" is used as 
            default value.
            </summary>
            <typeparam name="T">The type to be entered. The type can be 'String', 'int', 'uint' or 'double'</typeparam>
            <param name="message">A message to be displayed.</param>
            <param name="caption">The caption for the dialog box.</param>
            <param name="info">Further information to be shown.</param>
            <param name="value">This parameter contains the initial value and the value entered by the user.</param>
            <param name="rangeCollection">A collection of ranges to which the entered value is compared.</param>
            <returns>DataEntryResult</returns>
        </member>
        <member name="M:Vector.Scripting.UI.DataEntryDialog.Show(System.String,System.String,System.String,System.String@,System.String)">
            <summary>
            Opens a dialog to enter a value. A regular expression restricts the valid values. The 
            dialog can only be closed with "OK" if the entered value is valid. The provided "value" 
            is used as default value.
            </summary>
            <param name="message">A message to be displayed.</param>
            <param name="caption">The caption for the dialog box.</param>
            <param name="info">Further information to be shown.</param>
            <param name="value">This parameter contains the initial value and the value entered by the user.</param>
            <param name="regExString">The regular expression string.</param>
            <returns>DataEntryResult</returns>
        </member>
        <member name="M:Vector.Scripting.UI.DataEntryDialog.Show(System.String,System.String,System.String,System.String@,Vector.Scripting.UI.RangeCollection{System.Int32})">
            <summary>
            Opens a dialog to enter a value. A RangeCollection restricts the valid lengths of the string. The 
            dialog can only be closed with "OK" if the entered value is valid. The provided "value" is used as 
            default value.
            </summary>
            <param name="message">A message to be displayed.</param>
            <param name="caption">The caption for the dialog box.</param>
            <param name="info">Further information to be shown.</param>
            <param name="value">This parameter contains the initial value and the value entered by the user.</param>
            <param name="rangeCollection">A collection of ranges to which the length of the entered string is compared.</param>
            <returns>DataEntryResult</returns>
        </member>
        <member name="M:Vector.Scripting.UI.DataEntryDialog.Show(System.String,System.String,System.String,System.Byte[]@,Vector.Scripting.UI.RangeCollection{System.Int32})">
            <summary>
            Opens a dialog to enter a sequence of byte values. A RangeCollection specifies the number of bytes to be entered. The 
            dialog can only be closed with "OK" if all byte values and the number of entered bytes are valid. 
            </summary>
            <param name="message">A message to be displayed.</param>
            <param name="caption">The caption for the dialog box.</param>
            <param name="info">Further information to be shown.</param>
            <param name="value">This parameter contains the initial byte values and the byte values entered by the user.</param>
            <param name="rangeCollection">A collection of ranges which specifies the number of bytes to be entered.</param>
            <returns>DataEntryResult</returns>
        </member>
        <member name="M:Vector.Scripting.UI.DataEntryDialog.Show(System.String,System.String,System.String,System.Byte[]@)">
            <summary>
            Opens a dialog to enter a sequence of byte values. The 
            dialog can only be closed with "OK" if all byte values are valid. 
            </summary>
            <param name="message">A message to be displayed.</param>
            <param name="caption">The caption for the dialog box.</param>
            <param name="info">Further information to be shown.</param>
            <param name="value">This parameter contains the initial byte values and the byte values entered by the user.</param>
            <returns>DataEntryResult</returns>
        </member>
        <member name="M:Vector.Scripting.UI.DataEntryDialog.Show``1(System.String,System.String,System.String,``0@,System.Int32,Vector.Scripting.UI.ValueTable{``0})">
            <summary>
            Opens a dialog to enter a value. A ValueTable (discrete values) restricts the valid values. 
            An default value is selected that is initially displayed in the ComboBox.
            </summary>
            <typeparam name="T">The type to be entered. The type can be 'String', 'int', 'uint' or 'double'</typeparam>
            <param name="message">A message to be displayed.</param>
            <param name="caption">The caption for the dialog box.</param>
            <param name="info">Further information to be shown.</param>
            <param name="value">This parameter contains the initial value and the value entered by the user.</param>
            <param name="defaultIndex">The index of the default value.</param>
            <param name="valueTable">A table with all values.</param>
            <returns>DataEntryResult</returns>
        </member>
        <member name="T:Vector.Scripting.UI.Range`1">
            <summary>
            A range consists of an upper and lower boundary.
            </summary>
            <typeparam name="T">Allowed types for T are int, uint, double and string.</typeparam>
        </member>
        <member name="M:Vector.Scripting.UI.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Scripting.UI.Range`1"/> class.
            </summary>
            <param name="lower">The lower value.</param>
            <param name="upper">The upper value.</param>
            <exception cref="T:System.NotSupportedException">If T is no int, uint, string or double a NotSupportedException is raised.</exception>
            <exception cref="T:System.InvalidOperationException">The upper value must be larger than the lower value.</exception>
        </member>
        <member name="M:Vector.Scripting.UI.Range`1.IsValueInRange(`0)">
            <summary>
            Determines whether the specified value in the range.
            </summary>
            <param name="value">The value that should be checked against the range boundaries.</param>
            <returns>
            	<c>true</c> if value is in range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Vector.Scripting.UI.Range`1.Upper">
            <summary>
            Gets the upper value.
            </summary>
            <value>The upper value.</value>
        </member>
        <member name="P:Vector.Scripting.UI.Range`1.Lower">
            <summary>
            Gets the lower value.
            </summary>
            <value>The lower value.</value>
        </member>
        <member name="M:Vector.Scripting.UI.Range`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Vector.Scripting.UI.RangeCollection`1">
            <summary>
            A RangeCollection is a collection of Intervals of a specific type T.
            </summary>
            <typeparam name="T">Allowed types for T are int, uint, double and string.</typeparam>
        </member>
        <member name="M:Vector.Scripting.UI.RangeCollection`1.#ctor(System.Collections.Generic.IEnumerable{Vector.Scripting.UI.Range{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Scripting.UI.RangeCollection`1"/> class.
            </summary>
            <param name="range">The intervals.</param>
        </member>
        <member name="M:Vector.Scripting.UI.RangeCollection`1.GetEnumerator">
            <summary>
            Get the RangeCollection enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Vector.Scripting.UI.RangeCollection`1.Count">
            <summary>
            Gets the number of Intervals in the range.
            </summary>
        </member>
        <member name="P:Vector.Scripting.UI.RangeCollection`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Vector.Scripting.UI.Range`1"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Vector.Scripting.UI.RangeCollection`1.IsValueInRange(`0)">
            <summary>
            Determines whether the specified value in in the Range.
            </summary>
            <param name="value">The value to be checked.</param>
            <returns>
            	<c>true</c> if the the specified value is in the range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Vector.Scripting.UI.RangeCollection`1.ToString">
            <summary>
            Return a string indicating the valid ranges for this range collection.
            </summary>
            <returns>
            The valid ranges for this collection.
            </returns>
        </member>
        <member name="T:Vector.Scripting.UI.Internal.Utilities">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.Convert(Vector.Scripting.UI.ConfirmationDialogButtons)">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.Convert(Vector.Scripting.UI.ConfirmationDialogIcon)">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.Convert(Vector.CANoe.Runtime.Internal.OtxDataDialogResult)">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.Convert(Vector.CANoe.Runtime.Internal.OtxDataDialogResult,Vector.Scripting.UI.DataEntryResult@)">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.ConvertToString(System.Object)">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.GetGenericDataType``1(``0)">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.ConvertToGenericType``1(System.String,``0@)">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.DoDialog(Vector.CANoe.Runtime.Internal.OtxDialogData,Vector.CANoe.Runtime.Internal.OtxReturnValueData@)">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.Internal.Utilities.GetProviderName">
            <summary>
            Internal. You should never use this.
            </summary>
        </member>
        <member name="T:Vector.Scripting.UI.ValueTable`1">
            <summary>
            A ValueTable for the specific type T.
            </summary>
            <typeparam name="T">Allowed types for T are int, uint, double and string.</typeparam>
        </member>
        <member name="M:Vector.Scripting.UI.ValueTable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vector.Scripting.UI.ValueTable`1"/> class.
            </summary>
            <param name="values">The values for the ValueTable.</param>
            <exception cref="T:System.NotSupportedException">If T is no int, uint, string or double a NotSupportedException is signaled.</exception>
        </member>
        <member name="M:Vector.Scripting.UI.ValueTable`1.GetEnumerator">
            <summary>
            Get the ValueTable enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Vector.Scripting.UI.ValueTable`1.Count">
            <summary>
            Gets the number of elements in the ValueTable.
            </summary>
        </member>
        <member name="P:Vector.Scripting.UI.ValueTable`1.Item(System.Int32)">
            <summary>
            Gets the type at the specified index.
            </summary>
        </member>
        <member name="M:Vector.Scripting.UI.ValueTable`1.Contains(`0)">
            <summary>
            Determines whether the specified value in in the ValueTable or not.
            </summary>
            <param name="value">The value to be checked.</param>
            <returns>
            	<c>true</c> if the specified value is in the ValueTable; otherwise, <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
